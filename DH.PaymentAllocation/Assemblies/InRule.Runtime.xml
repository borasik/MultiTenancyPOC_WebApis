<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InRule.Runtime</name>
    </assembly>
    <members>
        <member name="P:InRule.Runtime.Configuration.CatalogRuleApplicationConfigElement.RefreshInterval">
            <summary>
            The time interval for refreshing a cached Rule Application Reference from the Catalog.
            </summary>
            <remarks>
            Default is 30 seconds.
            </remarks>
        </member>
        <member name="P:InRule.Runtime.Configuration.CatalogRuleApplicationConfigElement.ConnectionTimeout">
            <summary>
            The timeout value for a successful Catalog Service connection. If the timeout expires without a successful connection to the Catalog, an exception will be thrown.
            </summary>
            <remarks>
            Default is one minute.
            </remarks>
        </member>
        <member name="P:InRule.Runtime.Configuration.CatalogRuleApplicationConfigElement.EnableBackgroundCompilation">
            <summary>
            When EnableBackgroundCompilation is true, <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> will download and compile updated rule applications on a background thread.
            </summary>
            <remarks>
            Default is false.
            </remarks>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteConnectionHandle">
            <summary>
            Handles the unmanaged database pointer, and provides finalization support for it.
            </summary>
        </member>
        <member name="T:InRule.Common.Interop.SQLite.SQLiteNativeProxy">
            <summary>
            Hold onto your lunch...
            This is probably the best way to achieve:
            1) Least amount of code-maintenance if we need to upgrade sqlite3 or the SQLite ADO.NET wrapper,
            2) No intermediate objects to handle JIT-Loading 32-bit or 64-bit Interop Assembly - Static delegates call the P/Invokes directly.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteStatementHandle">
            <summary>
            Provides finalization support for unmanaged SQLite statements.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLite3">
            <summary>
            This class implements SQLiteBase completely, and is the guts of the code that interop's SQLite with .NET
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteBase">
            <summary>
            This internal class provides the foundation of SQLite support.  It defines all the abstract members needed to implement
            a SQLite data provider, and inherits from SQLiteConvert which allows for simple translations of string to and from SQLite.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteConvert">
            <summary>
            This base class provides datatype conversion services for the SQLite provider.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConvert._datetimeFormats">
            <summary>
            An array of ISO8601 datetime formats we support conversion from
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConvert._utf8">
            <summary>
            An UTF-8 Encoding instance, so we can convert strings to and from UTF-8
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConvert._datetimeFormat">
            <summary>
            The default DateTime format for this instance
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.#ctor(InRule.Common.Data.SQLite.SQLiteDateFormats)">
            <summary>
            Initializes the conversion class
            </summary>
            <param name="fmt">The default date/time format to use for this instance</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToUTF8(System.String)">
            <summary>
            Converts a string to a UTF-8 encoded byte array sized to include a null-terminating character.
            </summary>
            <param name="sourceText">The string to convert to UTF-8</param>
            <returns>A byte array containing the converted string plus an extra 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToUTF8(System.DateTime)">
            <summary>
            Convert a DateTime to a UTF-8 encoded, zero-terminated byte array.
            </summary>
            <remarks>
            This function is a convenience function, which first calls ToString() on the DateTime, and then calls ToUTF8() with the
            string result.
            </remarks>
            <param name="dateTimeValue">The DateTime to convert.</param>
            <returns>The UTF-8 encoded string, including a 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.UTF8ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToDateTime(System.String)">
            <summary>
            Converts a string into a DateTime, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
              yyyy-MM-dd HH:mm:ss
              yyyyMMddHHmmss
              yyyyMMddTHHmmssfffffff
              yyyy-MM-dd
              yy-MM-dd
              yyyyMMdd
              HH:mm:ss
              THHmmss
            </remarks>
            <param name="dateText">The string containing either a Tick value, a JulianDay double, or an ISO8601-format string</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToDateTime(System.Double)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToJulianDay(System.DateTime)">
            <summary>
            Converts a DateTime struct to a JulianDay double
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The JulianDay value the Datetime represents</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string value, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <returns>Either a string consisting of the tick count for DateTimeFormat.Ticks, a JulianDay double, or a date/time in ISO8601 format.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToDateTime(System.IntPtr,System.Int32)">
            <summary>
            Internal function to convert a UTF-8 encoded IntPtr of the specified length to a DateTime.
            </summary>
            <remarks>
            This is a convenience function, which first calls ToString() on the IntPtr to convert it to a string, then calls
            ToDateTime() on the string to return a DateTime.
            </remarks>
            <param name="ptr">A pointer to the UTF-8 encoded string</param>
            <param name="len">The length in bytes of the string</param>
            <returns>The parsed DateTime value</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.Split(System.String,System.Char)">
            <summary>
            Smart method of splitting a string.  Skips quoted elements, removes the quotes.
            </summary>
            <remarks>
            This split function works somewhat like the String.Split() function in that it breaks apart a string into
            pieces and returns the pieces as an array.  The primary differences are:
            <list type="bullet">
            <item><description>Only one character can be provided as a separator character</description></item>
            <item><description>Quoted text inside the string is skipped over when searching for the separator, and the quotes are removed.</description></item>
            </list>
            Thus, if splitting the following string looking for a comma:<br/>
            One,Two, "Three, Four", Five<br/>
            <br/>
            The resulting array would contain<br/>
            [0] One<br/>
            [1] Two<br/>
            [2] Three, Four<br/>
            [3] Five<br/>
            <br/>
            Note that the leading and trailing spaces were removed from each item during the split.
            </remarks>
            <param name="source">Source string to split apart</param>
            <param name="separator">Separator character</param>
            <returns>A string array of the split up elements</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToBoolean(System.Object)">
            <summary>
            Convert a value to true or false.
            </summary>
            <param name="source">A string or number representing true or false</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ToBoolean(System.String)">
            <summary>
            Convert a string to true or false.
            </summary>
            <param name="source">A string representing true or false</param>
            <returns></returns>
            <remarks>
            "yes", "no", "y", "n", "0", "1", "on", "off" as well as Boolean.FalseString and Boolean.TrueString will all be
            converted to a proper boolean value.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.ColumnToType(InRule.Common.Data.SQLite.SQLiteStatement,System.Int32,InRule.Common.Data.SQLite.SQLiteType)">
            <summary>
            Determines the data type of a column in a statement
            </summary>
            <param name="stmt">The statement to retrieve information for</param>
            <param name="i">The column to retrieve type information on</param>
            <param name="typ">The SQLiteType to receive the affinity for the given column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.SQLiteTypeToType(InRule.Common.Data.SQLite.SQLiteType)">
            <summary>
            Converts a SQLiteType to a .NET Type object
            </summary>
            <param name="t">The SQLiteType to convert</param>
            <returns>Returns a .NET Type object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.TypeToDbType(System.Type)">
            <summary>
            For a given intrinsic type, return a DbType
            </summary>
            <param name="typ">The native type to convert</param>
            <returns>The corresponding (closest match) DbType</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.DbTypeToColumnSize(System.Data.DbType)">
            <summary>
            Returns the ColumnSize for the given DbType
            </summary>
            <param name="typ">The DbType to get the size of</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.DbTypeToType(System.Data.DbType)">
            <summary>
            Convert a DbType to a Type
            </summary>
            <param name="typ">The DbType to convert from</param>
            <returns>The closest-match .NET type</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.TypeToAffinity(System.Type)">
            <summary>
            For a given type, return the closest-match SQLite TypeAffinity, which only understands a very limited subset of types.
            </summary>
            <param name="typ">The type to evaluate</param>
            <returns>The SQLite type affinity for that type.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConvert.TypeNameToDbType(System.String)">
            <summary>
            For a given type name, return a closest-match .NET type
            </summary>
            <param name="Name">The name of the type to match</param>
            <returns>The .NET DBType the text evaluates to.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.Open(System.String,InRule.Common.Data.SQLite.SQLiteOpenFlagsEnum,System.Int32,System.Boolean)">
            <summary>
            Opens a database.
            </summary>
            <remarks>
            Implementers should call SQLiteFunction.BindFunctions() and save the array after opening a connection
            to bind all attributed user-defined functions and collating sequences to the new connection.
            </remarks>
            <param name="strFilename">The filename of the database to open.  SQLite automatically creates it if it doesn't exist.</param>
            <param name="flags">The open flags to use when creating the connection</param>
            <param name="maxPoolSize">The maximum size of the pool for the given filename</param>
            <param name="usePool">If true, the connection can be pulled from the connection pool</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.Close">
            <summary>
            Closes the currently-open database.
            </summary>
            <remarks>
            After the database has been closed implemeters should call SQLiteFunction.UnbindFunctions() to deallocate all interop allocated
            memory associated with the user-defined functions and collating sequences tied to the closed connection.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.SetTimeout(System.Int32)">
            <summary>
            Sets the busy timeout on the connection.  SQLiteCommand will call this before executing any command.
            </summary>
            <param name="nTimeoutMS">The number of milliseconds to wait before returning SQLITE_BUSY</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.SQLiteLastError">
            <summary>
            Returns the text of the last error issued by SQLite
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.ClearPool">
            <summary>
            When pooling is enabled, force this connection to be disposed rather than returned to the pool
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.Prepare(InRule.Common.Data.SQLite.SQLiteConnection,System.String,InRule.Common.Data.SQLite.SQLiteStatement,System.UInt32,System.String@)">
            <summary>
            Prepares a SQL statement for execution.
            </summary>
            <param name="cnn">The source connection preparing the command.  Can be null for any caller except LINQ</param>
            <param name="strSql">The SQL command text to prepare</param>
            <param name="previous">The previous statement in a multi-statement command, or null if no previous statement exists</param>
            <param name="timeoutMS">The timeout to wait before aborting the prepare</param>
            <param name="strRemain">The remainder of the statement that was not processed.  Each call to prepare parses the
            SQL up to to either the end of the text or to the first semi-colon delimiter.  The remaining text is returned
            here for a subsequent call to Prepare() until all the text has been processed.</param>
            <returns>Returns an initialized SQLiteStatement.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.Step(InRule.Common.Data.SQLite.SQLiteStatement)">
            <summary>
            Steps through a prepared statement.
            </summary>
            <param name="stmt">The SQLiteStatement to step through</param>
            <returns>True if a row was returned, False if not.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteBase.Reset(InRule.Common.Data.SQLite.SQLiteStatement)">
            <summary>
            Resets a prepared statement so it can be executed again.  If the error returned is SQLITE_SCHEMA, 
            transparently attempt to rebuild the SQL statement and throw an error if that was not possible.
            </summary>
            <param name="stmt">The statement to reset</param>
            <returns>Returns -1 if the schema changed while resetting, 0 if the reset was sucessful or 6 (SQLITE_LOCKED) if the reset failed due to a lock</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteBase.Version">
            <summary>
            Returns a string representing the active version of SQLite
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteBase.Changes">
            <summary>
            Returns the number of changes the last executing insert/update caused.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLite3._sql">
            <summary>
            The opaque pointer returned to us by the sqlite provider
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLite3._functionsArray">
            <summary>
            The user-defined functions registered on this connection
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLite3.GetValue(InRule.Common.Data.SQLite.SQLiteStatement,System.Int32,InRule.Common.Data.SQLite.SQLiteType)">
            <summary>
            Helper function to retrieve a column of data from an active statement.
            </summary>
            <param name="stmt">The statement being step()'d through</param>
            <param name="index">The column index to retrieve</param>
            <param name="typ">The type of data contained in the column.  If Uninitialized, this function will retrieve the datatype information.</param>
            <returns>Returns the data in the column</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLite3_UTF16">
            <summary>
            Alternate SQLite3 object, overriding many text behaviors to support UTF-16 (Unicode)
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLite3_UTF16.ToString(System.IntPtr,System.Int32)">
            <summary>
            Overrides SQLiteConvert.ToString() to marshal UTF-16 strings instead of UTF-8
            </summary>
            <param name="b">A pointer to a UTF-16 string</param>
            <param name="nbytelen">The length (IN BYTES) of the string</param>
            <returns>A .NET string</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteCommand">
            <summary>
            SQLite implementation of DbCommand.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._commandText">
            <summary>
            The command text this command is based on
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._cnn">
            <summary>
            The connection the command is associated with
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._version">
            <summary>
            The version of the connection the command is associated with
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._activeReader">
            <summary>
            Indicates whether or not a DataReader is active on the command.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._commandTimeout">
            <summary>
            The timeout for the command, kludged because SQLite doesn't support per-command timeout values
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._designTimeVisible">
            <summary>
            Designer support
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._updateRowSource">
            <summary>
            Used by DbDataAdapter to determine updating behavior
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._parameterCollection">
            <summary>
            The collection of parameters for the command
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._statementList">
            <summary>
            The SQL command text, broken into individual SQL statements as they are executed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._remainingText">
            <summary>
            Unprocessed SQL text that has not been executed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteCommand._transaction">
            <summary>
            Transaction associated with this command
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.#ctor">
            <overloads>
             Constructs a new SQLiteCommand
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.#ctor(System.String)">
            <summary>
            Initializes the command with the given command text
            </summary>
            <param name="commandText">The SQL command text</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.#ctor(System.String,InRule.Common.Data.SQLite.SQLiteConnection)">
            <summary>
            Initializes the command with the given SQL command text and attach the command to the specified
            connection.
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.#ctor(InRule.Common.Data.SQLite.SQLiteConnection)">
            <summary>
            Initializes the command and associates it with the specified connection.
            </summary>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.#ctor(System.String,InRule.Common.Data.SQLite.SQLiteConnection,InRule.Common.Data.SQLite.SQLiteTransaction)">
            <summary>
            Initializes a command with the given SQL, connection and transaction
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
            <param name="transaction">The transaction the command should be associated with</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.Dispose(System.Boolean)">
            <summary>
            Disposes of the command and clears all member variables
            </summary>
            <param name="disposing">Whether or not the class is being explicitly or implicitly disposed</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ClearCommands">
            <summary>
            Clears and destroys all statements currently prepared
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.BuildNextCommand">
            <summary>
            Builds an array of prepared statements for each complete SQL statement in the command text
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.Cancel">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.CreateDbParameter">
            <summary>
            Forwards to the local CreateParameter() function
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.CreateParameter">
            <summary>
            Create a new parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.InitializeForReader">
            <summary>
            This function ensures there are no active readers, that we have a valid connection,
            that the connection is open, that all statements are prepared and all parameters are assigned
            in preparation for allocating a data reader.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Creates a new SQLiteDataReader to execute/iterate the array of SQLite prepared statements
            </summary>
            <param name="behavior">The behavior the data reader should adopt</param>
            <returns>Returns a SQLiteDataReader object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Overrides the default behavior to return a SQLiteDataReader specialization class
            </summary>
            <param name="behavior">The flags to be associated with the reader</param>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ExecuteReader">
            <summary>
            Overrides the default behavior of DbDataReader to return a specialized SQLiteDataReader class
            </summary>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ClearDataReader">
            <summary>
            Called by the SQLiteDataReader when the data reader is closed.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ExecuteNonQuery">
            <summary>
            Execute the command and return the number of rows inserted/updated affected by it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.ExecuteScalar">
            <summary>
            Execute the command and return the first column of the first row of the resultset
            (if present), or null if no resultset was returned.
            </summary>
            <returns>The first column of the first row of the first resultset from the query</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.Prepare">
            <summary>
            Does nothing.  Commands are prepared as they are executed the first time, and kept in prepared state afterwards.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommand.Clone">
            <summary>
            Clones a command, including all its parameters
            </summary>
            <returns>A new SQLiteCommand with the same commandtext, connection and parameters</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.CommandText">
            <summary>
            The SQL command text associated with the command
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.CommandTimeout">
            <summary>
            The amount of time to wait for the connection to become available before erroring out
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.CommandType">
            <summary>
            The type of the command.  SQLite only supports CommandType.Text
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.Connection">
            <summary>
            The connection associated with this command
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.Parameters">
            <summary>
            Returns the SQLiteParameterCollection for the given command
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.DbParameterCollection">
            <summary>
            Forwards to the local Parameters property
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.Transaction">
            <summary>
            The transaction associated with this command.  SQLite only supports one transaction per connection, so this property forwards to the
            command's underlying connection.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.DbTransaction">
            <summary>
            Forwards to the local Transaction property
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.UpdatedRowSource">
            <summary>
            Sets the method the SQLiteCommandBuilder uses to determine how to update inserted or updated rows in a DataTable.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommand.DesignTimeVisible">
            <summary>
            Determines if the command is visible at design time.  Defaults to True.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteCommandBuilder">
            <summary>
            SQLite implementation of DbCommandBuilder.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.#ctor(InRule.Common.Data.SQLite.SQLiteDataAdapter)">
            <summary>
            Initializes the command builder and associates it with the specified data adapter.
            </summary>
            <param name="adp"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Minimal amount of parameter processing.  Primarily sets the DbType for the parameter equal to the provider type in the schema
            </summary>
            <param name="parameter">The parameter to use in applying custom behaviors to a row</param>
            <param name="row">The row to apply the parameter to</param>
            <param name="statementType">The type of statement</param>
            <param name="whereClause">Whether the application of the parameter is part of a WHERE clause</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns a valid named parameter
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns a named parameter for the given ordinal
            </summary>
            <param name="parameterOrdinal">The i of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns a placeholder character for the specified parameter i.
            </summary>
            <param name="parameterOrdinal">The index of the parameter to provide a placeholder for</param>
            <returns>Returns a named parameter</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the handler for receiving row updating events.  Used by the DbCommandBuilder to autogenerate SQL
            statements that may not have previously been generated.
            </summary>
            <param name="adapter">A data adapter to receive events on.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetDeleteCommand">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetUpdateCommand">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetInsertCommand">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Places brackets around an identifier
            </summary>
            <param name="unquotedIdentifier">The identifier to quote</param>
            <returns>The bracketed identifier</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Removes brackets around an identifier
            </summary>
            <param name="quotedIdentifier">The quoted (bracketed) identifier</param>
            <returns>The undecorated identifier</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            Override helper, which can help the base command builder choose the right keys for the given query
            </summary>
            <param name="sourceCommand"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.DataAdapter">
            <summary>
            Gets/sets the DataAdapter for this CommandBuilder
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.CatalogLocation">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.CatalogSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.QuotePrefix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.QuoteSuffix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteCommandBuilder.SchemaSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteConnection">
            <summary>
            SQLite implentation of DbConnection.
            </summary>
            <remarks>
            The <see cref="P:InRule.Common.Data.SQLite.SQLiteConnection.ConnectionString">ConnectionString</see> property of the SQLiteConnection class can contain the following parameter(s), delimited with a semi-colon:
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>{filename}</description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description><b>Ticks</b> - Use DateTime.Ticks<br/><b>ISO8601</b> - Use ISO8601 DateTime format</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>True</b> - Store GUID columns in binary form<br/><b>False</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Normal</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password}</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><b>Y</b> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description><b>True</b> - Use connection pooling<br/><b>False</b> - Do not use connection pooling</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._connectionState">
            <summary>
            State of the current connection
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._connectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._transactionLevel">
            <summary>
            Nesting level of the transactions open on the connection
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._defaultIsolation">
            <summary>
            The default isolation level for new transactions
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._enlistment">
            <summary>
            Whether or not the connection is enlisted in a distrubuted transaction
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._sql">
            <summary>
            The base SQLite object to interop with
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._dataSource">
            <summary>
            The database filename minus path and extension
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._password">
            <summary>
            Temporary password storage, emptied after the database has been opened
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnection._defaultTimeout">
            <summary>
            Default command timeout
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.#ctor">
            <overloads>
             Constructs a new SQLiteConnection object
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.#ctor(System.String)">
            <summary>
            Initializes the connection with the specified connection string
            </summary>
            <param name="connectionString">The connection string to use on the connection</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.#ctor(InRule.Common.Data.SQLite.SQLiteConnection)">
            <summary>
            Clones the settings and connection string from an existing connection.  If the existing connection is already open, this
            function will open its own connection, enumerate any attached databases of the original connection, and automatically
            attach to them.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Clone">
            <summary>
            Creates a clone of the connection.  All attached databases and user-defined functions are cloned.  If the existing connection is open, the cloned connection 
            will also be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Dispose(System.Boolean)">
            <summary>
            Disposes of the SQLiteConnection, closing it if it is active.
            </summary>
            <param name="disposing">True if the connection is being explicitly closed.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.CreateFile(System.String)">
            <summary>
            Creates a database file.  This just creates a zero-byte file which SQLite
            will turn into a database when the file is opened properly.
            </summary>
            <param name="databaseFileName">The file to create</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.OnStateChange(System.Data.ConnectionState)">
            <summary>
            Raises the state change event when the state of the connection changes
            </summary>
            <param name="newState">The new state.  If it is different from the previous state, an event is raised.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel,System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">This parameter is ignored.</param>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is TRUE, but in a multi-threaded multi-writer 
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.BeginTransaction(System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is false, but in a multi-threaded multi-writer 
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">Supported isolation levels are Serializable, ReadCommitted and Unspecified.</param>
            <remarks>
            Unspecified will use the default isolation level specified in the connection string.  If no isolation level is specified in the 
            connection string, Serializable is used.
            Serializable transactions are the default.  In this mode, the engine gets an immediate lock on the database, and no other threads
            may begin a transaction.  Other threads may read from the database, but not write.
            With a ReadCommitted isolation level, locks are deferred and elevated as needed.  It is possible for multiple threads to start
            a transaction in ReadCommitted mode, but if a thread attempts to commit a transaction while another thread
            has a ReadCommitted lock, it may timeout or cause a deadlock on both threads until both threads' CommandTimeout's are reached.
            </remarks>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Forwards to the local BeginTransaction() function
            </summary>
            <param name="isolationLevel">Supported isolation levels are Unspecified, Serializable, and ReadCommitted</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ChangeDatabase(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Close">
            <summary>
            When the database connection is closed, all commands linked to this connection are automatically reset.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ClearPool(InRule.Common.Data.SQLite.SQLiteConnection)">
            <summary>
            Clears the connection pool associated with the connection.  Any other active connections using the same database file
            will be discarded instead of returned to the pool when they are closed.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ClearAllPools">
            <summary>
            Clears all connection pools.  Any active connections will be discarded instead of sent to the pool when they are closed.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.CreateCommand">
            <summary>
            Create a new SQLiteCommand and associate it with this connection.
            </summary>
            <returns>Returns an instantiated SQLiteCommand object already assigned to this connection.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.CreateDbCommand">
            <summary>
            Forwards to the local CreateCommand() function
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ParseConnectionString(System.String)">
            <summary>
            Parses the connection string into component parts
            </summary>
            <param name="connectionString">The connection string to parse</param>
            <returns>An array of key-value pairs representing each parameter of the connection string</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Manual distributed transaction enlistment support
            </summary>
            <param name="transaction">The distributed transaction to enlist in</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.FindKey(System.Collections.Generic.SortedList{System.String,System.String},System.String,System.String)">
            <summary>
            Looks for a key in the array of key/values of the parameter string.  If not found, return the specified default value
            </summary>
            <param name="items">The list to look in</param>
            <param name="key">The key to find</param>
            <param name="defValue">The default value to return if the key is not found</param>
            <returns>The value corresponding to the specified key, or the default value if not found.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Open">
            <summary>
            Opens the connection using the parameters found in the <see cref="P:InRule.Common.Data.SQLite.SQLiteConnection.ConnectionString">ConnectionString</see>
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ChangePassword(System.String)">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ChangePassword(System.Byte[])">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.SetPassword(System.String)">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.SetPassword(System.Byte[])">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.ExpandFileName(System.String)">
            <summary>
            Expand the filename of the data source, resolving the |DataDirectory| macro as appropriate.
            </summary>
            <param name="sourceFile">The database filename to expand</param>
            <returns>The expanded path and filename of the filename</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.GetSchema">
            <overloads>
             The following commands are used to extract schema information out of the database.  Valid schema types are:
             <list type="bullet">
             <item>
             <description>MetaDataCollections</description>
             </item>
             <item>
             <description>DataSourceInformation</description>
             </item>
             <item>
             <description>Catalogs</description>
             </item>
             <item>
             <description>Columns</description>
             </item>
             <item>
             <description>ForeignKeys</description>
             </item>
             <item>
             <description>Indexes</description>
             </item>
             <item>
             <description>IndexColumns</description>
             </item>
             <item>
             <description>Tables</description>
             </item>
             <item>
             <description>Views</description>
             </item>
             <item>
             <description>ViewColumns</description>
             </item>
             </list>
             </overloads>
             <summary>
             Returns the MetaDataCollections schema
             </summary>
             <returns>A DataTable of the MetaDataCollections schema</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.GetSchema(System.String)">
            <summary>
            Returns schema information of the specified collection
            </summary>
            <param name="collectionName">The schema collection to retrieve</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.GetSchema(System.String,System.String[])">
            <summary>
            Retrieves schema information using the specified constraint(s) for the specified collection
            </summary>
            <param name="collectionName">The collection to retrieve</param>
            <param name="restrictionValues">The restrictions to impose</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_MetaDataCollections">
            <summary>
            Builds a MetaDataCollections schema datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_DataSourceInformation">
            <summary>
            Builds a DataSourceInformation datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_Columns(System.String,System.String,System.String)">
            <summary>
            Build a Columns schema
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strTable">The table to retrieve schema information for, must not be null</param>
            <param name="strColumn">The column to retrieve schema information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_Indexes(System.String,System.String,System.String)">
            <summary>
            Returns index information for the given database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strIndex">The name of the index to retrieve information for, can be null</param>
            <param name="strTable">The table to retrieve index information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_Tables(System.String,System.String,System.String)">
            <summary>
            Retrieves table schema information for the database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve tables on</param>
            <param name="strTable">The table to retrieve, can be null</param>
            <param name="strType">The table type, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_Views(System.String,System.String)">
            <summary>
            Retrieves view schema information for the database
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve views on</param>
            <param name="strView">The view name, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_Catalogs(System.String)">
            <summary>
            Retrieves catalog (attached databases) schema information for the database
            </summary>
            <param name="strCatalog">The catalog to retrieve, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_IndexColumns(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the base column information for indexes in a database
            </summary>
            <param name="strCatalog">The catalog to retrieve indexes for (can be null)</param>
            <param name="strTable">The table to restrict index information by (can be null)</param>
            <param name="strIndex">The index to restrict index information by (can be null)</param>
            <param name="strColumn">The source column to restrict index information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_ViewColumns(System.String,System.String,System.String)">
            <summary>
            Returns detailed column information for a specified view
            </summary>
            <param name="strCatalog">The catalog to retrieve columns for (can be null)</param>
            <param name="strView">The view to restrict column information by (can be null)</param>
            <param name="strColumn">The source column to restrict column information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnection.Schema_ForeignKeys(System.String,System.String,System.String)">
            <summary>
            Retrieves foreign key information from the specified set of filters
            </summary>
            <param name="strCatalog">An optional catalog to restrict results on</param>
            <param name="strTable">An optional table to restrict results on</param>
            <param name="strKeyName">An optional foreign key name to restrict results on</param>
            <returns>A DataTable with the results of the query</returns>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteConnection.StateChange">
            <summary>
            This event is raised whenever the database is opened or closed.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.ConnectionString">
            <summary>
            The connection string containing the parameters for the connection
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>{filename}</description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description><b>Ticks</b> - Use DateTime.Ticks<br/><b>ISO8601</b> - Use ISO8601 DateTime format<br/><b>JulianDay</b> - Use JulianDay format</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>Yes/On/1</b> - Store GUID columns in binary form<br/><b>No/Off/0</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>On</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Normal</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password}</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><B>Y</B> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description><b>True</b> - Use connection pooling<br/><b>False</b> - Do not use connection pooling</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.DataSource">
            <summary>
            Returns the filename without extension or path
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.Database">
            <summary>
            Returns an empty string
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            This can also be set in the ConnectionString with "Default Timeout"
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.ServerVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.SQLiteVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnection.State">
            <summary>
            Returns the state of the connection.
            </summary>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteConnection.Update">
            <summary>
            This event is raised whenever SQLite makes an update/delete/insert into the database on
            this connection.  It only applies to the given connection.
            </summary>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteConnection.Commit">
            <summary>
            This event is raised whenever SQLite is committing a transaction.
            Return non-zero to trigger a rollback
            </summary>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteConnection.RollBack">
            <summary>
            This event is raised whenever SQLite is committing a transaction.
            Return non-zero to trigger a rollback
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SynchronizationModes">
            <summary>
            The I/O file cache flushing behavior for the connection
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SynchronizationModes.Normal">
            <summary>
            Normal file flushing at critical sections of the code
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SynchronizationModes.Full">
            <summary>
            Full file flushing after every write operation
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SynchronizationModes.Off">
            <summary>
            Use the default operating system's file flushing, SQLite does not explicitly flush the file buffers after writing
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteCommitHandler">
            <summary>
            Raised when a transaction is about to be committed.  To roll back a transaction, set the 
            rollbackTrans boolean value to true.
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">Event arguments on the transaction</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteUpdateEventHandler">
            <summary>
            Raised when data is inserted, updated and deleted on a given connection
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">The event parameters which triggered the event</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.UpdateEventType">
            <summary>
            Whenever an update event is triggered on a connection, this enum will indicate
            exactly what type of operation is being performed.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventType.Delete">
            <summary>
            A row is being deleted from the given database and table
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventType.Insert">
            <summary>
            A row is being inserted into the table.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventType.Update">
            <summary>
            A row is being updated in the table.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.UpdateEventArgs">
            <summary>
            Passed during an Update callback, these event arguments detail the type of update operation being performed
            on the given connection.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventArgs.Database">
            <summary>
            The name of the database being updated (usually "main" but can be any attached or temporary database)
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventArgs.Table">
            <summary>
            The name of the table being updated
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventArgs.Event">
            <summary>
            The type of update being performed (insert/update/delete)
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.UpdateEventArgs.RowId">
            <summary>
            The RowId affected by this update.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.CommitEventArgs">
            <summary>
            Event arguments raised when a transaction is being committed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CommitEventArgs.AbortTransaction">
            <summary>
            Set to true to abort the transaction and trigger a rollback
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnectionPool._connections">
            <summary>
            The connection pool object
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnectionPool._poolVersion">
            <summary>
            The default version number new pools will get
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionPool.Remove(System.String,System.Int32,System.Int32@)">
            <summary>
            Attempt to pull a pooled connection out of the queue for active duty
            </summary>
            <param name="fileName">The filename for a desired connection</param>
            <param name="maxPoolSize">The maximum size the connection pool for the filename can be</param>
            <param name="version">The pool version the returned connection will belong to</param>
            <returns>Returns NULL if no connections were available.  Even if none are, the poolversion will still be a valid pool version</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionPool.ClearAllPools">
            <summary>
            Clears out all pooled connections and rev's up the default pool version to force all old active objects
            not in the pool to get discarded rather than returned to their pools.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionPool.ClearPool(System.String)">
            <summary>
            Clear a given pool for a given filename.  Discards anything in the pool for the given file, and revs the pool
            version so current active objects on the old version of the pool will get discarded rather than be returned to the pool.
            </summary>
            <param name="fileName">The filename of the pool to clear</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionPool.Add(System.String,InRule.Common.Data.SQLite.SQLiteConnectionHandle,System.Int32)">
            <summary>
            Return a connection to the pool for someone else to use.
            </summary>
            <param name="fileName">The filename of the pool to use</param>
            <param name="hdl">The connection handle to pool</param>
            <param name="version">The pool version the handle was created under</param>
            <remarks>
            If the version numbers don't match between the connection and the pool, then the handle is discarded.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionPool.ResizePool(InRule.Common.Data.SQLite.SQLiteConnectionPool.Pool,System.Boolean)">
            <summary>
            We don't have to thread-lock anything in this function, because it's only called by other functions above
            which already have a thread-safe lock.
            </summary>
            <param name="queue">The queue to resize</param>
            <param name="forAdding">If a function intends to add to the pool, this is true, which forces the resize
            to take one more than it needs from the pool</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteConnectionPool.Pool">
            <summary>
            Keeps track of connections made on a specified file.  The PoolVersion dictates whether old objects get
            returned to the pool or discarded when no longer in use.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder">
            <summary>
            SQLite implementation of DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder._properties">
            <summary>
            Properties of this class
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.#ctor">
            <overloads>
            Constructs a new instance of the class
            </overloads>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class using the specified connection string.
            </summary>
            <param name="connectionString">The connection string to parse</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Initialize(System.String)">
            <summary>
            Private initializer, which assigns the connection string and resets the builder
            </summary>
            <param name="cnnString">The connection string to assign</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Helper function for retrieving values from the connectionstring
            </summary>
            <param name="keyword">The keyword to retrieve settings for</param>
            <param name="value">The resulting parameter value</param>
            <returns>Returns true if the value was found and returned</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.FallbackGetProperties(System.Collections.Hashtable)">
            <summary>
            Fallback method for MONO, which doesn't implement DbConnectionStringBuilder.GetProperties()
            </summary>
            <param name="propertyList">The hashtable to fill with property descriptors</param>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Version">
            <summary>
            Gets/Sets the default version of the SQLite engine to instantiate.  Currently the only valid value is 3, indicating version 3 of the sqlite library.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.SyncMode">
            <summary>
            Gets/Sets the synchronization mode (file flushing) of the connection string.  Default is "Normal".
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.UseUTF16Encoding">
            <summary>
            Gets/Sets the encoding for the connection string.  The default is "False" which indicates UTF-8 encoding.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Pooling">
            <summary>
            Gets/Sets whether or not to use connection pooling.  The default is "False"
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.BinaryGUID">
            <summary>
            Gets/Sets whethor not to store GUID's in binary format.  The default is True
            which saves space in the database.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.DataSource">
            <summary>
            Gets/Sets the filename to open on the connection string.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Uri">
            <summary>
            An alternate to the data source property
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Enlist">
            <summary>
            Determines whether or not the connection will automatically participate
            in the current distributed transaction (if one exists)
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.FailIfMissing">
            <summary>
            If set to true, will throw an exception if the database specified in the connection
            string does not exist.  If false, the database will be created automatically.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.LegacyFormat">
            <summary>
            If enabled, uses the legacy 3.xx format for maximum compatibility, but results in larger
            database sizes.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.ReadOnly">
            <summary>
            When enabled, the database will be opened for read-only access and writing will be disabled.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.Password">
            <summary>
            Gets/sets the database encryption password
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.PageSize">
            <summary>
            Gets/Sets the page size for the connection.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.MaxPageCount">
            <summary>
            Gets/Sets the maximum number of pages the database may hold
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.CacheSize">
            <summary>
            Gets/Sets the cache size for the connection.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.DateTimeFormat">
            <summary>
            Gets/Sets the datetime format for the connection.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.JournalMode">
            <summary>
            Determines how SQLite handles the transaction journal file.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteConnectionStringBuilder.DefaultIsolationLevel">
            <summary>
            Sets the default isolation level for transactions on the connection.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.TypeAffinity">
            <summary>
            SQLite has very limited types, and is inherently text-based.  The first 5 types below represent the sum of all types SQLite
            understands.  The DateTime extension to the spec is for internal use only.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Uninitialized">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Int64">
            <summary>
            All integers in SQLite default to Int64
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Double">
            <summary>
            All floating point numbers in SQLite default to double
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Text">
            <summary>
            The default data type of SQLite is text
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Blob">
            <summary>
            Typically blob types are only seen when returned from a function
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.Null">
            <summary>
            Null types can be returned from functions
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.DateTime">
            <summary>
            Used internally by this provider
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.TypeAffinity.None">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteDateFormats">
            <summary>
            This implementation of SQLite for ADO.NET can process date/time fields in databases in only one of three formats.  Ticks, ISO8601
            and JulianDay.
            </summary>
            <remarks>
            ISO8601 is more compatible, readable, fully-processable, but less accurate as it doesn't provide time down to fractions of a second.
            JulianDay is the numeric format the SQLite uses internally and is arguably the most compatible with 3rd party tools.  It is
            not readable as text without post-processing.
            Ticks less compatible with 3rd party tools that query the database, and renders the DateTime field unreadable as text without post-processing.
            
            The preferred order of choosing a datetime format is JulianDay, ISO8601, and then Ticks.  Ticks is mainly present for legacy 
            code support.
            </remarks>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDateFormats.Ticks">
            <summary>
            Using ticks is not recommended and is not well supported with LINQ.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDateFormats.ISO8601">
            <summary>
            The default format for this provider.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDateFormats.JulianDay">
            <summary>
            JulianDay format, which is what SQLite uses internally
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteJournalModeEnum">
            <summary>
            This enum determines how SQLite treats its journal file.
            </summary>
            <remarks>
            By default SQLite will create and delete the journal file when needed during a transaction.
            However, for some computers running certain filesystem monitoring tools, the rapid
            creation and deletion of the journal file can cause those programs to fail, or to interfere with SQLite.
            
            If a program or virus scanner is interfering with SQLite's journal file, you may receive errors like "unable to open database file"
            when starting a transaction.  If this is happening, you may want to change the default journal mode to Persist.
            </remarks>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteJournalModeEnum.Delete">
            <summary>
            The default mode, this causes SQLite to create and destroy the journal file as-needed.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteJournalModeEnum.Persist">
            <summary>
            When this is set, SQLite will keep the journal file even after a transaction has completed.  It's contents will be erased,
            and the journal re-used as often as needed.  If it is deleted, it will be recreated the next time it is needed.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteJournalModeEnum.Off">
            <summary>
            This option disables the rollback journal entirely.  Interrupted transactions or a program crash can cause database
            corruption in this mode!
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteType">
            <summary>
            Struct used internally to determine the datatype of a column in a resultset
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteType.Type">
            <summary>
            The DbType of the column, or DbType.Object if it cannot be determined
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteType.Affinity">
            <summary>
            The affinity of a column, used for expressions or when Type is DbType.Object
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteDataAdapter">
            <summary>
            SQLite implementation of DbDataAdapter.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.#ctor">
            <overloads>
            This class is just a shell around the DbDataAdapter.  Nothing from DbDataAdapter is overridden here, just a few constructors are defined.
            </overloads>
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.#ctor(InRule.Common.Data.SQLite.SQLiteCommand)">
            <summary>
            Constructs a data adapter using the specified select command.
            </summary>
            <param name="cmd">The select command to associate with the adapter.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.#ctor(System.String,InRule.Common.Data.SQLite.SQLiteConnection)">
            <summary>
            Constructs a data adapter with the supplied select command text and associated with the specified connection.
            </summary>
            <param name="commandText">The select command text to associate with the data adapter.</param>
            <param name="connection">The connection to associate with the select command.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructs a data adapter with the specified select command text, and using the specified database connection string.
            </summary>
            <param name="commandText">The select command text to use to construct a select command.</param>
            <param name="connectionString">A connection string suitable for passing to a new SQLiteConnection, which is associated with the select command.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raised by the underlying DbDataAdapter when a row is being updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raised by DbDataAdapter after a row is updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteDataAdapter.RowUpdating">
            <summary>
            Row updating event handler
            </summary>
        </member>
        <member name="E:InRule.Common.Data.SQLite.SQLiteDataAdapter.RowUpdated">
            <summary>
            Row updated event handler
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataAdapter.SelectCommand">
            <summary>
            Gets/sets the select command for this DataAdapter
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataAdapter.InsertCommand">
            <summary>
            Gets/sets the insert command for this DataAdapter
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataAdapter.UpdateCommand">
            <summary>
            Gets/sets the update command for this DataAdapter
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataAdapter.DeleteCommand">
            <summary>
            Gets/sets the delete command for this DataAdapter
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteDataReader">
            <summary>
            SQLite implementation of DbDataReader.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._command">
            <summary>
            Underlying command this reader is attached to
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._activeStatementIndex">
            <summary>
            Index of the current statement in the command being processed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._activeStatement">
            <summary>
            Current statement being Read()
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._readingState">
            <summary>
            State of the current statement being processed.
            -1 = First Step() executed, so the first Read() will be ignored
             0 = Actively reading
             1 = Finished reading
             2 = Non-row-returning statement, no records
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._rowsAffected">
            <summary>
            Number of records affected by the insert/update statements executed on the command
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._fieldCount">
            <summary>
            Count of fields (columns) in the row-returning statement currently being processed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._fieldTypeArray">
            <summary>
            Datatypes of active fields (columns) in the current statement, used for type-restricting data
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._commandBehavior">
            <summary>
            The behavior of the datareader
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._disposeCommand">
            <summary>
            If set, then dispose of the command object when the reader is finished
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteDataReader._keyInfo">
            <summary>
            An array of rowid's for the active statement if CommandBehavior.KeyInfo is specified
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.#ctor(InRule.Common.Data.SQLite.SQLiteCommand,System.Data.CommandBehavior)">
            <summary>
            Internal constructor, initializes the datareader and sets up to begin executing statements
            </summary>
            <param name="cmd">The SQLiteCommand this data reader is for</param>
            <param name="behave">The expected behavior of the data reader</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.Close">
            <summary>
            Closes the datareader, potentially closing the connection as well if CommandBehavior.CloseConnection was specified.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.CheckClosed">
            <summary>
            Throw an error if the datareader is closed
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.CheckValidRow">
            <summary>
            Throw an error if a row is not loaded
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetEnumerator">
            <summary>
            Enumerator support
            </summary>
            <returns>Returns a DbEnumerator object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.VerifyType(System.Int32,System.Data.DbType)">
            <summary>
            SQLite is inherently un-typed.  All datatypes in SQLite are natively strings.  The definition of the columns of a table
            and the affinity of returned types are all we have to go on to type-restrict data in the reader.
            
            This function attempts to verify that the type of data being requested of a column matches the datatype of the column.  In
            the case of columns that are not backed into a table definition, we attempt to match up the affinity of a column (int, double, string or blob)
            to a set of known types that closely match that affinity.  It's not an exact science, but its the best we can do.
            </summary>
            <returns>
            This function throws an InvalidTypeCast() exception if the requested type doesn't match the column's definition or affinity.
            </returns>
            <param name="i">The index of the column to type-check</param>
            <param name="typ">The type we want to get out of the column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetBoolean(System.Int32)">
            <summary>
            Retrieves the column as a boolean value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>bool</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetByte(System.Int32)">
            <summary>
            Retrieves the column as a single byte value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>byte</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of bytes (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldOffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the bytes into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of bytes written into the array</returns>
            <remarks>
            To determine the number of bytes in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetChar(System.Int32)">
            <summary>
            Returns the column as a single character
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>char</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of chars (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldoffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the characters into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of characters written into the array</returns>
            <remarks>
            To determine the number of characters in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Retrieves the name of the back-end datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetDateTime(System.Int32)">
            <summary>
            Retrieve the column as a date/time value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetDecimal(System.Int32)">
            <summary>
            Retrieve the column as a decimal value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>decimal</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetDouble(System.Int32)">
            <summary>
            Returns the column as a double
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>double</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetFieldType(System.Int32)">
            <summary>
            Returns the .NET type of a given column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Type</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetFloat(System.Int32)">
            <summary>
            Returns a column as a float value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>float</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the column as a Guid
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Guid</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetInt16(System.Int32)">
            <summary>
            Returns the column as a short
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int16</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetInt32(System.Int32)">
            <summary>
            Retrieves the column as an int
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int32</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetInt64(System.Int32)">
            <summary>
            Retrieves the column as a long
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int64</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetName(System.Int32)">
            <summary>
            Retrieves the name of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetOrdinal(System.String)">
            <summary>
            Retrieves the i of a column, given its name
            </summary>
            <param name="name">The name of the column to retrieve</param>
            <returns>The int i of the column</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetSchemaTable">
            <summary>
            Schema information in SQLite is difficult to map into .NET conventions, so a lot of work must be done
            to gather the necessary information so it can be represented in an ADO.NET manner.
            </summary>
            <returns>Returns a DataTable containing the schema information for the active SELECT statement being processed.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetString(System.Int32)">
            <summary>
            Retrieves the column as a string
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetValue(System.Int32)">
            <summary>
            Retrieves the column as an object corresponding to the underlying datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetValues(System.Object[])">
            <summary>
            Retreives the values of multiple columns, up to the size of the supplied array
            </summary>
            <param name="values">The array to fill with values from the columns in the current resultset</param>
            <returns>The number of columns retrieved</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.IsDBNull(System.Int32)">
            <summary>
            Returns True if the specified column is null
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>True or False</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.NextResult">
            <summary>
            Moves to the next resultset in multiple row-returning SQL command.
            </summary>
            <returns>True if the command was successful and a new resultset is available, False otherwise.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.GetSQLiteType(System.Int32)">
            <summary>
            Retrieves the SQLiteType for a given column, and caches it to avoid repetetive interop calls.
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>A SQLiteType structure</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteDataReader.Read">
            <summary>
            Reads the next row from the resultset
            </summary>
            <returns>True if a new row was successfully loaded and is ready for processing</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.Depth">
            <summary>
            Not implemented.  Returns 0
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.FieldCount">
            <summary>
            Returns the number of columns in the current resultset
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.VisibleFieldCount">
            <summary>
            Returns the number of visible fielsd in the current resultset
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.HasRows">
            <summary>
            Returns True if the resultset has rows that can be fetched
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.IsClosed">
            <summary>
            Returns True if the data reader is closed
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.RecordsAffected">
            <summary>
            Retrieve the count of records affected by an update/insert command.  Only valid once the data reader is closed!
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.Item(System.String)">
            <summary>
            Indexer to retrieve data from a column given its name
            </summary>
            <param name="name">The name of the column to retrieve data for</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteDataReader.Item(System.Int32)">
            <summary>
            Indexer to retrieve data from a column given its i
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteException">
            <summary>
            SQLite exception class.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteException.#ctor(System.Int32,System.String)">
            <summary>
            Public constructor for generating a SQLite error given the base error code
            </summary>
            <param name="errorCode">The SQLite error code to report</param>
            <param name="extendedInformation">Extra text to go along with the error message text</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteException.#ctor(System.String)">
            <summary>
            Various public constructors that just pass along to the base Exception
            </summary>
            <param name="message">Passed verbatim to Exception</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteException.#ctor">
            <summary>
            Various public constructors that just pass along to the base Exception
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Various public constructors that just pass along to the base Exception
            <param name="message">Passed to Exception</param>
            <param name="innerException">Passed to Exception</param>
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteException.GetStockErrorMessage(System.Int32,System.String)">
            <summary>
            Initializes the exception class with the SQLite error code.
            </summary>
            <param name="errorCode">The SQLite error code</param>
            <param name="errorMessage">A detailed error message</param>
            <returns>An error message string</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteException.ErrorCode">
            <summary>
            Retrieves the underlying SQLite error code for this exception
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteErrorCode">
            <summary>
            SQLite error codes
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Ok">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.NoMem">
            <summary>
            malloc() failed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.ReadOnly">
            <summary>
            Attempt to write a read-only database
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.IOErr">
            <summary>
            Some kind of disk I/O error occurred
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.NotFound">
            <summary>
            Table or record not found
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.TooBig">
            <summary>
            Too much data for one row of a table
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.NOLFS">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.NotADatabase">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteErrorCode.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteFactory">
            <summary>
            SQLite implementation of DbProviderFactory.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFactory.Instance">
            <summary>
            Static instance member which returns an instanced SQLiteFactory class.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateCommand">
            <summary>
            Returns a new SQLiteCommand object.
            </summary>
            <returns>A SQLiteCommand object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateCommandBuilder">
            <summary>
            Returns a new SQLiteCommandBuilder object.
            </summary>
            <returns>A SQLiteCommandBuilder object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateConnection">
            <summary>
            Creates a new SQLiteConnection.
            </summary>
            <returns>A SQLiteConnection object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateConnectionStringBuilder">
            <summary>
            Creates a new SQLiteConnectionStringBuilder.
            </summary>
            <returns>A SQLiteConnectionStringBuilder object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateDataAdapter">
            <summary>
            Creates a new SQLiteDataAdapter.
            </summary>
            <returns>A SQLiteDataAdapter object.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFactory.CreateParameter">
            <summary>
            Creates a new SQLiteParameter.
            </summary>
            <returns>A SQLiteParameter object.</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteFunction">
            <summary>
            This abstract class is designed to handle user-defined functions easily.  An instance of the derived class is made for each
            connection to the database.
            </summary>
            <remarks>
            Although there is one instance of a class derived from SQLiteFunction per database connection, the derived class has no access
            to the underlying connection.  This is necessary to deter implementers from thinking it would be a good idea to make database
            calls during processing.
            
            It is important to distinguish between a per-connection instance, and a per-SQL statement context.  One instance of this class
            services all SQL statements being stepped through on that connection, and there can be many.  One should never store per-statement
            information in member variables of user-defined function classes.
            
            For aggregate functions, always create and store your per-statement data in the contextData object on the 1st step.  This data will
            be automatically freed for you (and Dispose() called if the item supports IDisposable) when the statement completes.
            </remarks>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._base">
            <summary>
            The base connection this function is attached to
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._contextDataList">
            <summary>
            Internal array used to keep track of aggregate function context data
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._InvokeFunc">
            <summary>
            Holds a reference to the callback function for user functions
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._StepFunc">
            <summary>
            Holds a reference to the callbakc function for stepping in an aggregate function
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._FinalFunc">
            <summary>
            Holds a reference to the callback function for finalizing an aggregate function
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._CompareFunc">
            <summary>
            Holds a reference to the callback function for collation sequences
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._context">
            <summary>
            Current context of the current callback.  Only valid during a callback
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteFunction._registeredFunctions">
            <summary>
            This static list contains all the user-defined functions declared using the proper attributes.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.#ctor">
            <summary>
            Internal constructor, initializes the function's internal variables.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Invoke(System.Object[])">
            <summary>
            Scalar functions override this method to do their magic.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Step(System.Object[],System.Int32,System.Object@)">
            <summary>
            Aggregate functions override this method to do their magic.
            </summary>
            <remarks>
            Typically you'll be updating whatever you've placed in the contextData field and returning as quickly as possible.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <param name="stepNumber">The 1-based step number.  This is incrememted each time the step method is called.</param>
            <param name="contextData">A placeholder for implementers to store contextual data pertaining to the current context.</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Final(System.Object)">
            <summary>
            Aggregate functions override this method to finish their aggregate processing.
            </summary>
            <remarks>
            If you implemented your aggregate function properly,
            you've been recording and keeping track of your data in the contextData object provided, and now at this stage you should have
            all the information you need in there to figure out what to return.
            NOTE:  It is possible to arrive here without receiving a previous call to Step(), in which case the contextData will
            be null.  This can happen when no rows were returned.  You can either return null, or 0 or some other custom return value
            if that is the case.
            </remarks>
            <param name="contextData">Your own assigned contextData, provided for you so you can return your final results.</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!
            </returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Compare(System.String,System.String)">
            <summary>
            User-defined collation sequences override this method to provide a custom string sorting algorithm.
            </summary>
            <param name="param1">The first string to compare</param>
            <param name="param2">The second strnig to compare</param>
            <returns>1 if param1 is greater than param2, 0 if they are equal, or -1 if param1 is less than param2</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.ConvertParams(System.Int32,System.IntPtr)">
            <summary>
            Converts an IntPtr array of context arguments to an object array containing the resolved parameters the pointers point to.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="nArgs">The number of arguments</param>
            <param name="argsptr">A pointer to the array of arguments</param>
            <returns>An object array of the arguments once they've been converted to .NET values</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.SetReturnValue(System.IntPtr,System.Object)">
            <summary>
            Takes the return value from Invoke() and Final() and figures out how to return it to SQLite's context.
            </summary>
            <param name="context">The context the return value applies to</param>
            <param name="returnValue">The parameter to return to SQLite</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.ScalarCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal scalar callback function, which wraps the raw context pointer and calls the virtual Invoke() method.
            </summary>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.CompareCallback(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal collation sequence function, which wraps up the raw string pointers and executes the Compare() virtual function.
            </summary>
            <param name="ptr">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="ptr1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="ptr2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.StepCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The internal aggregate Step function callback, which wraps the raw context pointer and calls the virtual Step() method.
            </summary>
            <remarks>
            This function takes care of doing the lookups and getting the important information put together to call the Step() function.
            That includes pulling out the user's contextData and updating it after the call is made.  We use a sorted list for this so
            binary searches can be done to find the data.
            </remarks>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.FinalCallback(System.IntPtr)">
            <summary>
            An internal aggregate Final function callback, which wraps the context pointer and calls the virtual Final() method.
            </summary>
            <param name="context">A raw context pointer</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Dispose(System.Boolean)">
            <summary>
            Placeholder for a user-defined disposal routine
            </summary>
            <param name="disposing">True if the object is being disposed explicitly</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.Dispose">
            <summary>
            Disposes of any active contextData variables that were not automatically cleaned up.  Sometimes this can happen if
            someone closes the connection while a DataReader is open.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.#cctor">
            <summary>
            Using reflection, enumerate all assemblies in the current appdomain looking for classes that
            have a SQLiteFunctionAttribute attribute, and registering them accordingly.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.RegisterFunction(System.Type)">
            <summary>
            Manual method of registering a function.  The type must still have the SQLiteFunctionAttributes in order to work
            properly, but this is a workaround for the Compact Framework where enumerating assemblies is not currently supported.
            </summary>
            <param name="typ">The type of the function to register</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunction.BindFunctions(InRule.Common.Data.SQLite.SQLiteBase)">
            <summary>
            Called by SQLiteBase derived classes, this function binds all user-defined functions to a connection.
            It is done this way so that all user-defined functions will access the database using the same encoding scheme
            as the connection (UTF-8 or UTF-16).
            </summary>
            <remarks>
            The wrapper functions that interop with SQLite will create a unique cookie value, which internally is a pointer to
            all the wrapped callback functions.  The interop function uses it to map CDecl callbacks to StdCall callbacks.
            </remarks>
            <param name="sqlbase">The base object on which the functions are to bind</param>
            <returns>Returns an array of functions which the connection object should retain until the connection is closed.</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteFunction.SQLiteConvert">
            <summary>
            Returns a reference to the underlying connection's SQLiteConvert class, which can be used to convert
            strings and DateTime's into the current connection's encoding schema.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteFunctionEx">
            <summary>
            Extends SQLiteFunction and allows an inherited class to obtain the collating sequence associated with a function call.
            </summary>
            <remarks>
            User-defined functions can call the GetCollationSequence() method in this class and use it to compare strings and char arrays.
            </remarks>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunctionEx.GetCollationSequence">
            <summary>
            Obtains the collating sequence in effect for the given function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.FunctionType">
            <summary>
            The type of user-defined function to declare
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.FunctionType.Scalar">
            <summary>
            Scalar functions are designed to be called and return a result immediately.  Examples include ABS(), Upper(), Lower(), etc.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.FunctionType.Aggregate">
            <summary>
            Aggregate functions are designed to accumulate data until the end of a call and then return a result gleaned from the accumulated data.
            Examples include SUM(), COUNT(), AVG(), etc.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.FunctionType.Collation">
            <summary>
            Collation sequences are used to sort textual data in a custom manner, and appear in an ORDER BY clause.  Typically text in an ORDER BY is
            sorted using a straight case-insensitive comparison function.  Custom collating sequences can be used to alter the behavior of text sorting
            in a user-defined manner.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteCallback">
            <summary>
            An internal callback delegate declaration.
            </summary>
            <param name="context">Raw context pointer for the user function</param>
            <param name="nArgs">Count of arguments to the function</param>
            <param name="argsptr">A pointer to the array of argument pointers</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteFinalCallback">
            <summary>
            An internal final callback delegate declaration.
            </summary>
            <param name="context">Raw context pointer for the user function</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteCollation">
            <summary>
            Internal callback delegate for implementing collation sequences
            </summary>
            <param name="puser">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="pv1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="pv2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.CollationTypeEnum">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationTypeEnum.Binary">
            <summary>
            The built-in BINARY collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationTypeEnum.NoCase">
            <summary>
            The built-in NOCASE collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationTypeEnum.Reverse">
            <summary>
            The built-in REVERSE collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationTypeEnum.Custom">
            <summary>
            A custom user-defined collating sequence
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.CollationEncodingEnum">
            <summary>
            The encoding type the collation sequence uses
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationEncodingEnum.UTF8">
            <summary>
            The collation sequence is UTF8
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationEncodingEnum.UTF16LE">
            <summary>
            The collation sequence is UTF16 little-endian
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationEncodingEnum.UTF16BE">
            <summary>
            The collation sequence is UTF16 big-endian
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.CollationSequence">
            <summary>
            A struct describing the collating sequence a function is executing in
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationSequence.Name">
            <summary>
            The name of the collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationSequence.Type">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationSequence.Encoding">
            <summary>
            The text encoding of the collation sequence
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.CollationSequence._func">
            <summary>
            Context of the function that requested the collating sequence
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.CollationSequence.Compare(System.String,System.String)">
            <summary>
            Calls the base collating sequence to compare two strings
            </summary>
            <param name="s1">The first string to compare</param>
            <param name="s2">The second string to compare</param>
            <returns>-1 if s1 is less than s2, 0 if s1 is equal to s2, and 1 if s1 is greater than s2</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.CollationSequence.Compare(System.Char[],System.Char[])">
            <summary>
            Calls the base collating sequence to compare two character arrays
            </summary>
            <param name="c1">The first array to compare</param>
            <param name="c2">The second array to compare</param>
            <returns>-1 if c1 is less than c2, 0 if c1 is equal to c2, and 1 if c1 is greater than c2</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteFunctionAttribute">
            <summary>
            A simple custom attribute to enable us to easily find user-defined functions in
            the loaded assemblies and initialize them in SQLite as connections are made.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteFunctionAttribute.#ctor">
            <summary>
            Default constructor, initializes the internal variables for the function.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteFunctionAttribute.Name">
            <summary>
            The function's name as it will be used in SQLite command text.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteFunctionAttribute.Arguments">
            <summary>
            The number of arguments this function expects.  -1 if the number of arguments is variable.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteFunctionAttribute.FuncType">
            <summary>
            The type of function this implementation will be.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteKeyReader">
            <summary>
            This class provides key info for a given SQLite statement.
            <remarks>
            Providing key information for a given statement is non-trivial :(
            </remarks>
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteKeyReader.#ctor(InRule.Common.Data.SQLite.SQLiteConnection,InRule.Common.Data.SQLite.SQLiteDataReader,InRule.Common.Data.SQLite.SQLiteStatement)">
            <summary>
            This function does all the nasty work at determining what keys need to be returned for
            a given statement.
            </summary>
            <param name="cnn"></param>
            <param name="reader"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteKeyReader.Sync">
            <summary>
            Make sure all the subqueries are open and ready and sync'd with the current rowid
            of the table they're supporting
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteKeyReader.Reset">
            <summary>
            Release any readers on any subqueries
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteKeyReader.AppendSchemaTable(System.Data.DataTable)">
            <summary>
            Append all the columns we've added to the original query to the schema
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteKeyReader.Count">
            <summary>
            How many additional columns of keyinfo we're holding
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteKeyReader.KeyInfo">
            <summary>
            Used to support CommandBehavior.KeyInfo
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteKeyReader.KeyQuery">
            <summary>
            A single sub-query for a given table/database.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteParameter">
            <summary>
            SQLite implementation of DbParameter.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._dbType">
            <summary>
            The data type of the parameter
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._rowVersion">
            <summary>
            The version information for mapping the parameter
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._objValue">
            <summary>
            The value of the data in the parameter
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._sourceColumn">
            <summary>
            The source column for the parameter
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._parameterName">
            <summary>
            The column name
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameter._dataSize">
            <summary>
            The data size, unused by SQLite
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String)">
            <summary>
            Constructs a named parameter given the specified parameter name
            </summary>
            <param name="parameterName">The parameter name</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructs a named parameter given the specified parameter name and initial value
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructs a named parameter of the specified type
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String)">
            <summary>
            Constructs a named parameter of the specified type and source column reference
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, source column and row version
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType)">
            <summary>
            Constructs an unnamed parameter of the specified data type
            </summary>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Object)">
            <summary>
            Constructs an unnamed parameter of the specified data type and sets the initial value
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified data type and source column
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified data type, source column and row version
            </summary>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a named parameter of the specified type and size
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs a named parameter of the specified type, size and source column
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="isNullable">Ignored</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="value">The initial value to assign the parameter</param>   
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Constructs a named parameter, yet another flavor
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="sourceColumnNullMapping">Whether or not this parameter is for comparing NULL's</param>
            <param name="value">The intial value to assign the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32)">
            <summary>
            Constructs an unnamed parameter of the specified type and size
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, and source column
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.ResetDbType">
            <summary>
            Resets the DbType of the parameter so it can be inferred from the value
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameter.Clone">
            <summary>
            Clones a parameter
            </summary>
            <returns>A new, unassociated SQLiteParameter</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.IsNullable">
            <summary>
            Whether or not the parameter can contain a null value
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.DbType">
            <summary>
            Returns the datatype of the parameter
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.Direction">
            <summary>
            Supports only input parameters
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.ParameterName">
            <summary>
            Returns the parameter name
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.Size">
            <summary>
            Returns the size of the parameter
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.SourceColumn">
            <summary>
            Gets/sets the source column
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.SourceColumnNullMapping">
            <summary>
            Used by DbCommandBuilder to determine the mapping for nullable fields
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.SourceVersion">
            <summary>
            Gets and sets the row version
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameter.Value">
            <summary>
            Gets and sets the parameter value.  If no datatype was specified, the datatype will assume the type from the value given.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteParameterCollection">
            <summary>
            SQLite implementation of DbParameterCollection.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameterCollection._command">
            <summary>
            The underlying command to which this collection belongs
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameterCollection._parameterList">
            <summary>
            The internal array of parameters in this collection
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteParameterCollection._unboundFlag">
            <summary>
            Determines whether or not all parameters have been bound to their statement(s)
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.#ctor(InRule.Common.Data.SQLite.SQLiteCommand)">
            <summary>
            Initializes the collection
            </summary>
            <param name="cmd">The command to which the collection belongs</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator for the collection
            </summary>
            <returns>An enumerator for the underlying array</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <param name="sourceColumn">The source column</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Add(InRule.Common.Data.SQLite.SQLiteParameter)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameter">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Add(System.Object)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="value">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a named/unnamed parameter and its value to the parameter collection.
            </summary>
            <param name="parameterName">Name of the parameter, or null to indicate an unnamed parameter</param>
            <param name="value">The initial value of the parameter</param>
            <returns>Returns the SQLiteParameter object created during the call.</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.AddRange(InRule.Common.Data.SQLite.SQLiteParameter[])">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Clear">
            <summary>
            Clears the array and resets the collection
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Contains(System.String)">
            <summary>
            Determines if the named parameter exists in the collection
            </summary>
            <param name="parameterName">The name of the parameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Contains(System.Object)">
            <summary>
            Determines if the parameter exists in the collection
            </summary>
            <param name="value">The SQLiteParameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.GetParameter(System.String)">
            <summary>
            Retrieve a parameter by name from the collection
            </summary>
            <param name="parameterName">The name of the parameter to fetch</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.GetParameter(System.Int32)">
            <summary>
            Retrieves a parameter by its index in the collection
            </summary>
            <param name="index">The index of the parameter to retrieve</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of a parameter given its name
            </summary>
            <param name="parameterName">The name of the parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of a parameter
            </summary>
            <param name="value">The parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a parameter into the array at the specified location
            </summary>
            <param name="index">The zero-based index to insert the parameter at</param>
            <param name="value">The parameter to insert</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Remove(System.Object)">
            <summary>
            Removes a parameter from the collection
            </summary>
            <param name="value">The parameter to remove</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes a parameter from the collection given its name
            </summary>
            <param name="parameterName">The name of the parameter to remove</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a parameter from the collection given its index
            </summary>
            <param name="index">The zero-based parameter index to remove</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Re-assign the named parameter to a new parameter object
            </summary>
            <param name="parameterName">The name of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Re-assign a parameter at the specified index
            </summary>
            <param name="index">The zero-based index of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.Unbind">
            <summary>
            Un-binds all parameters from their statements
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteParameterCollection.MapParameters(InRule.Common.Data.SQLite.SQLiteStatement)">
            <summary>
            This function attempts to map all parameters in the collection to all statements in a Command.
            Since named parameters may span multiple statements, this function makes sure all statements are bound
            to the same named parameter.  Unnamed parameters are bound in sequence.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.IsSynchronized">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.SyncRoot">
            <summary>
            Returns null
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.Count">
            <summary>
            Returns a count of parameters in the collection
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.Item(System.String)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="parameterName">Name of the parameter to get/set</param>
            <returns>The specified named SQLite parameter</returns>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteParameterCollection.Item(System.Int32)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="index">The index of the parameter to get/set</param>
            <returns>The specified SQLite parameter</returns>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteStatement">
            <summary>
            Represents a single SQL statement in SQLite.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._sql">
            <summary>
            The underlying SQLite object this statement is bound to
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._sqlStatement">
            <summary>
            The command text of this SQL statement
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._sqlite_stmt">
            <summary>
            The actual statement pointer
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._unnamedParameters">
            <summary>
            An index from which unnamed parameters begin
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._paramNames">
            <summary>
            Names of the parameters as SQLite understands them to be
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._paramValues">
            <summary>
            Parameters for this statement
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteStatement._command">
            <summary>
            Command this statement belongs to (if any)
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteStatement.#ctor(InRule.Common.Data.SQLite.SQLiteBase,InRule.Common.Data.SQLite.SQLiteStatementHandle,System.String,InRule.Common.Data.SQLite.SQLiteStatement)">
            <summary>
            Initializes the statement and attempts to get all information about parameters in the statement
            </summary>
            <param name="sqlbase">The base SQLite object</param>
            <param name="stmt">The statement</param>
            <param name="strCommand">The command text for this statement</param>
            <param name="previous">The previous command in a multi-statement command</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteStatement.MapParameter(System.String,InRule.Common.Data.SQLite.SQLiteParameter)">
            <summary>
            Called by SQLiteParameterCollection, this function determines if the specified parameter name belongs to
            this statement, and if so, keeps a reference to the parameter so it can be bound later.
            </summary>
            <param name="s">The parameter name to map</param>
            <param name="p">The parameter to assign it</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteStatement.Dispose">
            <summary>
            Disposes and finalizes the statement
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteStatement.BindParameters">
            <summary>
             Bind all parameters, making sure the caller didn't miss any
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteStatement.BindParameter(System.Int32,InRule.Common.Data.SQLite.SQLiteParameter)">
            <summary>
            Perform the bind operation for an individual parameter
            </summary>
            <param name="index">The index of the parameter to bind</param>
            <param name="param">The parameter we're binding</param>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SQLiteTransaction">
            <summary>
            SQLite implementation of DbTransaction.
            </summary>
        </member>
        <member name="F:InRule.Common.Data.SQLite.SQLiteTransaction._cnn">
            <summary>
            The connection to which this transaction is bound
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteTransaction.#ctor(InRule.Common.Data.SQLite.SQLiteConnection,System.Boolean)">
            <summary>
            Constructs the transaction object, binding it to the supplied connection
            </summary>
            <param name="connection">The connection to open a transaction on</param>
            <param name="deferredLock">TRUE to defer the writelock, or FALSE to lock immediately</param>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteTransaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteTransaction.Dispose(System.Boolean)">
            <summary>
            Disposes the transaction.  If it is currently active, any changes are rolled back.
            </summary>
        </member>
        <member name="M:InRule.Common.Data.SQLite.SQLiteTransaction.Rollback">
            <summary>
            Rolls back the active transaction.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteTransaction.Connection">
            <summary>
            Returns the underlying connection to which this transaction applies.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteTransaction.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SQLiteTransaction.IsolationLevel">
            <summary>
            Gets the isolation level of the transaction.  SQLite only supports Serializable transactions.
            </summary>
        </member>
        <member name="T:InRule.Common.Data.SQLite.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Common.Data.SQLite.SR.Keywords">
            <summary>
              Looks up a localized string similar to ALL,ALTER,AND,AS,AUTOINCREMENT,BETWEEN,BY,CASE,CHECK,COLLATE,COMMIT,CONSTRAINT,CREATE,CROSS,DEFAULT,DEFERRABLE,DELETE,DISTINCT,DROP,ELSE,ESCAPE,EXCEPT,FOREIGN,FROM,FULL,GROUP,HAVING,IN,INDEX,INNER,INSERT,INTERSECT,INTO,IS,ISNULL,JOIN,LEFT,LIMIT,NATURAL,NOT,NOTNULL,NULL,ON,OR,ORDER,OUTER,PRIMARY,REFERENCES,RIGHT,ROLLBACK,SELECT,SET,TABLE,THEN,TO,TRANSACTION,UNION,UNIQUE,UPDATE,USING,VALUES,WHEN,WHERE.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Function.SupportsDirectExecuteDelegate(InRule.Repository.Infos.IExecutableInfo)">
            <summary>
            Indicates that the function handler has implemented _MakeExecutableElementDirectDelegate and can return a delegate in lieu of an expression
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Function._MakeExecutableElementDirectDelegate(InRule.Repository.Infos.IExecutableInfo,InRule.Runtime.Engine.Compiler.FunctionCompileContext)">
            <summary>
            Should be overridden for any funtion handlers that might return true for SupportDirectExecuteDelegate
            </summary>
            <param name="info"></param>
            <param name="compileContext"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Function.MakeExecutableElementDirectDelegate(InRule.Repository.Infos.IExecutableInfo,InRule.Runtime.Engine.Compiler.FunctionCompileContext)">
            <summary>
            Creates and instruments an execution delegate for this function handler
            </summary>
            <param name="info"></param>
            <param name="compileContext"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.PreResolvedArgumentsFunction">
            <summary>
            Function base for functions that do not require anything fancy for their args, just their resolution
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ContainsFunction">
            <summary>
            Implements the InRule Contains() function.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.EndsWithFunction">
            <summary>
            Implements the InRule EndsWith() function.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.StartsWithFunction">
            <summary>
            Implements the InRule StartsWith() function.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.State.Serialization.Xml.StateContainerXmlSerializer">
            <summary>
            Provides a custom XML serialization and deserialization implementation for StateContainers, driven by
            their associated XsdTypeInfo metadata generated at Info build-time.
            Attempts to adhere closely to the w3.org XML Schema Definition language.
            The .NET framework's XmlSerializer class is not used here, and should not be used anywhere in the Runtime.
            </summary>
        </member>
        <member name="T:InRule.Runtime.InstallerClasses.EventLogSourceInstaller">
            <summary>
            Install / Uninstall Event Log source
            </summary>
        </member>
        <member name="M:InRule.Runtime.EngineExceptionFactory.ParseRuntimeErrorCodeString(System.String)">
            <summary>
            Helper to parse runtime errors codes from string to enum
            If the code is not found in the RuntimeErrorCode enum, return RuntimeErrorCode.UnclassifiedError
            </summary>
        </member>
        <member name="M:InRule.Runtime.EngineExceptionFactory.UtilsUnableToCastValueToNumber_Helper(System.Object,System.Exception)">
            <summary>
            Looks at the source value and determines which message to throw to best describe the error
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntegrationExceptionFactory.PackageAsIntegrationException(System.Exception)">
            <summary>
            Ensures that an exception is a know public exception or wrapped by an integration exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Exceptions.EngineExceptionTemplates">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ActiveRuleSetContainerOrphaned">
            <summary>
              Looks up a localized string similar to Parent of active RuleSet &apos;{0}&apos; orphaned during rule execution..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.BoundArrayCreatedWithZeroLengthNotSupported">
            <summary>
              Looks up a localized string similar to Auto-creation of bound value array type &apos;{0}&apos; for collection &apos;{1}&apos; is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.BoundTypeCannotBeAbstract">
            <summary>
              Looks up a localized string similar to Bound type cannot be abstract..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.BoundTypeCannotBeInterface">
            <summary>
              Looks up a localized string similar to Bound type cannot be an interface..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.BoundTypeCannotBeObject">
            <summary>
              Looks up a localized string similar to Cannot specify System.Object as a bound type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.BoundValueCannotBeNull">
            <summary>
              Looks up a localized string similar to Bound value cannot be null..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignArrayToAField">
            <summary>
              Looks up a localized string similar to Cannot assign an array to field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignGlobalScriptObjectPrototype">
            <summary>
              Looks up a localized string similar to Assignment of the global ScriptObject prototype instance is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignGlobalUtilInstance">
            <summary>
              Looks up a localized string similar to Assignment of the global Util instance is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignObjectToACollection">
            <summary>
              Looks up a localized string similar to Cannot assign an object to collection &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignReturnValueToNonPrimitive">
            <summary>
              Looks up a localized string similar to Can only assign return value to a primitive type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotAssignValueToCollection">
            <summary>
              Looks up a localized string similar to Cannot assign value of type &apos;{0}&apos; to collection &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConfigureWorkflowLoaderService">
            <summary>
              Looks up a localized string similar to Cannot configure a WorkflowLoaderService against WorkflowRuntime..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConfigureWorkflowPersistenceService">
            <summary>
              Looks up a localized string similar to Cannot configure a WorkflowPersistenceService against WorkflowRuntime..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConfigureWorkflowSchedulerService">
            <summary>
              Looks up a localized string similar to Cannot configure a WorkflowSchedulerService against WorkflowRuntime..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConfigureWorkflowTypeProvider">
            <summary>
              Looks up a localized string similar to Cannot configure a TypeProvider against WorkflowRuntime..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConvertNegativeNumberToDate">
            <summary>
              Looks up a localized string similar to Cannot convert negative number to Date..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotConvertNegativeNumberToDateTime">
            <summary>
              Looks up a localized string similar to Cannot convert negative number to DateTime..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotCreateWorkflowType">
            <summary>
              Looks up a localized string similar to Unable to create workflow type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotFindExecutableFunctionForInfo">
            <summary>
              Looks up a localized string similar to Cannot find executable function for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotFindGetIndexerForReferencedObject">
            <summary>
              Looks up a localized string similar to Cannot find get indexer for referenced object..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotFindSetIndexerForReferencedObject">
            <summary>
              Looks up a localized string similar to Cannot find set indexer for referenced object..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotLoadAssemblyReferenceForWorkflow">
            <summary>
              Looks up a localized string similar to Unable to load assembly reference &apos;{0}&apos; for ExecuteWorkflowActionDef &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotLoadProxyTypeForWebService">
            <summary>
              Looks up a localized string similar to Unable to load proxy type for web service &apos;{0}&apos;, endpoint &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotLoadWorkflow">
            <summary>
              Looks up a localized string similar to Unable to load workflow for ExecuteWorkflowActionDef &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotLoadWorkflowType">
            <summary>
              Looks up a localized string similar to Unable to load workflow type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotLoadXomlWorkflow">
            <summary>
              Looks up a localized string similar to Unable to load XOML workflow. {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotMapDataToPrimitiveField">
            <summary>
              Looks up a localized string similar to Cannot map data to primitive field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotResolvePropertyForWorkflowType">
            <summary>
              Looks up a localized string similar to Cannot resolve single public writeable property &apos;{0}&apos; for type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CannotSetValueOfCollection">
            <summary>
              Looks up a localized string similar to Cannot set the value on collection field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CircularExecutionError">
            <summary>
              Looks up a localized string similar to Circular execution error on ‘{0}’.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CollectionMemberIndexIsLessThanOne">
            <summary>
              Looks up a localized string similar to Member index value &apos;{0}&apos; is not valid.  Member indexes must be 1 or greater..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CompileErrorsFoundInUdfLibrary">
            <summary>
              Looks up a localized string similar to Found compile error(s) in UDF library &apos;{0}&apos;: {1}{2}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.CompilerExceptionOccured">
            <summary>
              Looks up a localized string similar to Internal Engine Error =&gt; {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ComplexInstancesAreNotSupportedUDFArguments">
            <summary>
              Looks up a localized string similar to Complex instances are not supported UDF arguments..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.DataElementCouldNotBeResolved">
            <summary>
              Looks up a localized string similar to Data element &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ElementMustBeOfType">
            <summary>
              Looks up a localized string similar to Element &apos;{0}&apos; must be of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.EntityExpressionIsNull">
            <summary>
              Looks up a localized string similar to Cannot access &apos;{1}&apos; because &apos;{0}&apos; does not have a value..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorDuringWorkflowExecution">
            <summary>
              Looks up a localized string similar to An error occurred during execution of workflow &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorDurringDataOperation">
            <summary>
              Looks up a localized string similar to Data error: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorInWorkflowService">
            <summary>
              Looks up a localized string similar to An error occurred in a configured service for workflow &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorTagWithErrorMessage">
            <summary>
              Looks up a localized string similar to [Error: {0}].
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorWhileCreatingWorkflowType">
            <summary>
              Looks up a localized string similar to An exception occurred while creating an instance of the workflow type &apos;{0}&apos; referenced by workflow end point &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ErrorWhileExecutingWorkflowAction">
            <summary>
              Looks up a localized string similar to An error occurred while executing the &apos;{0}&apos; action: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpectingewframeIdOnEngineSessionInstrumentation">
            <summary>
              Looks up a localized string similar to Expecting NewframeId on EngineSession instrumentation..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpectingNewframeIdForAggregateEvaluateFunctionArgumentInstrumentation">
            <summary>
              Looks up a localized string similar to Expecting NewframeId for Aggregate EvaluateFunctionArgument instrumentation..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpressionCannotAssignAValueToThisExpression">
            <summary>
              Looks up a localized string similar to Cannot assign a value to this expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpressionCannotParseValueForBooleanNode">
            <summary>
              Looks up a localized string similar to Cannot parse value for boolean node..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpressionCannotParseValueForDateNode">
            <summary>
              Looks up a localized string similar to Cannot parse value for date node..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ExpressionCannotParseValueForDecimalNode">
            <summary>
              Looks up a localized string similar to Cannot parse value for decimal node..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.FunctionCannotProduceAnAsssignmentTarget">
            <summary>
              Looks up a localized string similar to Function &apos;{0}&apos; cannot produce an assignment target..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.IncorrectElementAccessOnContainer">
            <summary>
              Looks up a localized string similar to Incorrect access of element {0} &apos;{1}&apos; from container &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.IncorrectElementAccessOnContainerShowCorrectContainer">
            <summary>
              Looks up a localized string similar to Incorrect access of element {0} &apos;{1}&apos; from container &apos;{2}&apos;; value exists on container &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.IncorrectElementAccessOnContainerWrongRuleApplication">
            <summary>
              Looks up a localized string similar to Incorrect access of element InfoId &apos;{0}&apos;, which does not exist in the rule application..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.IncorrectNumberOfValueListPassThruArguments">
            <summary>
              Looks up a localized string similar to Incorrect number of passthru arguments provided for value list &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InlineTableQueriesOnlySupportInputArgs">
            <summary>
              Looks up a localized string similar to Queries against inline tables only support input arguments..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.IntegrationExceptionOccured">
            <summary>
              Looks up a localized string similar to Integration Error =&gt; {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidDataTypeForFormatFunction">
            <summary>
              Looks up a localized string similar to DataType &apos;{0}&apos; is not valid for Format function.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidFormatStringForFormatFunction">
            <summary>
              Looks up a localized string similar to Invalid format string argument to Format() function..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidJson">
            <summary>
              Looks up a localized string similar to Invalid JSON: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidNumberOfGroupsSpecifiedInMatchedRegex">
            <summary>
              Looks up a localized string similar to Invalid number of () groups specified in matched regex pattern - 0 or 1 supported: {0}: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidNumberOfGroupsSpecifiedInSpecifiedRegex">
            <summary>
              Looks up a localized string similar to Invalid number of () groups specified in specified regex pattern - 0 or 1 supported: {0}: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.InvalidUseOfBreakContinueStatement">
            <summary>
              Looks up a localized string similar to Incorrect use of break/continue statement outside of valid containing scope..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.JsonPathQueryException">
            <summary>
              Looks up a localized string similar to JSON query &apos;{0}&apos; resulted in an error: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.JsonStringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to JSON string cannot be null or empty..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.LogicalExecutionCycleCountExceeded">
            <summary>
              Looks up a localized string similar to Cycle count exceeded.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.LogicalExecutionTimeoutExceeded">
            <summary>
              Looks up a localized string similar to Execution timeout exceeded..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MathFunctionBaseDivideByZero">
            <summary>
              Looks up a localized string similar to Attempted to divide by zero during math operation..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MathFunctionBaseNumericOverflow">
            <summary>
              Looks up a localized string similar to Numeric overflow occurred during math operation..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MaxScriptFunctionRecursionExceeded">
            <summary>
              Looks up a localized string similar to Maximum ScriptFunction recursion depth exceeded (100 max)..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MembeIsNotACallablePropertyOnBooleanObjects">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable property on Boolean objects..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MemberIsNotAcallableMethod">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.MemberIsNotACallableProperty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable property..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.NoDefaultCtorForBoundType">
            <summary>
              Looks up a localized string similar to Bound type must have a default constructor..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.NoInstanceMethodMatchForConfiguredArgumentTypes">
            <summary>
              Looks up a localized string similar to No instance method &apos;{0}&apos; matches the configured argument types..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.NoMatchingCollectionMemberFound">
            <summary>
              Looks up a localized string similar to No matching member found in collection..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.NoStaticMethodMatchForConfiguredArgumentTypes">
            <summary>
              Looks up a localized string similar to No static method &apos;{0}&apos; matches the configured argument types..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.OnlyPrimitiveTypesSupportedForScalerComparisons">
            <summary>
              Looks up a localized string similar to Only primitive types are supported for greater than / less than comparisons.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.OrdinalBasedMappingNotSupported">
            <summary>
              Looks up a localized string similar to Ordinal-based mapping of non-primitive field &apos;{0}&apos; at index {1} is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.OtherErrorsTotal">
            <summary>
              Looks up a localized string similar to  + {0} others..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ParserParameterAlreadyDeclaredInThisScope">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; already declared in this scope..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ParserStartAndEndLocationsMustBothEitherBeValidOrInvalid">
            <summary>
              Looks up a localized string similar to Start and end locations must both either be valid, or invalid..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ParserStartLocationMustComeBeforeEndLocation">
            <summary>
              Looks up a localized string similar to Start location must come before end location..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ParserVariableAlreadyDeclaredInThisScope">
            <summary>
              Looks up a localized string similar to Variable &apos;{0}&apos; already declared in this scope..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.PropertySettersAreNotSupportedFoInRuleRepository">
            <summary>
              Looks up a localized string similar to Property setters are not supported for InRule.Repository.* types; all such types are read-only during rule execution..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.QueryArgumentCountMismatch">
            <summary>
              Looks up a localized string similar to Query argument counts do not match. Expecting {0} but received {1}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RateFunctionFutureValueCannotBeZero">
            <summary>
              Looks up a localized string similar to The future value argument for the rate function cannot be zero.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RateFunctionNumberOfPeriodsMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The number of periods for the rate function must be greater than zero.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RateFunctionPresentValueAndFutureValueMustBeSameSign">
            <summary>
              Looks up a localized string similar to The present value and future value arguments for the rate function must both be either positive or negative.  Rate cannot be calculated when the signs are mismatched.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RateFunctionPresentValueCannotBeZero">
            <summary>
              Looks up a localized string similar to The present value argument for the rate function cannot be zero.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RootPrototypeVariableNameReserved">
            <summary>
              Looks up a localized string similar to Variable name &apos;__RootPrototype&apos; is reserved and cannot be declared..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.RuleEnginerUnexpectedException">
            <summary>
              Looks up a localized string similar to An unexpected exception was thrown during engine execution..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.SessionStateAlreadyRunning">
            <summary>
              Looks up a localized string similar to Session state is already in use..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.SetConfiguredWorkflowTypePropertyBeforeLoadingInstance">
            <summary>
              Looks up a localized string similar to Set ConfiguredWorkflowType property before loading workflow instance..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.SetIndexersAreNotSupportedForInRuleRepository">
            <summary>
              Looks up a localized string similar to Set indexers are not supported for InRule.Repository.* types; all such types are read-only during rule execution..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.SqlExecuteScalarExpectedZeroOrOneRow">
            <summary>
              Looks up a localized string similar to Expected 0 or 1 rows from scalar SQL query, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.SqlQueryCannotFindColumn">
            <summary>
              Looks up a localized string similar to Unable to find column &apos;{0}&apos; after executing query &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StateIncompatibleStateTypesForAssignment">
            <summary>
              Looks up a localized string similar to Incompatible state types for assignment..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StatementMustDefineACatchBlockOrAFinallyBlockOrBoth">
            <summary>
              Looks up a localized string similar to Must define a catch block, a finally block, or both..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StateSpecifiedIndexBeyondTheRangeOfAvailableObjectPropertiesAndFields">
            <summary>
              Looks up a localized string similar to Specified index beyond the range of available object properties and fields..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StateUnableToBindToPropertyOrField">
            <summary>
              Looks up a localized string similar to Unable to bind to property or field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StateUnexpectedNodeReturnFromXPathQuery">
            <summary>
              Looks up a localized string similar to Unexpected node return from XPath query: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to String cannot be null or empty.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfArgCountMismatch">
            <summary>
              Looks up a localized string similar to Incorrect parameter count for UDF &apos;{0}&apos;: expecting {1}, received {2}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfArgNameConflictsWithGlobal">
            <summary>
              Looks up a localized string similar to UDF &apos;{0}&apos; parameter name &apos;{1}&apos; conflicts with global variable of the same name..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfArgNamesConflictWithKeywords">
            <summary>
              Looks up a localized string similar to The following argument names for UDF &apos;{0}&apos; are irScript keywords and must be changed: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfBodyReturnsValueButNotConfigured">
            <summary>
              Looks up a localized string similar to UDF &apos;{0}&apos; body returns a value but UDF is configured for return type &apos;None&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfCannotResolveName">
            <summary>
              Looks up a localized string similar to Cannot resolve name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfCompilationError">
            <summary>
              Looks up a localized string similar to Compilation error &apos;{0}&apos; in UDF &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfCompilationErrorAtLocation">
            <summary>
              Looks up a localized string similar to Compilation error &apos;{0}&apos; in UDF &apos;{1}&apos; at line {2}, column {3}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfConfiguredToReturnValueButBodyReturnsNone">
            <summary>
              Looks up a localized string similar to UDF &apos;{0}&apos; body does not return a value but UDF is configured to return a value..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfError">
            <summary>
              Looks up a localized string similar to {0} -&gt; During execution of UDF &apos;{1}&apos; in UDF library &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfErrorAtLocation">
            <summary>
              Looks up a localized string similar to {0} -&gt; On line {1}, column {2} during execution of UDF &apos;{3}&apos; in UDF library &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UdfHasOutArgsCannotBeCalledFromUdf">
            <summary>
              Looks up a localized string similar to UDF &apos;{0}&apos; has output arguments, and cannot be called from another UDF..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToCastFromTo">
            <summary>
              Looks up a localized string similar to Unable to cast from type &apos;{0}&apos; to type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToCompareValue">
            <summary>
              Looks up a localized string similar to Unable to compare value of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToExecuteOperation">
            <summary>
              Looks up a localized string similar to Unable to execute operation: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToInvokeMethod">
            <summary>
              Looks up a localized string similar to Unable to invoke method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToInvokePropertyGetter">
            <summary>
              Looks up a localized string similar to Unable to resolve property getter: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToInvokePropertySetter">
            <summary>
              Looks up a localized string similar to Unable to resolve property setter: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToInvokeSetIndexer">
            <summary>
              Looks up a localized string similar to Unable to invoke set indexer..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToLoadTargetType">
            <summary>
              Looks up a localized string similar to Unable to load target type: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToMapResultsByIndex">
            <summary>
              Looks up a localized string similar to Unable to map results by index; received {0} result values but expected {1} or less..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToMatchUpRulesetArgumentWithIncomingParameter">
            <summary>
              Looks up a localized string similar to Unable to match up ruleset argument &apos;{0}&apos; with incoming parameter..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToResolveFieldOnBoundType">
            <summary>
              Looks up a localized string similar to Unable to resolve field {0} on bound type {1}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToResolveGetIndexer">
            <summary>
              Looks up a localized string similar to Unable to resolve get indexer..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToResolveWebServiceOperation">
            <summary>
              Looks up a localized string similar to Unable to resolve web service operation &apos;{0}&apos; for endpoint &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnableToSerializeNullValue">
            <summary>
              Looks up a localized string similar to Unable to serialize null value..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnexpectedExecutionException">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UnknownDataType">
            <summary>
              Looks up a localized string similar to Unknown data type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilInvalidCastFromXToY">
            <summary>
              Looks up a localized string similar to Invalid cast from &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsArgumentMustBeADate">
            <summary>
              Looks up a localized string similar to Argument must be a date.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsCannotAddMoreParametersToThisMethodCallExpression">
            <summary>
              Looks up a localized string similar to Cannot add more parameters to this method call expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsCannotResolveStaticMethodOnType">
            <summary>
              Looks up a localized string similar to Cannot resolve static method &apos;{0}&apos; on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsCannotValidateCastingFromTypeofObject">
            <summary>
              Looks up a localized string similar to Cannot validate casting from typeof( object )..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsLookupFailedWithNoDefaultValue">
            <summary>
              Looks up a localized string similar to The specified attribute &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastDecimalValueToInteger">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; cannot be converted to an integer, as it falls outside the acceptible range of {1} to {2}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastNANFloatToNumber">
            <summary>
              Looks up a localized string similar to Value is an indeterminate floating point result and cannot be converted to a number..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastStringValueToBoolean">
            <summary>
              Looks up a localized string similar to The string value must contain a number, &apos;true&apos;, or &apos;false&apos; (case insensitive). The value &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastStringValueToInteger">
            <summary>
              Looks up a localized string similar to Unable to convert &apos;{0}&apos; to an integer..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastStringValueToNumber">
            <summary>
              Looks up a localized string similar to Unable to convert &apos;{0}&apos; to a number.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastValueToDate">
            <summary>
              Looks up a localized string similar to Unable to cast value to Date: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastValueToDateTime">
            <summary>
              Looks up a localized string similar to Unable to cast value to DateTime: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastValueToInteger">
            <summary>
              Looks up a localized string similar to Unable to convert {0} to an integer.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilsUnableToCastValueToNumber">
            <summary>
              Looks up a localized string similar to Unable to cast value to number: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.UtilVariableNameReserved">
            <summary>
              Looks up a localized string similar to Variable name &apos;Util&apos; is reserved and cannot be declared..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValueCannotAddPropertyGetter">
            <summary>
              Looks up a localized string similar to Cannot add property; getter &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValueDateOperationRequiresADateRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Date operation &apos;{0}&apos; requires a Date right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValueMemberIsNotACallablePropertyOnDateObjects">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable property on Date objects..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValueMemberNotFoundOnScriptObject">
            <summary>
              Looks up a localized string similar to Member {0} not found on ScriptObject..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentsForEnumOperationMustBeOfTheSameType">
            <summary>
              Looks up a localized string similar to Arguments for enum {0} operation must be of the same type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentToFilterMethodMustBeX">
            <summary>
              Looks up a localized string similar to Argument to Filter method must be either a script function taking one or two parameters and returning a bool, a CLR delegate of type Func&lt;object, bool&gt;, or a CLR delegate of type Func&lt;int, object, bool&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentToForEachMethodMustBeX">
            <summary>
              Looks up a localized string similar to Argument to ForEach method must be either a script function taking one or two parameters and returning no value, a CLR delegate of type Action&lt;object&gt;, or a CLR delegate of type Action&lt;int, object&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentToTransformMethodMustBeX">
            <summary>
              Looks up a localized string similar to Argument to Transform method must be either a script function taking one or two parameters and returning a value, a CLR delegate of type Func&lt;object, object&gt;, or a CLR delegate of type Func&lt;int, object, object&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentToTrueForAllMustBeX">
            <summary>
              Looks up a localized string similar to Argument to TrueForAll method must be either a script function taking one or two parameters and returning a bool, a CLR delegate of type Func&lt;object, bool&gt;, or a CLR delegate of type Func&lt;int, object, bool&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesArgumentToTrueForAnyMethodMustBeX">
            <summary>
              Looks up a localized string similar to Argument to TrueForAny method must be either a script function taking one or two parameters and returning a bool, a CLR delegate of type Func&lt;object, bool&gt;, or a CLR delegate of type Func&lt;int, object, bool&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesBooleanOperationRequiresABooleanRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Boolean operation &apos;{0}&apos; requires a boolean right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesCannotAddGetterOrSetter">
            <summary>
              Looks up a localized string similar to Cannot add getter/setter; &apos;{0}&apos; property already exists..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesCannotLoadType">
            <summary>
              Looks up a localized string similar to Cannot load type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesCannotSetClassProperty">
            <summary>
              Looks up a localized string similar to Cannot set Class property..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesCannotSetPrototypeProperty">
            <summary>
              Looks up a localized string similar to Cannot set Prototype property..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to Collection is empty..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesDecimalBinaryOperationRequiresANumericRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Decimal binary operation requires a numeric right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesEnumIsNotAnEnumeratedType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not an enumerated type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesFirstArgumentToOrderByMethodMustBeX">
            <summary>
              Looks up a localized string similar to First argument to OrderBy method must be either a script function taking one parameter and returning a value, or a CLR delegate of type Func&lt;object, object&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesFirstArgumentToTheIntersectMethodMustBeX">
            <summary>
              Looks up a localized string similar to The first argument to the Intersect method must be a ScriptCollection or CLR IEnumerable object..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesGetRangeMethodTakesTwoIntegerArguments">
            <summary>
              Looks up a localized string similar to The GetRange method takes two Integer arguments..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArguments">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for OrderBy method: expected 1 or 2, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForFilterMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for Filter method: expected 1, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForForEachMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for ForEach method: expected 1, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForGetRange">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for GetRange method: expected 2, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForInterset">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for Interset method: expected 1 or 2, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForReverseMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for Reverse method: expected 0, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForTransformMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for Transform method: expected 1, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForTrueForAll">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for TrueForAll method: expected 1, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForTrueForAny">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for TrueForAny method: expected 1, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsForUnionMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for Union method: expected 1 or 2, received {0}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberofArgumentsPassedToFilterMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments passed for Filter method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsPassedToForEachMethod">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments passed for ForEach method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsPassedToTrueForAll">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments passed for TrueForAll method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsPassedToTrueForAny">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments passed for TrueForAny method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsPassToTransform">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments passed for Transform method..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIncorrectNumberOfArgumentsSuppliedForScriptFunction">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments supplied for script function: expected {0}, received {1}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesIntegerBinaryOperationRequiresANumericRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Integer binary operation requires a numeric right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotACallableMethodOnEnumInstances">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable method on enum instances..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotAGettablePropertyOnEnumInstances">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a gettable property on enum instances..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotASettablePropertyonDecimalObjects">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a settable property on Decimal objects..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotASettablePropertyOnEnumInstances">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a settable property on enum instances..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotASettablePropertyOnIntegerObjects">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a settable property on Integer objects..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberIsNotASettablePropertyOnTextObjects">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a settable property on Text objects..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMemberMethodNotFoundOnScriptObject">
            <summary>
              Looks up a localized string similar to Member method &apos;{0}&apos; not found on ScriptObject.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesMethodNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; method not found..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesOperationIsNotSupportedInThisContext">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; operation is not supported in this context..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesOperationNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; operation not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesRightHandSideArgumentForEnumOperationMustBeX">
            <summary>
              Looks up a localized string similar to Right-hand side argument for enum {0} operation must be an enum or integer type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesScriptObjectIndexerRequiresASingleStringParameter">
            <summary>
              Looks up a localized string similar to ScriptObject indexer requires a single string parameter..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesSecondArgumentToOrderByMethodMustBeX">
            <summary>
              Looks up a localized string similar to Second argument to OrderBy method must be either a script function taking two parameters and returning an integer, or a CLR delegate of type Func&lt;object, object, int&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesSecondArgumentToTheIntersectMethodMustBeX">
            <summary>
              Looks up a localized string similar to The second argument to the Intersect method must be a ScriptFunction taking one parameter and returning an integer, or a delegate of type Func&lt;object, int&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesSecondArgumentToTheUnionMethodMustBeX">
            <summary>
              Looks up a localized string similar to The second argument to the Union method must be a ScriptFunction taking one parameter and returning an integer, or a delegate of type Func&lt;object, int&gt;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesTextAddOperationRequiresATextOrNumericRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Text &apos;Add&apos; operation requires a Text or numeric right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesTextGreaterThanOperationRequiresATextRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Text &apos;GreaterThan&apos; operation requires a Text right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesTextGreaterThanOrEqualOperationRequiresATextRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Text &apos;GreaterThanOrEqual&apos; operation requires a Text right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesTextLessThanOperationRequiresATextRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Text &apos;LessThan&apos; operation requires a Text right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesTextLessThanOrEqualOperationRequiresATextRightHandSideExpression">
            <summary>
              Looks up a localized string similar to Text &apos;LessThanOrEqual&apos; operation requires a Text right-hand-side expression..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesUnableToResolveGetterForMemberOnType">
            <summary>
              Looks up a localized string similar to Unable to resolve getter for member &apos;{0}&apos; on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesUnableToResolveSetterForMemberOnType">
            <summary>
              Looks up a localized string similar to Unable to resolve setter for member &apos;{0}&apos; on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.ValuesUnableToResolveValueForEnumeratedType">
            <summary>
              Looks up a localized string similar to Unable to resolve value &apos;{0}&apos; for enumerated type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.VaulesFirstArgumentToTheUnionMethodMustBeX">
            <summary>
              Looks up a localized string similar to The first argument to the Union method must be a ScriptCollection or CLR IEnumerable object..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WebServiceCommunicationException">
            <summary>
              Looks up a localized string similar to Communication error calling web service {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WebServiceException">
            <summary>
              Looks up a localized string similar to An error occurred calling web service {0}.  Error was &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WebServiceTimeoutException">
            <summary>
              Looks up a localized string similar to Web service {0} exceeded timeout of {1} millisecond(s) after {2} retrie(s)..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowAborted">
            <summary>
              Looks up a localized string similar to Workflow &apos;{0}&apos; was aborted..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowDefinitionReaderIsNull">
            <summary>
              Looks up a localized string similar to workflowDefinitionReader.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowFailedValidation">
            <summary>
              Looks up a localized string similar to Workflow for ExecuteWorkflowActionDef &apos;{0}&apos; failed validation: {1}..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowMaxExecutionTimeValueInvalid">
            <summary>
              Looks up a localized string similar to &apos;maxExecutionTime&apos; should be greater than zero and less than TimeSpan.MaxValue..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowSuspendNotSupported">
            <summary>
              Looks up a localized string similar to Workflow &apos;{0}&apos; was suspended during execution; this behavior is not supported..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowTypeMustBeActivity">
            <summary>
              Looks up a localized string similar to ConfiguredWorkflowType property value must be a subclass of the Activity base class..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.WorkflowTypeMustBeRootActivity">
            <summary>
              Looks up a localized string similar to Input type must be RootActivity. Use ConfiguredWorkflowType property to specify user&apos;s workflow type..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.XmlBindingToXElementOnly">
            <summary>
              Looks up a localized string similar to XmlStateProvider supports binding to XElements only..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.XmlParseException">
            <summary>
              Looks up a localized string similar to An error occurred parsing xml: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.XmlStringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to XML string cannot be null or empty..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.EngineExceptionTemplates.XPathQueryException">
            <summary>
              Looks up a localized string similar to XPath query &apos;{0}&apos; resulted in an error: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:InRule.Runtime.Exceptions.IntegrationExceptionTemplates">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.AppSettingsSectionMissingOrMalformed">
            <summary>
              Looks up a localized string similar to AppSettings Section missing or malformed -&gt; Using new configuration section with defaults.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CannotFindDynamicMethodAssemblyKeyPair">
            <summary>
              Looks up a localized string similar to Cannot find InRule DynamicMethod Assembly key pair &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CannotFindExternalAssemblyEndpoint">
            <summary>
              Looks up a localized string similar to Cannot find external assembly endpoint &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CannotFindExternalAssemblyForType">
            <summary>
              Looks up a localized string similar to Cannot load external Assembly &apos;{0}&apos; for Type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CannotGenerateManifestForInMemoryTrace">
            <summary>
              Looks up a localized string similar to Cannot generate manifest for in-memory trace.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CannotWriteExportPackageForInMemoryTrace">
            <summary>
              Looks up a localized string similar to Cannot write export package for in-memory trace.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.CatalogRefreshSettingsMayNotBeNull">
            <summary>
              Looks up a localized string similar to RefreshSettings may not be set to null -&gt; Consider using CatalogRefreshSettings.Default or CatalogRefreshSettings.None.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ConfigurationReadingError">
            <summary>
              Looks up a localized string similar to Error reading configuration from &apos;{0}&apos; -&gt; Expecting a well-formed ConfigurationSection &apos;&lt;{1}/&gt;&apos;:{2} {3}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ConfigurationSectionMalformed">
            <summary>
              Looks up a localized string similar to Configuration Section &apos;&lt;{0}/&gt;&apos; malformed -&gt; Exceptions are suppressed, therefore using new configuration section with defaults + legacy AppSettings instead: Exception: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ConfigurationSectionMissing">
            <summary>
              Looks up a localized string similar to Configuration Section &apos;&lt;{0}/&gt;&apos; missing -&gt; Using new configuration section with defaults + legacy AppSettings instead.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.DatabaseQueryError">
            <summary>
              Looks up a localized string similar to Unable to execute Databse SQL query &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.EntityNameNotFound">
            <summary>
              Looks up a localized string similar to Specified entity name &apos;{0}&apos; does not exist in the configured rule application.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ExpectingRelativeElementIdentifierButGotRooted">
            <summary>
              Looks up a localized string similar to Expecting a relative element identifier, but was rooted.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ExternalMemberThrewException">
            <summary>
              Looks up a localized string similar to External call to &apos;{0}&apos; in class &apos;{1}&apos; threw exception &apos;{2}&apos; -&gt; External message is &apos;{3}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.IndependentRuleSetNameNotFound">
            <summary>
              Looks up a localized string similar to Specified independent ruleset name does not exist in the configured rule application.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.IntegrationExceptionWrapper">
            <summary>
              Looks up a localized string similar to Integration Exception: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.InvalidIndexInElementIdentifier">
            <summary>
              Looks up a localized string similar to Element identifier contains a member index less than 1.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.NotACallableEndpointMethod">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a callable endpoint method.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.ObjectCollectionMustImplementIList">
            <summary>
              Looks up a localized string similar to Object-bound collection values must implement IList.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.OutArgsNotSupportedForCLRMethodsInUdfs">
            <summary>
              Looks up a localized string similar to Out/ref parameters are not supported for CLR method invocation inside UDFs.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKAcceptableTypesToPassForTheValueArgumentAreX">
            <summary>
              Looks up a localized string similar to Acceptable types to pass for the &apos;value&apos; argument are null, Entity instances, or a bound object for the new member.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKAssignedValueIsNotAnEntity">
            <summary>
              Looks up a localized string similar to Assigned value is not an Entity.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKAsynchronousRefreshNotYetImplemented">
            <summary>
              Looks up a localized string similar to Asynchronous refresh not yet implemented.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotAccessEngineStateDuringRuleExecution">
            <summary>
              Looks up a localized string similar to Cannot access engine state during rule execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotAccessRuleSessionWhileEngineIsExecuting">
            <summary>
              Looks up a localized string similar to Cannot access the RuleSession while the engine is executing.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotAddEntityInstanceToComplexCollection">
            <summary>
              Looks up a localized string similar to Cannot add an Entity instance to a complex collection.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotConfigureMemberNameMappingForACollectionMember">
            <summary>
              Looks up a localized string similar to Cannot configure member name mapping for a collection member.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotCreateEngineObjectOnThreadExecutingRules">
            <summary>
              Looks up a localized string similar to A new {0} cannot be created on a thread currently executing rules.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotDeserializeCatalogRuleApplicationFromEmptyXML">
            <summary>
              Looks up a localized string similar to Cannot deserialize CatalogRuleApplication from empty XML element.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotRemoveAnEntityWhichIsAssignedToAFieldOrCollection">
            <summary>
              Looks up a localized string similar to Cannot remove an Entity which is assigned to a field or collection.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotRemoveEntityFromSessionWhenApplyingRules">
            <summary>
              Looks up a localized string similar to Cannot remove an Entity from the session when applying rules.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotResetWorkingMemoryWhileRulesAreExecuting">
            <summary>
              Looks up a localized string similar to Cannot reset working memory while rules are executing.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotSetTheValueOfARuleElement">
            <summary>
              Looks up a localized string similar to Cannot set the value of a RuleElement.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCannotSetValueOfComplexField">
            <summary>
              Looks up a localized string similar to Cannot set the value of a complex field.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCatalogConnectionFailure">
            <summary>
              Looks up a localized string similar to Unable to connect to catalog &apos;{0}&apos; (ConnectionTimeout = {1}s, Elapsed = {2}s): {3}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCatalogRefreshFailureHasExceededTimeLimit">
            <summary>
              Looks up a localized string similar to Catalog refresh failure has exceeded the limit of {0} seconds.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCatalogUnableToAcquireExclusiveLock">
            <summary>
              Looks up a localized string similar to Unable to acquire exclusive lock on catalog RuleApplication after {0} seconds.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCatalogUnableToReadCachedRuleApp">
            <summary>
              Looks up a localized string similar to Unable to read cached Catalog RuleApplication.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKCatalogUnableToReadLockFile">
            <summary>
              Looks up a localized string similar to Unable to read catalog lock file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKElementNameArgumentCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &apos;elementName&apos; argument cannot be empty.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKElementNoLongerValidInSession">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; {1} element is no longer valid in the session.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKElementPathMustBeginWithX">
            <summary>
              Looks up a localized string similar to Element path must begin with a rooted Entity or Independent RuleSet reference.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKErrorCreatingElementValue">
            <summary>
              Looks up a localized string similar to Error creating element value: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKFileSystemRuleApplicationWasNotFoundAtSpecifiedPath">
            <summary>
              Looks up a localized string similar to The RuleApplication was not found at the specified path:&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKIndexMustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Index must be greater than or equal to 0.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKInvalidElementValueSourceType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported element value type -&gt; Only primitive types and entities are supported as element value types.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKInvalidStepInElementPath">
            <summary>
              Looks up a localized string similar to Invalid step in element path: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKLogResultsAreStillPending">
            <summary>
              Looks up a localized string similar to Log results are still pending.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMaxAsyncRefreshPeriodMustBeGreaterOrEqualThanTheRefreshInterval">
            <summary>
              Looks up a localized string similar to MaxAsyncRefreshPeriod must be greater or equal than the RefreshInterval.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyAPasswordToConnectToTheCatalogIfNotUsingSSO">
            <summary>
              Looks up a localized string similar to Must specify a password to connect to the Catalog if not using Single Sign-On authentication.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyCredentialsToConnectToTheCatalog">
            <summary>
              Looks up a localized string similar to Must specify Credentials to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyRefreshSettingsToConnectToTheCatalog">
            <summary>
              Looks up a localized string similar to Must specify RefreshSettings to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyRuleApplicationDescriptorByNameOrID">
            <summary>
              Looks up a localized string similar to Must specify RuleApplicationDescriptor by Name or Id to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyRuleApplicationVersionByX">
            <summary>
              Looks up a localized string similar to Must specify RuleApplicationVersion by Revision, Label, or LatestRevision to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKMustSpecifyValidCatalogURIToConnectToTheCatalog">
            <summary>
              Looks up a localized string similar to Must specify valid Catalog URI to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKNewEntitiesCannotBeInitializedInlineDuringRuleExecution">
            <summary>
              Looks up a localized string similar to New entities cannot be initialized inline during rule execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKNoExecutionResultExistsForExecutionID">
            <summary>
              Looks up a localized string similar to No execution result exists for this execution id.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKPrimitiveFieldsHaveNoChildCollections">
            <summary>
              Looks up a localized string similar to Primitive fields have no child collections.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKPrimitiveFieldsHaveNoChildElements">
            <summary>
              Looks up a localized string similar to Primitive fields have no child elements.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKPrimitiveFieldsHaveNoChildFields">
            <summary>
              Looks up a localized string similar to Primitive fields have no child fields.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKPrimitiveFieldsHaveNoRuleSets">
            <summary>
              Looks up a localized string similar to Primitive fields have no rulesets.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRankMustBeGreaterOrequalToZero">
            <summary>
              Looks up a localized string similar to Rank must be greater or equal to zero.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRefreshFailureLimitMustBeGreaterThanTheRefreshInterval">
            <summary>
              Looks up a localized string similar to RefreshFailureLimit must be greater than the RefreshInterval. Use CatalogRuleApplicationReference.SetRefresh(TimeSpan, TimeSpan) overload to increase the failure limit.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRefreshSettingsMustBeSetToCheckIfCatalogRuleApplicationIsValid">
            <summary>
              Looks up a localized string similar to RefreshSettings must be set to check whether the CatalogRuleApplication is valid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleApplicationIDIsInvalid">
            <summary>
              Looks up a localized string similar to RuleApplication Id &apos;{0}&apos; invalid -&gt; Must specify a valid GUID to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleApplicationNameIsInvalid">
            <summary>
              Looks up a localized string similar to RuleApplication Name invalid -&gt; Must specify a valid name to connect to the Catalog.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleExecutionCountCanOnlyBeAccessedWhenStoringRuleValues">
            <summary>
              Looks up a localized string similar to Execution counts are not available.  Execution counts for rules are only available when rule value logging has been turned on.  To enable rule value access, add the EngineLogOptions.RuleValues flag to RuleSession.Settings.LogOptions.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionBoundStateCachingModesRequireIncomingBoundValue">
            <summary>
              Looks up a localized string similar to BoundStateCachingMode.UpFrontCache or .UpFrontCacheWithWriteback require an incoming bound value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionElementHasNoValue">
            <summary>
              Looks up a localized string similar to Element &apos;{0}&apos; has no value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionElementValueCannotBeSet">
            <summary>
              Looks up a localized string similar to Element value &apos;{0}&apos; cannot be set.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionRulesetParameterCountMismatch">
            <summary>
              Looks up a localized string similar to Ruleset parameter count mismatch: got {0}, expected {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionRuleSetXArgumentsNotSupported">
            <summary>
              Looks up a localized string similar to {0} ruleSet arguments are not supported.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSessionSpecifiedStateSettingsIncompatibleWithCurrentApplication">
            <summary>
              Looks up a localized string similar to Specified state settings are incompatible with current rule application.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleSetNotFound">
            <summary>
              Looks up a localized string similar to RuleSet &apos;{0}&apos; not found.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKRuleValuesCanOnlyBeAccessedWhenStoringRuleValues">
            <summary>
              Looks up a localized string similar to Rule values are not available.  Rule values are only available when rule value logging has been turned on.  To enable rule value access, add the EngineLogOptions.RuleValues flag to RuleSession.Settings.LogOptions.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKStateScraperValuesAlreadyCopiedToContainer">
            <summary>
              Looks up a localized string similar to State values have already been copied to this container.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKStateScraperValuesAlreadyExtractedFromContainer">
            <summary>
              Looks up a localized string similar to State values have already been extracted from this container.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKStringIndexerNotSupportedForThisCollection">
            <summary>
              Looks up a localized string similar to String indexer is not supported for this collection.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToCastToBoundValue">
            <summary>
              Looks up a localized string similar to Unable to cast to a bound value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToCastToDiscreteValue">
            <summary>
              Looks up a localized string similar to Unable to cast to a discrete value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToCastToEntity">
            <summary>
              Looks up a localized string similar to Unable to cast to an Entity.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SdkUnableToCreateEntity">
            <summary>
              Looks up a localized string similar to Unable to create Entity &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToCreateIndependentRuleSet">
            <summary>
              Looks up a localized string similar to Unable to create Independent RuleSet &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindCategory">
            <summary>
              Looks up a localized string similar to Unable to find category &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindComplexCollection">
            <summary>
              Looks up a localized string similar to Unable to find complex collection: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindComplexField">
            <summary>
              Looks up a localized string similar to Unable to find complex field: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindElement">
            <summary>
              Looks up a localized string similar to Unable to find element &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindElementAtIndexInCollection">
            <summary>
              Looks up a localized string similar to Unable to find element at index {0} in the collection.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindEntityCollection">
            <summary>
              Looks up a localized string similar to Unable to find Entity collection: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindEntityField">
            <summary>
              Looks up a localized string similar to Unable to find Entity field: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToFindPrimitiveField">
            <summary>
              Looks up a localized string similar to Unable to find primitive field: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToGetValue">
            <summary>
              Looks up a localized string similar to Unable to get element value &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToParseElementIdentifier">
            <summary>
              Looks up a localized string similar to Unable to parse element id &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToRemoveEntity">
            <summary>
              Looks up a localized string similar to Unable to remove Entity &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToRemoveIndependentRuleSet">
            <summary>
              Looks up a localized string similar to Unable to remove Independent RuleSet &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToResolveEntity">
            <summary>
              Looks up a localized string similar to Unable to resolve Entity &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToResolveIndependentRuleSet">
            <summary>
              Looks up a localized string similar to Unable to resolve Independent RuleSet &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToResolvePath">
            <summary>
              Looks up a localized string similar to Unable to resolve path.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnableToSetValue">
            <summary>
              Looks up a localized string similar to Unable to set element value &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnexpectedCharacter">
            <summary>
              Looks up a localized string similar to Unexpected character &apos;{0}&apos; at position {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKUnexpectedPrimitiveDataType">
            <summary>
              Looks up a localized string similar to Unexpected primitive data type: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.SDKValueIsNoACacheRetentionObject">
            <summary>
              Looks up a localized string similar to Value is not a CacheRetention object.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateCannotConsumeValueFromAnotherSession">
            <summary>
              Looks up a localized string similar to Cannot consume value rooted in another session state..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateCannotReadXMLWithUnhandledSerializer">
            <summary>
              Looks up a localized string similar to Cannot read XML with unhandled serializer &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateCannotWriteXMLWithUnhandledSerializer">
            <summary>
              Looks up a localized string similar to Cannot write XML with unhandled serializer &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateDatabaseUnableToInstantiateCustomADONETConnectionOfType">
            <summary>
              Looks up a localized string similar to Unable to instantiate custom ADO.NET connection of type {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateMailServerAddressHasOneOrMoreCommas">
            <summary>
              Looks up a localized string similar to From address has one or more commas: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateNoDelegateMapping">
            <summary>
              Looks up a localized string similar to No delegate function mapped for {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateSoapProxyOnlyHTTPBindingsAreSupportedForWebServices">
            <summary>
              Looks up a localized string similar to Only HTTP bindings are supported for web services.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateSoapProxyUnsupportedWCFBindingTypeForUseWithX509">
            <summary>
              Looks up a localized string similar to Unsupported WCF binding type for use with x509 certificate security: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToAssignDuplicateInstanceId">
            <summary>
              Looks up a localized string similar to Unable to assign duplicate InstanceId &apos;{0}&apos; on Entity &apos;{1}&apos;. Entity &apos;{2}&apos; already has this value..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToBindToMember">
            <summary>
              Looks up a localized string similar to Unable to bind to member &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToLoadBoundAssemblySpecifiedForEntity">
            <summary>
              Looks up a localized string similar to Could not load assembly &apos;{0}&apos; from &apos;{1}&apos; /bin-search-path /GAC [{2}].
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToLoadBoundObject">
            <summary>
              Looks up a localized string similar to Unable to load bound object into Entity: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToLoadBoundTypeSpecifiedForEntity">
            <summary>
              Looks up a localized string similar to Unable to load bound type &apos;{0}&apos; from &apos;{1}&apos; / bin-search-path /GAC specified for entity {2}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToLoadSessionState">
            <summary>
              Looks up a localized string similar to Unable to load RuleSession state: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToReadXml">
            <summary>
              Looks up a localized string similar to Unable to read Entity XML: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToResolveValueOnBoundObject">
            <summary>
              Looks up a localized string similar to Unable to resolve value &apos;{0}&apos; on bound object.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToResolveValueOnContainer">
            <summary>
              Looks up a localized string similar to Unable to resolve value &apos;{0}&apos; on container.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToSaveSessionState">
            <summary>
              Looks up a localized string similar to Unable to save RuleSession state: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToWriteTempXml">
            <summary>
              Looks up a localized string similar to Unable to write temporary state Entity XML: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToWriteXml">
            <summary>
              Looks up a localized string similar to Unable to write Entity XML: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToXMLDeserializeUnhandledFieldOfType">
            <summary>
              Looks up a localized string similar to Unable to XML deserialize unhandled Field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.StateUnableToXMLSerializeUnhandledFieldOfType">
            <summary>
              Looks up a localized string similar to Unable to XML serialize unhandled Field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.UnableToEnumerateAssemblyTypes">
            <summary>
              Looks up a localized string similar to Unabled to enumerate Types in Assembly &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.UnableToLoadDatabaseDriver">
            <summary>
              Looks up a localized string similar to Unable to load Database driver &apos;{0}&apos; from assembly &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.UnableToLoadTypeFromAssembly">
            <summary>
              Looks up a localized string similar to Unable to load Type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.UnableToOpenInvalidRuleTraceFile">
            <summary>
              Looks up a localized string similar to Unable to open invalid rule trace file..
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.IntegrationExceptionTemplates.UnhandledRuleApplicationCachePolicyError">
            <summary>
              Looks up a localized string similar to An unhandled error occurred in RuleApplication cache policy &apos;{0}&apos; while attempting to cache RuleApplication: {1}.
            </summary>
        </member>
        <member name="T:InRule.Runtime.IntegrationException">
            <summary>
            Exception type used to track exceptions thrown from public SDK / integration
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuntimeErrorMessage">
            <summary>
            Internal class which builds the string error message based on the runtime error code
            Resolves code to message from RuntimeErrorMessageTemplates.resx table
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuntimeException">
            <summary>
            <see cref="T:InRule.Runtime.RuntimeException"/> is the primary exception type surfaced by the InRule engine.
             It aggregates 1 or more errors that occur during rule execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuntimeException.Source">
            <summary>
            The name of the application or object that causes the error.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuntimeException.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuntimeException.ErrorMessages">
            <summary>
            All error messages associated with this <see cref="T:InRule.Runtime.RuntimeException"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuntimeException.Log">
            <summary>
            The <see cref="T:InRule.Runtime.RuleExecutionLog"/> associated with this <see cref="T:InRule.Runtime.RuntimeException"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuntimeException.RuntimeExceptionDebug.ErrorsDebugTable">
            <summary>
            Formatted table of build errors
            </summary>
        </member>
        <member name="T:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.AssignmentLeftHandSideIsInvalid">
            <summary>
              Looks up a localized string similar to Left hand side of assignment is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.AssignmentRightHandSideIsInvalid">
            <summary>
              Looks up a localized string similar to Right hand side of assignment is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ErrorOccurredDuringScriptCompilation">
            <summary>
              Looks up a localized string similar to An error occurred during script compilation -&gt; See inner exception for details.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ErrorOccurredDuringScriptExecution">
            <summary>
              Looks up a localized string similar to An error occurred during script execution -&gt; See inner exception for details.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionArgumentSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Argument syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionCannotUseReservedKeywordAsFunctionName">
            <summary>
              Looks up a localized string similar to Cannot use reserved keyword &apos;{0}&apos; as a function name.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionCannotUseReservedKeywordAsIdentifier">
            <summary>
              Looks up a localized string similar to Cannot use reserved keyword &apos;{0}&apos; as an identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionComplexSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Complex expression syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionConditionalBranchesMustEitherBothReturnAValueOrNot">
            <summary>
              Looks up a localized string similar to Conditional branches must either both return a value, or not.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionFalseBranchIsInvalid">
            <summary>
              Looks up a localized string similar to Expression &apos;false&apos; branch is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionFunctionArgumentSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Function argument syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionFunctionBodySyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Function body syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionIdentifierSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Identifier syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionLeftHandSideIsInvalid">
            <summary>
              Looks up a localized string similar to Left hand side of expression is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionOperandIsInvalid">
            <summary>
              Looks up a localized string similar to Expression operand is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionPropertyNameSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Property name syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionRightHandSideIsInvalid">
            <summary>
              Looks up a localized string similar to Right hand side of expression is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionSpecifiedIndexIsInvalid">
            <summary>
              Looks up a localized string similar to Specified index is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionTargetSpecifierSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Target specifier syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ExpressionTrueBranchIsInvalid">
            <summary>
              Looks up a localized string similar to Expression &apos;true&apos; branch is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ParseErrorTagWithErrorMessage">
            <summary>
              Looks up a localized string similar to Parser error: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ParserInputXMLIsNotARecognizableXScriptProgram">
            <summary>
              Looks up a localized string similar to Input XML is not a recognizable XScript program.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ScriptParserExceptionPassthru">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ScriptParserSyntaxErrorFoundNear">
            <summary>
              Looks up a localized string similar to Syntax error found near &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.ScriptRuntimeExceptionPassthru">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBlockSyntaxIsInvalid">
            <summary>
              Looks up a localized string similar to Block statement syntax is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfCatchBlockIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;catch&apos; block is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfDoStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;do&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfFinallyBlockCannotReturnAValue">
            <summary>
              Looks up a localized string similar to Body of &apos;finally&apos; block cannot return a value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfForLoopisInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;for&apos; loop is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfIfStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;if&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfTryStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;try&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementBodyOfWhileLoopIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;while&apos; loop is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementCaseClausesForSwitchStatementHaveOneOrMoreSyntaxErrors">
            <summary>
              Looks up a localized string similar to Case clauses for &apos;switch&apos; statement have one or more syntax errors.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementConditionForDoStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Condition for &apos;do&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementConditionForIfStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Condition for &apos;if&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementConditionForWhileLoopIsInvalid">
            <summary>
              Looks up a localized string similar to Condition for &apos;while&apos; loop is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementDeclarationStatementHasInvalidSyntax">
            <summary>
              Looks up a localized string similar to &apos;Declaration&apos; statement has invalid syntax.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementSyntaxErrorInForLoopPreamble">
            <summary>
              Looks up a localized string similar to Syntax error in &apos;for&apos; loop preamble.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementTargetExpressionOfSwitchStatementIsInvalid">
            <summary>
              Looks up a localized string similar to Target expression of &apos;switch&apos; statement is invalid.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementThrowStatementHasInvalidSyntax">
            <summary>
              Looks up a localized string similar to &apos;Throw&apos; statement has invalid syntax.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatementTryStatementMustContainAtLeastOneCatchClauseOrFinallyClause">
            <summary>
              Looks up a localized string similar to &apos;Try&apos; statement must contain at least one &apos;catch&apos; clause or &apos;finally&apos; clause.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.ScriptErrorMessageTemplates.StatmentBodyofFinallyBlockIsInvalid">
            <summary>
              Looks up a localized string similar to Body of &apos;finally&apos; block is invalid.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Exceptions.TextOnlyErrorMessageTemplates">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.TextOnlyErrorMessageTemplates.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Exceptions.TextOnlyErrorMessageTemplates.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CompileSettings">
            <summary>
            Represents settings used to configure executable function compilation prior to use by a <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CompileSettings.Default">
            <summary>
            An instance of the default settings using the default <see cref="T:InRule.Runtime.EngineLogOptions"/> setting.
            Normally uses <see cref="F:InRule.Runtime.EngineLogOptions.None"/>, but will use <see cref="F:InRule.Runtime.EngineLogOptions.SummaryStatistics"/> if Info logging is enabled.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CompileSettings.Create(InRule.Runtime.EngineLogOptions)">
            <summary>
            Creates a <see cref="T:InRule.Runtime.CompileSettings"/> instance configured for a specific <see cref="T:InRule.Runtime.EngineLogOptions"/> setting.
            Note: Multiple <see cref="T:InRule.Runtime.EngineLogOptions"/> may be combined, e.g. <see cref="F:InRule.Runtime.EngineLogOptions.Execution"/> | <see cref="F:InRule.Runtime.EngineLogOptions.StateChanges"/>.
            </summary>
            <param name="logOptions">The <see cref="T:InRule.Runtime.EngineLogOptions"/> specific to the function compilation.</param>
            <returns>A new instance of <see cref="T:InRule.Runtime.CompileSettings"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.CompileSettings.Create(InRule.Runtime.EngineLogOptions,System.Int32)">
            <summary>
            Creates a <see cref="T:InRule.Runtime.CompileSettings"/> instance configured for specific <see cref="T:InRule.Runtime.EngineLogOptions"/> and available processor cores.
            Note: Multiple <see cref="T:InRule.Runtime.EngineLogOptions"/> may be combined, e.g. <see cref="F:InRule.Runtime.EngineLogOptions.Execution"/> | <see cref="F:InRule.Runtime.EngineLogOptions.StateChanges"/>.
            </summary>
            <param name="logOptions">The <see cref="T:InRule.Runtime.EngineLogOptions"/> specific to the function compilation.</param>
            <param name="maxCompilationCores">The maximum number of CPU cores/threads available for compiling executable functions (0 = use all available cores). Note that <see cref="P:InRule.Runtime.CompileSettings.LogOptions"/> values other than <see cref="F:InRule.Runtime.EngineLogOptions.None"/> overrides this setting and restricts usage to 1 core. 0 = use all available cores, 1 = single core (default), otherwise specifies max number of cores which can be used.</param>
            <returns>A new instance of <see cref="T:InRule.Runtime.CompileSettings"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.CompileSettings.Create(InRule.Runtime.EngineLogOptions,InRule.Runtime.Engine.Compiler.CompileMode)">
            <summary>
            Internal method for accessing internal compile mode options from tests
            </summary>
            <param name="logOptions"></param>
            <param name="compileMode"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Runtime.CompileSettings.LogOptions">
            <summary>
            Gets the <see cref="T:InRule.Runtime.EngineLogOptions"/> configured for this instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CompileSettings.MaxCompilationCores">
            <summary>
             The maximum number of CPU cores/threads available for compiling executable functions.
             0 = use all available cores, 1 = single core (default), otherwise specifies max number of cores which can be used.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Writers.ITraceWriter">
            <summary>
            Defines a mechanism to write rule execution trace messages.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.CodeProvider">
            <summary>
            The RuleScript code sense provider, which provides facility for managing the compilation
            units and infrustructure for the intellisense support.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.CompilationUnit">
            <summary>
            A unit of work for the intellisense.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.CompilationUnit.GetVariables(Microsoft.Scripting.SourceLocation)">
            <summary>
            Returns variables declared within the scope at specified location.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.CompilationUnit.GetVariablesUnwind(Microsoft.Scripting.SourceLocation)">
            <summary>
            Returns variables declared within the scope at specified location and
            all variables declared within the outer scopes.
            </summary>
            <param name="location">The beginning location.</param>
            <returns>The list of variables.</returns>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Display">
            <summary>
            Defines the display.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Parser.AbstractSyntaxTreeVisitor">
            <summary>
            The base class for visiting and rewriting an AST tree.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.Parser.AbstractSyntaxTreeVisitor.Visit``1(System.Collections.Generic.List{``0},System.Func{``0,``0})">
            <summary>
            Visits all nodes in the collection using a specified element visitor.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="nodes">Input collection.</param>
            <param name="elementVisitor">Delegate that visits a single element.</param>
            <returns>Collection of visited nodes. Original collection is returned if no nodes were modified.</returns>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Parser.IntelliSenseGenerator">
            <summary>
            The IntelliSense generator based on the AST walker.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.#ctor">
            <summary>
            Creates a new top-level scope with a new empty dictionary.  The scope
            is marked as being visible.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.#ctor(System.Collections.Generic.Dictionary{InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object})">
            <summary>
            Creates a new top-level Scope with the provided dictionary
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.#ctor(InRule.Runtime.IntelliSense.Parser.IntelliSenseScope,System.Collections.Generic.Dictionary{InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object})">
            <summary>
            Creates a new Scope with the provided parent and dictionary.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.#ctor(InRule.Runtime.IntelliSense.Parser.IntelliSenseScope)">
            <summary>
            Creates a new Scope with the provided parent and dictionary.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.#ctor(InRule.Runtime.IntelliSense.Parser.IntelliSenseScope,System.Collections.Generic.Dictionary{InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object},System.Boolean)">
            <summary>
            Creates a new Scope with the provided parent, dictionary and visibility.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.TryGetName(InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object@)">
            <summary>
            Trys to lookup the provided name in the current scope.  Search includes
            names that are only visible to the provided LanguageContext.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.TryLookupName(InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object@)">
            <summary>
            Attempts to lookup the provided name in this scope or any outer scope.   Lookup
            includes searching for names that are only visible to the provided LanguageContext.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.LookupName(InRule.Runtime.IntelliSense.Parser.SymbolId)">
            <summary>
            Attempts to lookup the provided name in this scope or any outer scope.  The
            search includes looking for names that are only visible to the provided LanguageContext.
            
            If the name is not defined the language defined MissingName exception is thrown.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.SetName(InRule.Runtime.IntelliSense.Parser.SymbolId,System.Object)">
            <summary>
            Sets the name to the specified value for the current context.
            </summary>
            <exception cref="T:System.MemberAccessException">The name has already been published and marked as ReadOnly</exception>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.Clear">
            <summary>
            Removes all members from the dictionary and any context-sensitive dictionaries.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.ContainsName(InRule.Runtime.IntelliSense.Parser.SymbolId)">
            <summary>
            Determines if this context or any outer scope contains the defined name that
            is available from the provided LanguageContext.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.TryRemoveName(InRule.Runtime.IntelliSense.Parser.SymbolId)">
            <summary>
            Attemps to remove the provided name from this scope removing names visible
            to both the current context and all contexts.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.Parent">
            <summary>
            Gets the parent of this Scope or null if the Scope has no parent.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.IsVisible">
            <summary>
            Gets if the context is visible at this scope.  Visibility is a per-language feature that enables
            languages to include members in the Scope chain but hide them when directly exposed to the user.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.Keys">
            <summary>
            Returns the list of keys which are available to all languages.  Keys marked with the
            DontEnumerate flag will not be returned.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.Items">
            <summary>
            Returns the list of Keys and Items which are available to all languages.  Keys marked
            with the DontEnumerate flag will not be returned.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IntelliSense.Parser.IntelliSenseScope.Dict">
            <summary>
            Default scope dictionary
            </summary>
        </member>
        <member name="M:InRule.Runtime.IntelliSense.Parser.SymbolId.ToString">
            <summary>
            Override of ToString.
            DO NOT USE THIS METHOD TO RETRIEVE STRING THAT THE SYMBOL REPRESENTS
            Use SymbolTable.IdToString(SymbolId) instead.
            </summary>
        </member>
        <member name="F:InRule.Runtime.IntelliSense.Parser.SymbolId.Empty">
            <summary>SymbolId for null string</summary>
        </member>
        <member name="F:InRule.Runtime.IntelliSense.Parser.SymbolId.Invalid">
            <summary>SymbolId to represent invalid value</summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Reflection.ClassInfoMapper">
            <summary>
            The mapper for class info. Uses the intellisense type resolver to resolve bound class types.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.Reflection.IntelliSenseReflector.ReflectInteropType">
            <summary>
            Returns specialized Interop object. One instance is shared for all requestors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.Reflection.IntelliSenseReflector.GetSurrogates(System.Type)">
            <summary>
            Returns surrogates defined for the <paramref name="type"/>. The list of possible surrogates defined inside IntelliSenseReflector class.
            </summary>
            <param name="type">The type the surrogates are requested for.</param>
            <returns>The list of surrogates, or empty, if no surrogates were found.</returns>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Reflection.TypeSurrogateAttribute">
            <summary>
            Allows to sustitute the type information with another type information. Calls to return members of the type will be redirected
            to the surrogate type and its members will be returned instead.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.IntelliSense.Reflection.TypeSurrogateAttribute.#ctor(System.Type)">
            <summary>
            Constructor with the surrogate type.
            </summary>
            <param name="surrogateFor">The type this surrogate is for.</param>
        </member>
        <member name="T:InRule.Runtime.Scripting.IntelliSense.Utilities.FunctionHelper">
            <summary>
            The helper methods for script functions.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.Reflection.MemberInfoCache`1">
            <summary>
            The member info cache used by RSObjectInfo to cache access to properties, methods, fields based on the binding flags and filter.
            </summary>
            <typeparam name="T">The type of the cached element.</typeparam>
        </member>
        <member name="M:InRule.Runtime.Scripting.Reflection.RSObjectInfo.GetMethods">
            <summary>
            Returns instance public methods, and static ones if the type is static.
            </summary>
            <returns>The array of RSMethodInfo, or empty-array if nothing was found.</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.Reflection.RSObjectInfo.GetMethods(System.Reflection.BindingFlags)">
            <summary>
            Returns methods according to the specified binding flags. The default member filter is applied.
            </summary>
            <param name="bindingFlags">The binding flags, see <see cref="T:System.Reflection.BindingFlags"/> for the list of valid flags.</param>
            <returns>The array of RSMethodInfo, or empty-array if nothing was found.</returns>
        </member>
        <member name="P:InRule.Runtime.Scripting.Reflection.RSPropertyInfo.IsType">
            <summary>
            Returns whether the property refers to the type instead of instance.
            </summary>
            <remarks>
            For example, for Util.DateTime, the DateTime looks like as a property, but it actually a type and IsType is true for that.
            For Util.DateTime.Now, the Now is property and IsType is false for that.
            </remarks>
        </member>
        <member name="T:InRule.Runtime.RuleApplicationStatistics">
            <summary>
            Represents compile statistics collected for a <see cref="T:InRule.Runtime.RuleApplicationReference"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationStatistics.GetFunctionCompileTime(InRule.Runtime.CompileSettings)">
            <summary>
            Gets the explicit function compilation time. This is recorded when the Compile method passes true for its compileFunctions argument.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationStatistics.MetadataCompileTime">
            <summary>
            Gets the Rule Application metadata compilation time.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CatalogRuleApplicationStatistics">
            <summary>
            Represents cumulative statistics collected for Catalog operations during the first use of a <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> by a <see cref="T:InRule.Runtime.RuleSession"/>.
            This will record timing measurements the first time the Rule Application is retrieved from the Catalog Service.
            If the Rule Application is cached, but the its refresh interval has been exceeded, the Catalog will be polled to check for the
            latest version of the Rule Application when a new <see cref="T:InRule.Runtime.RuleSession"/> is created.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationStatistics.GetXml">
            <summary>
            Gets all Catalog statistics in XML format.
            </summary>
            <returns>A string containing statistics XML.</returns>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationStatistics.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes all Catalog statistics in XML format.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write the report to.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationStatistics.GetRunningTotalAllReport">
            <summary>
            Generates a report showing the running total of all cumulative Catalog statistics and the number of samples taken for each.
            </summary>
            <returns>A string containing the report.</returns>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationStatistics.CatalogTotalClientCallTime">
            <summary>
            Gets the total time spent in the Catalog client API.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationStatistics.CatalogTotalServerCallTime">
            <summary>
            Gets the total time spent requesting information from the Catalog Service.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationStatistics.CatalogRuleApplicationVersionCheckTime">
            <summary>
            Gets the time spent requesting Rule Application version information from the Catalog Service.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationStatistics.CatalogRuleApplicationDownloadTime">
            <summary>
            Gets the time spent downloading a Rule Application from the Catalog Service.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationStatistics.RunningTotalAllTime">
            <summary>
            Gets the total time spent by both the Catalog client API and Catalog Service.
            </summary>
        </member>
        <member name="T:InRule.Runtime.TextFeedbackLogMessage">
            <summary>
            Provides text feedback generated during engine execution.
            </summary>
        </member>
        <member name="T:InRule.Runtime.LogMessage">
            <summary>
            Provides details of an event that occurs during engine execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.LogMessage.Description">
            <summary>
            A descriptive message for this event.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSessionStatistics">
            <summary>
            Represents cumulative statistics collected for the lifetime of a <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSessionStatistics.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes all cumulative statistics in XML format.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write the report to.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSessionStatistics.GetXml">
            <summary>
            Gets all cumulative statistics in XML format.
            </summary>
            <returns>A string containing statistics XML.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSessionStatistics.GetRunningTotalAllReport">
            <summary>
            Generates a report showing the running total of all cumulative statistics and the number of samples taken for each.
            </summary>
            <returns>A string containing the report.</returns>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.SessionId">
            <summary>
            Gets the <see cref="T:InRule.Runtime.RuleSession"/> identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.RuleApplicationName">
            <summary>
            Gets the Rule Application name.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.RuleApplicationRevision">
            <summary>
            Gets the Rule Application revision. This will always be 1 unless it reprensets a catalog Rule Application.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.MetadataCompileTime">
            <summary>
            Gets the cumulative Rule Application metadata compilation time.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.FunctionCompileTime">
            <summary>
            Gets the cumulative function compilation time. This usually occurs during the first rule execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.CreateEntityTime">
            <summary>
            Gets the cumulative CreateEntity time, including setting default values, cascade propagation and object-bound caching. It does not include metadata compilation time.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.RuleExecutionTime">
            <summary>
            Gets the cumulative rule execution times, including any function compilation times that occurred during execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.BoundStateRefreshTime">
            <summary>
            Gets the cumulative time spent for any object-bound state refesh to synchronize external changes.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ExternalDataQueryCallTime">
            <summary>
            Gets the cumulative time spent executing SQL or XPath queries against external databases or files.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ExternalMethodCallTime">
            <summary>
            Gets the cumulative time spent calling external methods.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ExternalSmtpCallTime">
            <summary>
            Gets the cumulative time spent sending mail to SMTP servers.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ExternalWebServiceCallTime">
            <summary>
            Gets the cumulative time spent making Web Service calls.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ExternalWorkflowCallTime">
            <summary>
            Gets the cumulative time spent executing Workflows.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.GetEntityXmlTime">
            <summary>
            Gets the cumulative time spent writing <see cref="T:InRule.Runtime.Entity"/> XML.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.LoadEntityXmlTime">
            <summary>
            Gets the cumulative time spent reading <see cref="T:InRule.Runtime.Entity"/> XML.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.GetEntityJsonTime">
            <summary>
            Gets the cumulative time spent writing <see cref="T:InRule.Runtime.Entity"/> JSON.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.LoadEntityJsonTime">
            <summary>
            Gets the cumulative time spent reading <see cref="T:InRule.Runtime.Entity"/> JSON.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.SaveRuleSessionStateTime">
            <summary>
            Gets the cumulative time spent saving <see cref="T:InRule.Runtime.RuleSession"/> state to a test scenario.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.LoadRuleSessionStateTime">
            <summary>
            Gets the cumulative time spent loading <see cref="T:InRule.Runtime.RuleSession"/> state from a test scenario.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.CatalogStatistics">
            <summary>
            Gets the cumulative time spent performing various Catalog RuleApplication operations. These operations will constitute part of the <see cref="P:InRule.Runtime.RuleSessionStatistics.MetadataCompileTime"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.RunningTotalAllTime">
            <summary>
            Gets the cumulative time spent in irSDK. This includes: <see cref="P:InRule.Runtime.RuleSessionStatistics.MetadataCompileTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.FunctionCompileTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.CreateEntityTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.RuleExecutionTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.GetEntityXmlTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.LoadEntityXmlTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.SaveRuleSessionStateTime"/>, <see cref="P:InRule.Runtime.RuleSessionStatistics.LoadRuleSessionStateTime"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.MaxRuleApplicationCacheDepth">
            <summary>
            Gets the maximum Rule Application depth of the <see cref="P:InRule.Runtime.RuleSession.RuleApplicationCache"/> if the cache is using the <see cref="T:InRule.Runtime.DefaultRuleApplicationCachePolicy"/>, otherwise zero.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.CurrentRuleApplicationCacheDepth">
            <summary>
            Gets the current Rule Application depth of the <see cref="P:InRule.Runtime.RuleSession.RuleApplicationCache"/>, regardless of the cache policy in use.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.CurrentDataQueryCacheDepth">
            <summary>
            Gets the current Data Query cache depth.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.RuleApplicationCacheUptime">
            <summary>
            Gets the uptime of the <see cref="P:InRule.Runtime.RuleSession.RuleApplicationCache"/> since it was last initialized, cleared or configured with a new cache policy.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.InRuleUptime">
            <summary>
            Gets the uptime of InRule within the current <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionStatistics.ProcessUptime">
            <summary>
            Gets the uptime of the <see cref="T:System.Diagnostics.Process"/> hosting InRule.
            </summary>
        </member>
        <member name="T:InRule.Runtime.DefaultRuleApplicationCachePolicy">
            <summary>
            A cache policy providing finite depth, sliding expiration caching whose expiration policy is based on a <see cref="T:InRule.Runtime.CacheRetention"/> weighting and last-used time.
            The last-used time is based on the last time a <see cref="T:InRule.Runtime.RuleSession"/> was created with a specific Rule Application, maintained on <see cref="P:InRule.Runtime.RuleApplicationReference.LastCacheLookup"/>.
            Once the cache depth limit is reached, the Rule Applications with the lowest <see cref="P:InRule.Runtime.CacheRetention.Weight"/> value and oldest last-used time will be flagged for expiration.
            Rule Applications cached with <see cref="F:InRule.Runtime.CacheRetention.AlwaysRetain"/> are not constrained by the cache depth limit and will never be flagged for expiration.
            Rule Applications cached with <see cref="F:InRule.Runtime.CacheRetention.NeverRetain"/> will never enter the cache.
            If the cache depth limit is less than 1, only Rule Applications with <see cref="F:InRule.Runtime.CacheRetention.AlwaysRetain"/> may enter the cache.
            </summary>
        </member>
        <member name="T:InRule.Runtime.IRuleApplicationCachePolicy">
            <summary>
            Defines a cache policy interface which governs which Rule Applications may be cached and when to expire them.
            </summary>
        </member>
        <member name="M:InRule.Runtime.IRuleApplicationCachePolicy.AllowCacheEntry(InRule.Runtime.RuleApplicationReference,System.Collections.Generic.IEnumerable{InRule.Runtime.RuleApplicationReference},System.Collections.Generic.IEnumerable{InRule.Runtime.RuleApplicationReference}@)">
            <summary>
            Determines whether the <see cref="T:InRule.Runtime.RuleApplicationCache"/> should cache this item, and whether there are any existing Rule Applications that should be expired from the cache.
            </summary>
            <param name="candidate">The Rule Application to cache.</param>
            <param name="cachedItems">A collection of existing Rule Applications currently in the cache.</param>
            <param name="itemsToExpire">A collection of existing Rule Application to be expired from the cache. This may be null if there is none.</param>
            <returns>true if the candidate should enter the cache; otherwise false.</returns>
        </member>
        <member name="F:InRule.Runtime.DefaultRuleApplicationCachePolicy.DefaultCacheDepth">
            <summary>
            The default cache depth. This may be overriden in the .config file, or by explicitly configuring a new cache policy via the SDK. 
            </summary>
        </member>
        <member name="M:InRule.Runtime.DefaultRuleApplicationCachePolicy.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.DefaultRuleApplicationCachePolicy"/> using a specified cache depth limit.
            </summary>
            <param name="cacheDepthLimit">The upper bound limit of the cache, after which Rule Applications will be removed from the cache based on their <see cref="T:InRule.Runtime.CacheRetention"/> weighting and last-used time.</param>
        </member>
        <member name="M:InRule.Runtime.DefaultRuleApplicationCachePolicy.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.DefaultRuleApplicationCachePolicy"/> using the <see cref="F:InRule.Runtime.DefaultRuleApplicationCachePolicy.DefaultCacheDepth"/> limit.
            </summary>
        </member>
        <member name="P:InRule.Runtime.DefaultRuleApplicationCachePolicy.CacheDepthLimit">
            <summary>
            Gets the cache depth limit for this policy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSessionEventManager">
            <summary>
            Represents access to rule execution log messages via an event interface.
            Events will not fire in real-time, but will fire after rule execution has completed.
            </summary>
            <remarks>All event handlers will be removed when the associated <see cref="T:InRule.Runtime.RuleSession"/> is disposed.</remarks>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.RuleExecutionComplete">
            <summary>
            Fires when rule execution is complete.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.StateValueChanged">
            <summary>
            Fires when a state value is changed.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.RuleValueChanged">
            <summary>
            Fires when a rule value is changed.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.ValidationChanged">
            <summary>
            Fires when a <see cref="T:InRule.Runtime.Field"/> <see cref="T:InRule.Runtime.Validation"/> is changed.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.NotificationChanged">
            <summary>
            Fires when a <see cref="T:InRule.Runtime.Notification"/> is changed.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.ActivationChanged">
            <summary>
            Fires when a <see cref="T:InRule.Runtime.RuleSet"/> activations status is changed.
            </summary>
        </member>
        <member name="E:InRule.Runtime.RuleSessionEventManager.CollectionChanged">
            <summary>
            Fires when a <see cref="T:InRule.Runtime.Collection"/> is changed.
            </summary>
        </member>
        <member name="T:InRule.Runtime.MessageEventArgs`1">
            <summary>
            Represents an execution log message event argument.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:InRule.Runtime.MessageEventArgs`1.Message">
            <summary>
            Gets the message of the <see cref="T:InRule.Runtime.LogMessage"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleExecutionCompleteEventArgs">
            <summary>
            Represents a rule execution complete event argument.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionCompleteEventArgs.RuleSession">
            <summary>
            Gets the <see cref="P:InRule.Runtime.RuleExecutionCompleteEventArgs.RuleSession"/> associated with the event.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionCompleteEventArgs.Log">
            <summary>
            Gets the last <see cref="T:InRule.Runtime.RuleExecutionLog"/> associated with the event.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionCompleteEventArgs.HasErrors">
            <summary>
            Gets whether the rule execution encountered an error.
            </summary>
        </member>
        <member name="T:InRule.Runtime.SessionStatus">
            <summary>
            Indicates the state of the session - Idle / Dispose / WaitingForResponse
            </summary>
        </member>
        <member name="M:InRule.Runtime.DynamicElement.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            The provided MetaObject will dispatch to the Dynamic virtual methods.
            The object can be encapsulated inside of another MetaObject to 
            provide custom behavior for individual actions.
            </summary> 
        </member>
        <member name="M:InRule.Runtime.DynamicElement.MetaDynamic.BuildCallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],System.Dynamic.DynamicMetaObject)">
            <summary> 
            Helper method for generating a MetaObject which calls a 
            specific method on Dynamic, but uses one of the arguments for
            the result. 
            </summary>
        </member>
        <member name="M:InRule.Runtime.DynamicElement.MetaDynamic.IsOverridden(System.String)">
            <summary>
            Checks if the derived type has overridden the specified method.  If there is no
            implementation for the method provided then Dynamic falls back to the base class
            behavior which lets the call site determine how the binder is performed. 
            </summary>
        </member>
        <member name="M:InRule.Runtime.DynamicElement.MetaDynamic.GetRestrictions">
            <summary> 
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:InRule.Runtime.DynamicElement.MetaDynamic.GetLimitedSelf">
            <summary>
            Returns our Expression converted to DynamicElement
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.Providers.BoundStateValueBehavior.Unbound">
            <summary>
            Field not object-bound.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.Providers.BoundStateValueBehavior.BoundWithNoParentStorage">
            <summary>
            Field type is object-bound, but parent is not.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.Providers.BoundStateValueBehavior.BoundWithParentStorage">
            <summary>
            Field and parent are both object-bound.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.Providers.BoundStateValueBehavior.BoundPrimitiveCollectionMember">
            <summary>
            Object-bound primitive Collection Member.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Configuration.RuleEngineConfigElement.CompiledApplicationCacheDepth">
            <summary>
            Determines the number of unique compiled rule applications that are kept in memory.
            </summary>
            <remarks>
            If this number is exceeded, the oldest compiled rule application is removed from the cache in favor of the newest compiled app. 
            Default is <see cref="F:InRule.Runtime.DefaultRuleApplicationCachePolicy.DefaultCacheDepth"/>.
            </remarks>
        </member>
        <member name="P:InRule.Runtime.Configuration.RuleEngineConfigElement.CompileLockAcquisitionTimeout">
            <summary>
            In case of a deadlock during a Rule Application compile, the amount of time before an exception will be thrown to break the deadlock.
            </summary>
            <remarks>
            Default is 00:30:00 (30 minutes).
            </remarks>
        </member>
        <member name="P:InRule.Runtime.Configuration.RuleEngineConfigElement.CaptureLockOwnerStackTrace">
            <summary>
            If true, the engine capture the stack trace of a thread that has become deadlocked during a Rule Application compile.
            </summary>
            <remarks>
            Default is false.
            </remarks>
        </member>
        <member name="T:InRule.Runtime.Configuration.RuntimeConfigSectionHandler">
            <summary>
            For Internal Use Only
            </summary>	
        </member>
        <member name="P:InRule.Runtime.Configuration.RuntimeConfigSectionHandler.Config">
            <summary>
            Reads the merged application configuration files (Machine.config/App.config/User.config) and returns the &lt;inrule.runtime/&gt;
            configuration section. A new configuration section will be generated with correct default values if this section is not found
            in the configuration file or if the configuration section is malformed.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Configuration.RuntimeConfigSectionHandler.RuleEngine">
            <summary>
            Supports the &lt;RuleEngine/&gt; tag in the &lt;inrule.runtime/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Configuration.RuntimeConfigSectionHandler.CatalogRuleApplication">
            <summary>
            Supports the &lt;CatalogRuleApplication/&gt; tag in the &lt;inrule.runtime/&gt; configuration section.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CommonMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.AgendaItemToString">
            <summary>
              Looks up a localized string similar to ElRef:{0} Ring:{1} IntraOrder:{2}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.GeneratingTraceEvents">
            <summary>
              Looks up a localized string similar to Generating trace events....
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.NoValueSpecified">
            <summary>
              Looks up a localized string similar to &lt;&lt;&lt;no value specified&gt;&gt;&gt;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKBoundValueValueIsPrimitiveNoBoundValue">
            <summary>
              Looks up a localized string similar to &lt;value is primitive - no bound value&gt;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKEntityDefaultValueNotAnEntity">
            <summary>
              Looks up a localized string similar to &lt;value not an Entity&gt;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageActionExecute">
            <summary>
              Looks up a localized string similar to Action: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageCalculationChange">
            <summary>
              Looks up a localized string similar to Calculation: &quot;{0}&quot; set to {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageCollectionCleared">
            <summary>
              Looks up a localized string similar to Cleared Collection: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageCollectionSorted">
            <summary>
              Looks up a localized string similar to Sorted Collection: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageCollectionUserModified">
            <summary>
              Looks up a localized string similar to User Modified Collection: &quot;{0}&quot; Current Count: {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageErrorOnly">
            <summary>
              Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageErrorWithElementId">
            <summary>
              Looks up a localized string similar to Error: &quot;{0}&quot; {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageHaltedEngine">
            <summary>
              Looks up a localized string similar to Halted Engine: &quot;{0}&quot; {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageHaltedRuleset">
            <summary>
              Looks up a localized string similar to Halted Ruleset: &quot;{0}&quot; {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageIdleChangesEnd">
            <summary>
              Looks up a localized string similar to --&gt;  Idle Changes Complete  &lt;--.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageIdleChangesStart">
            <summary>
              Looks up a localized string similar to --&gt;  Idle Changes Begin  &lt;--.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageIsInvalid">
            <summary>
              Looks up a localized string similar to Marked Invalid: &quot;{0}&quot; {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageIsValid">
            <summary>
              Looks up a localized string similar to Marked Valid: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageMemberAddedToCollection">
            <summary>
              Looks up a localized string similar to Added Member: {0} to collection &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageMemberRemovedFromCollection">
            <summary>
              Looks up a localized string similar to Removed Member: {0} from collection &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageNoMessages">
            <summary>
              Looks up a localized string similar to Current log settings produced no messages for executed logic..
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageNotificationFired">
            <summary>
              Looks up a localized string similar to Notification: &quot;{0}&quot; ({1}).
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageNotificationRetracted">
            <summary>
              Looks up a localized string similar to Retracted Notification: &quot;{0}&quot; ({1}).
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleExecute">
            <summary>
              Looks up a localized string similar to Rule: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleExecuteWithRuleValue">
            <summary>
              Looks up a localized string similar to Rule: &quot;{0}&quot; is {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleExecutionBegin">
            <summary>
              Looks up a localized string similar to ---&gt;  Rule Execution Begin  &lt;---.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleExecutionCompleteNoTime">
            <summary>
              Looks up a localized string similar to ---&gt;  Rule Execution Complete  &lt;---.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleExecutionCompleteWithTotalSeconds">
            <summary>
              Looks up a localized string similar to ---&gt;  Rule Execution Complete  &lt;---  ({0} seconds).
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRulesetActivated">
            <summary>
              Looks up a localized string similar to Activated Ruleset: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRulesetDeactivated">
            <summary>
              Looks up a localized string similar to Deactivated Ruleset: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRulesetExecute">
            <summary>
              Looks up a localized string similar to Ruleset: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageRuleValueChange">
            <summary>
              Looks up a localized string similar to Rule Changed: &quot;{0}&quot; is {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageSetXToY">
            <summary>
              Looks up a localized string similar to Set {0} to {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageStateChange">
            <summary>
              Looks up a localized string similar to State Changed: &quot;{0}&quot; set to {1}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKLogMessageStateRefreshed">
            <summary>
              Looks up a localized string similar to State Refreshed: {0}.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKMessageDescriptionLoadedEntity">
            <summary>
              Looks up a localized string similar to Loaded entity &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKMessageDescriptionUnloadedEntity">
            <summary>
              Looks up a localized string similar to Unloaded entity &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Runtime.CommonMessages.SDKPrimitiveValueDefaultValueNotPrimitive">
            <summary>
              Looks up a localized string similar to &lt;value not primitive&gt;.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.SyntaxFunctions.Aggregate.AggregateFunctionBase.CompileMemberExpression(InRule.Repository.Infos.IEvalInfo,InRule.Runtime.Engine.Compiler.FunctionCompileContext,InRule.Common.Instrumentation.InstrumentationPayloadNames,System.Type)">
            <summary>
            Returns the member expression implicitly cast to the resulttype
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.SyntaxFunctions.Aggregate.AggregateFunctionBase.CompileMemberExpression(InRule.Repository.Infos.IEvalInfo,InRule.Runtime.Engine.Compiler.FunctionCompileContext,InRule.Common.Instrumentation.InstrumentationPayloadNames,System.Type,System.Type[])">
            <summary>
            Ensured Result Type Selection:  If inferred result type from the info is in list of supportedTypes, casts to the inferred result type
            Otherwise, casts to the fallbacktype
            In all cases the result type of the expression with be the fallbackType or one of the supportedResultTypes
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.SyntaxFunctions.Aggregate.AggregateFunctionBase.EnsureCastToSupportedType(System.Linq.Expressions.Expression,System.Type[],System.Type)">
            <summary>
            If the expression's type matches one of the possible types as a non-nullable type, uses the existing type, otherwise, ensures an implict cast to the fallback type
            </summary>
            <param name="expr"></param>
            <param name="supportedTypes"></param>
            <param name="fallbackType"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Engine.EngineExecuteTask">
            <summary>
            Class that holds the delegate to execute at runtime in conjunction with the info to use
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.ExecutionTrace">
            <summary>
            Provides a mechanism to load a .ruletrace file.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.ExecutionTrace.Load(System.String)">
            <summary>
            Loads a previously saved rule trace file.
            </summary>
            <param name="ruleTraceFilePath">The path to a previous saved .ruletrace file.</param>
            <returns>An instance of <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/>.</returns>
        </member>
        <member name="T:InRule.Runtime.CacheRetention">
            <summary>
            Defines cache retention weight for <see cref="T:InRule.Runtime.RuleApplicationReference"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CacheRetention.FromWeight(System.Int32)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.CacheRetention"/> instance, given an input weight.
            </summary>
            <param name="weight">The desired cache retention weight. Higher values are more likely to be retained; Lower valies are less likely to be retained and therefore expired from the cache. 1000 is the default weight.</param>
            <returns>The newly created <see cref="T:InRule.Runtime.CacheRetention"/> instance.</returns>
        </member>
        <member name="F:InRule.Runtime.CacheRetention.NeverRetain">
            <summary>
            Ensures a Rule Application will never enter the cache. Its weight is equivalent to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CacheRetention.AlwaysRetain">
            <summary>
            Ensures a Rule Application will never be removed from the cache by the cache policy.
            It may be explicitly removed using the Remove() or Clear() methods on the RuleSession.RuleApplicationCache.
            Its weight is equivalent to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CacheRetention.Default">
            <summary>
            The default cache retention weight used if no CacheRetention argument is used. Default weight = 1000.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CacheRetention.Weight">
            <summary>
            The cache retention weight. Higher values are more likely to be retained; Lower valies are less likely to be retained and therefore expired from the cache. 1000 is the default weight.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleApplicationCache">
            <summary>
            Represents AppDomain-wide storage of compiled rule applications; this cache optimizes repeated execution of the same <see cref="T:InRule.Runtime.RuleApplicationReference"/> within the same .NET AppDomain.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Runtime.RuleApplicationReference)">
            <summary>
            Adds a new <see cref="T:InRule.Runtime.RuleApplicationReference"/> to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="reference">The specified <see cref="T:InRule.Runtime.RuleApplicationReference"/> to cache.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Runtime.RuleApplicationReference,InRule.Runtime.CacheRetention)">
            <summary>
            Adds a new <see cref="T:InRule.Runtime.RuleApplicationReference"/> to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="reference">The specified <see cref="T:InRule.Runtime.RuleApplicationReference"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting used when caching the compiled Rule Application.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Runtime.RuleApplicationReference,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new <see cref="T:InRule.Runtime.RuleApplicationReference"/> to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata and executable functions.
            </summary>
            <param name="reference">The specified <see cref="T:InRule.Runtime.RuleApplicationReference"/> to cache.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Runtime.RuleApplicationReference,InRule.Runtime.CacheRetention,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new <see cref="T:InRule.Runtime.RuleApplicationReference"/> to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/> and <see cref="T:InRule.Runtime.CompileSettings"/>, and compiles metadata and executable functions.
            </summary>
            <param name="reference">The specified <see cref="T:InRule.Runtime.RuleApplicationReference"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting for the new cache entry.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Repository.RuleApplicationDef)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleApplicationDef"/> to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="ruleApplicationDef">The specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Repository.RuleApplicationDef,InRule.Runtime.CacheRetention)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleApplicationDef"/> to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="ruleApplicationDef">The specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting used when caching the compiled Rule Application.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Repository.RuleApplicationDef,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleApplicationDef"/> to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata and executable functions.
            </summary>
            <param name="ruleApplicationDef">The specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(InRule.Repository.RuleApplicationDef,InRule.Runtime.CacheRetention,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleApplicationDef"/> to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/> and <see cref="T:InRule.Runtime.CompileSettings"/>, and compiles metadata and executable functions.
            </summary>
            <param name="ruleApplicationDef">The specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting for the new cache entry.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(System.String)">
            <summary>
            Adds a new rule application using the specific <see cref="T:InRule.Repository.RuleApplicationDef"/> URI to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="ruleApplicationPath">The URI for the specific <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(System.String,InRule.Runtime.CacheRetention)">
            <summary>
            Adds a new rule application using the specific <see cref="T:InRule.Repository.RuleApplicationDef"/> URI to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata.
            </summary>
            <param name="ruleApplicationPath">The URI for specific <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting used when caching the compiled Rule Application.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(System.String,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new rule application using the specific <see cref="T:InRule.Repository.RuleApplicationDef"/> URI to the cache with default <see cref="T:InRule.Runtime.CacheRetention"/>, and compiles metadata and executable functions.
            </summary>
            <param name="ruleApplicationPath">The URI for the specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Add(System.String,InRule.Runtime.CacheRetention,InRule.Runtime.CompileSettings)">
            <summary>
            Adds a new rule application using the specific <see cref="T:InRule.Repository.RuleApplicationDef"/> URI to the cache with specific <see cref="T:InRule.Runtime.CacheRetention"/> and <see cref="T:InRule.Runtime.CompileSettings"/>, and compiles metadata and executable functions.
            </summary>
            <param name="ruleApplicationPath">The URI for the specified <see cref="T:InRule.Repository.RuleApplicationDef"/> to cache.</param>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting for the new cache entry.</param>
            <param name="compileSettings">The function compile settings to use.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleApplicationReference"/> for the new cache entry.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Remove(InRule.Runtime.RuleApplicationReference)">
            <summary>
            Removes a <see cref="T:InRule.Runtime.RuleApplicationReference"/> from the cache.
            </summary>
            <param name="reference">The <see cref="T:InRule.Runtime.RuleApplicationReference"/> to remove.</param>
            <returns>True if the <see cref="T:InRule.Runtime.RuleApplicationReference"/> is found in the cache and successfully removed, else false.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.UpdateCacheEntryFromBackgroundCompile(InRule.Runtime.RuleApplicationCacheEntry)">
            <summary>
            Used by background compilation to update cache entry.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Contains(InRule.Runtime.RuleApplicationReference)">
            <summary>
            Determines whether the specified <see cref="T:InRule.Runtime.RuleApplicationReference"/> exists in the cache.
            </summary>
            <param name="reference">The <see cref="T:InRule.Runtime.RuleApplicationReference"/> to find in the cache.</param>
            <returns>True if the <see cref="T:InRule.Runtime.RuleApplicationReference"/> is in the cache, else false.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationCache.ConfigureCachePolicy(InRule.Runtime.IRuleApplicationCachePolicy)">
            <summary>
            Instructs the cache to use a different cache policy. This will remove all Rule Applications currently cached.
            </summary>
            <param name="policy">The new cache policy to use.</param>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationCache.Count">
            <summary>
            The number of items in the cache.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationCache.Uptime">
            <summary>
            Gets the cache uptime since it was first initialized or cleared.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationCache.Items">
            <summary>
            Returns the items in the cache, ordered by <see cref="T:InRule.Runtime.RuleApplicationReference"/>.LastCacheLookup.
            </summary>
        </member>
        <member name="T:InRule.Runtime.FileSystemRuleApplicationReference">
            <summary>
            Represents a filepath-based pointer to a <see cref="T:InRule.Repository.RuleApplicationDef"/>, used for runtime execution.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleApplicationReference">
            <summary>
            Represents a <see cref="T:InRule.Repository.RuleApplicationDef"/> intended for runtime execution.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.GetRuleApplicationDef">
            <summary>
            Obtains the <see cref="T:InRule.Repository.RuleApplicationDef"/> associated with this reference.
            </summary>
            <returns>The <see cref="T:InRule.Repository.RuleApplicationDef"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.GetLastFunctionCompile(InRule.Runtime.CompileSettings)">
            <summary>
            The time of last explicit function compile for this <see cref="T:InRule.Runtime.RuleApplicationReference"/>, or null if never explicitly compiled.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.Compile">
            <summary>
            Compiles runtime metadata for this <see cref="T:InRule.Runtime.RuleApplicationReference"/> using the associated <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            This overload only compiles Metadata and uses the default <see cref="T:InRule.Runtime.CacheRetention"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.Compile(InRule.Runtime.CacheRetention)">
            <summary>
            Compiles runtime metadata for this <see cref="T:InRule.Runtime.RuleApplicationReference"/> using the associated <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            This overload only compiles Metadata and uses a specific <see cref="T:InRule.Runtime.CacheRetention"/>.
            </summary>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting used when caching the compiled Rule Application.</param>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.Compile(InRule.Runtime.CompileSettings)">
            <summary>
            Compiles runtime metadata and executable functions for this <see cref="T:InRule.Runtime.RuleApplicationReference"/> using the associated <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            This overload uses the default <see cref="T:InRule.Runtime.CacheRetention"/>.
            </summary>
            <param name="compileSettings">The function compile settings to use.</param>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.Compile(InRule.Runtime.CacheRetention,InRule.Runtime.CompileSettings)">
            <summary>
            Compiles runtime metadata and executable functions for this <see cref="T:InRule.Runtime.RuleApplicationReference"/> using the associated <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="cacheRetention">The desired <see cref="T:InRule.Runtime.CacheRetention"/> setting used when caching the compiled Rule Application.</param>
            <param name="compileSettings">The function compile settings to use.</param>
        </member>
        <member name="M:InRule.Runtime.RuleApplicationReference.ClearCompiledFunctions">
            <summary>
            Clears the .NET delegate, state, and data caches associated with this <see cref="T:InRule.Runtime.RuleApplicationReference"/>.
             Use this to free memory in between successive executions of this instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.Id">
            <summary>
            A unique identifier for this <see cref="T:InRule.Runtime.RuleApplicationReference"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.CacheRetention">
            <summary>
            The cache retention policy for this <see cref="T:InRule.Runtime.RuleApplicationReference"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.LastCacheLookup">
            <summary>
            The last time this <see cref="T:InRule.Runtime.RuleApplicationReference"/> was retrieved from the <see cref="T:InRule.Runtime.RuleApplicationCache"/>, or null if never retrieved.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.LastMetadataCompile">
            <summary>
            The time of last metadata compile for this <see cref="T:InRule.Runtime.RuleApplicationReference"/>, or null if not yet compiled.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.IsCached">
            <summary>
            True if this <see cref="T:InRule.Runtime.RuleApplicationReference"/> has been added to the cache and is compiled, in the process of being compiled or contains compile errors.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.IsCompiled">
            <summary>
            True if this <see cref="T:InRule.Runtime.RuleApplicationReference"/> has been compiled successfully without errors.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleApplicationReference.Statistics">
            <summary>
            Gets the Rule Application compilation statistics.
            </summary>
        </member>
        <member name="M:InRule.Runtime.FileSystemRuleApplicationReference.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.FileSystemRuleApplicationReference"/> from the supplied path.
            </summary>
            <param name="ruleApplicationPath">The path to the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
        </member>
        <member name="M:InRule.Runtime.FileSystemRuleApplicationReference.GetRuleApplicationDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.RuleApplicationDef"/> from the file system. It does not leverage the runtime cache. To leverage the cached version, see <see cref="M:InRule.Runtime.RuleSession.GetRuleApplicationDef"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.RuleApplicationDef"/>.</returns>
        </member>
        <member name="P:InRule.Runtime.FileSystemRuleApplicationReference.Path">
            <summary>
            Gets the file path associated with this reference.
            </summary>
        </member>
        <member name="T:InRule.Runtime.InMemoryRuleApplicationReference">
            <summary>
            Represents an in-memory pointer to a <see cref="T:InRule.Repository.RuleApplicationDef"/>, used for runtime execution.
            </summary>
        </member>
        <member name="M:InRule.Runtime.InMemoryRuleApplicationReference.#ctor(InRule.Repository.RuleApplicationDef)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.InMemoryRuleApplicationReference"/> from the specified <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="ruleApplicationDef">The specified <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
        </member>
        <member name="M:InRule.Runtime.InMemoryRuleApplicationReference.GetRuleApplicationDef">
            <summary>
            Returns a new copy of the <see cref="T:InRule.Repository.RuleApplicationDef"/> in memory. It does not leverage the runtime cache. To leverage the cached version, see <see cref="M:InRule.Runtime.RuleSession.GetRuleApplicationDef"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.RuleApplicationDef"/>.</returns>
        </member>
        <member name="T:InRule.Runtime.CatalogRefreshSettings">
            <summary>
            Governs the execution refresh behavior for rule applications stored in the InRule catalog service.
            When a <see cref="T:InRule.Runtime.RuleSession"/> is created, it may check for an updated revision of a rule application if the latest revision or label was specified for the <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/>.
            The refresh interval governs the minimum time between catalog revision checks and therefore how long to use a potentially stale cached rule application.
            The failure limit governs how long to use a cached rule application if the catalog service is unavailable during a revision check.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CatalogRefreshSettings.Default">
            <summary>
            The default <see cref="T:InRule.Runtime.CatalogRefreshSettings"/> setting. The default refresh interval is 30 seconds, and failure limit is 2 hours, unless changed in the .config file.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CatalogRefreshSettings.NeverCheckLatestRevision">
            <summary>
            Disables catalog revision check refresh and uses a cached revision if available.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CatalogRefreshSettings.AlwaysCheckLatestRevision">
            <summary>
            Forces catalog revision check refresh every time a <see cref="T:InRule.Runtime.RuleSession"/> is created, if configured to use the latest revision or specific label.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRefreshSettings.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRefreshSettings"/>.
            </summary>
            <param name="refreshInterval">The minimum rule application refresh interval that specifies when to check the catalog for an updated revision, if latest revision or label was specified. The refresh only occurs when a new <see cref="T:InRule.Runtime.RuleSession"/> is created. Use TimeSpan.Zero to refresh every time, or TimeSpan.MaxValue to disable refresh. Default = 30 seconds.</param>
        </member>
        <member name="P:InRule.Runtime.CatalogRefreshSettings.RefreshInterval">
            <summary>
            Gets the minimum rule application refresh interval that specifies when to check the catalog for an updated revision, if latest revision or label was specified. The refresh only occurs when a new <see cref="T:InRule.Runtime.RuleSession"/> is created. TimeSpan.Zero means refresh every time, TimeSpan.MaxValue means disable refresh. Default = 30 seconds.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CatalogRuleApplicationReference">
            <summary>
            Represents an InRule catalog-based pointer to a <see cref="T:InRule.Repository.RuleApplicationDef"/>, used for runtime execution.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the 
            labeled 
            revision of the given rule application using 
            Single Sign-On 
            for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="label">The label of the revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="label">The label of the revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the specified revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="revision">The revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the specified revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="revision">The revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="label">The label of the revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="label">The label of the revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="revision">The revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="name">The name of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="revision">The revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="label">The label of the revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="label">The label of the revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the specified revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="revision">The revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the specified revision of the given rule application using Single Sign-On for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="revision">The revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the latest revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="label">The label of the revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="label">The label of the revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="revision">The revision to retrieve.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.#ctor(System.String,System.Guid,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> that will retrieve the labeled revision of the given rule application using username and password for authentication.
            </summary>
            <param name="catalogUri">The URI to of the Catalog.</param>
            <param name="id">The GUID of the rule application.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="revision">The revision to retrieve.</param>
            <param name="enableBackgroundCompilation">Performs latest revision check and optional recompilation on a background thread.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.SetRefresh(System.TimeSpan)">
            <summary>
            Sets the rule application refresh interval.
            </summary>
            <param name="refreshInterval">The minimum rule application refresh interval that specifies when to check the catalog for an updated revision, if latest revision or label was specified. The refresh only occurs when a new <see cref="T:InRule.Runtime.RuleSession"/> is created. Use TimeSpan.Zero to refresh every time, or TimeSpan.MaxValue to disable refresh. Default = 30 seconds.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationReference.GetRuleApplicationDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.RuleApplicationDef"/> from the catalog. It does not leverage the runtime cache. To leverage the cached version, see <see cref="M:InRule.Runtime.RuleSession.GetRuleApplicationDef"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.RuleApplicationDef"/>.</returns>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.CatalogUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> of the Catalog service.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.RuleApplicationDescriptor">
            <summary>
            Gets or sets the descriptor of the RuleApplication. This may specify either a name or a <see cref="T:System.Guid"/> identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.RuleApplicationVersion">
            <summary>
            Gets or sets the version of the RuleApplication. This may specify either a revision or a label. If this is null, the latest revision is used.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.RefreshSettings">
            <summary>
            Configures the refresh settings of the rule application when latest revision or label specified, to allow each <see cref="T:InRule.Runtime.RuleSession"/> to use a cached revision for the duration of the refresh interval before the catalog is checked for an updated revision.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.Credentials">
            <summary>
            Gets or sets the credentials to use when connecting to the Catalog service.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.ConnectionTimeout">
            <summary>
            Gets or sets the Catalog Service connection timeout. If the timeout expires without a successful connection to the Catalog, an exception will be thrown.
            The default is 60 seconds.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationReference.EnableBackgroundCompilation">
            <summary>
            When EnableBackgroundCompilation is true, <see cref="T:InRule.Runtime.CatalogRuleApplicationReference"/> will download and compile updated rule applications on a background thread.
            </summary>
            <remarks>
            Default is false.
            </remarks>
        </member>
        <member name="T:InRule.Runtime.CatalogCredentials">
            <summary>
            Represents the credentials used to connect to the irServer Catalog.
            This is only used when the Catalog is configured to use database for authentication. Single Sign-On (SSO) should not use this and leave the credential instance null.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogCredentials.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:InRule.Runtime.CatalogCredentials"/> with a username and password.
            </summary>
            <param name="username">The username to log in with.</param>
            <param name="password">The password for the given username.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogCredentials.#ctor">
            <summary>
            Creates an instance of <see cref="T:InRule.Runtime.CatalogCredentials"/> that indicates Single Sign-On should be used insead of a username and password.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogCredentials.Username">
            <summary>
            Gets the Catalog user's user name.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CatalogRuleApplicationDescriptor">
            <summary>
            Represents a RuleApplication in a Catalog, represented either by name or <see cref="T:System.Guid"/> identifier.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationDescriptor.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationDescriptor"/> using the specified rule application name.
            </summary>
            <param name="name">The name of the rule application.</param>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationDescriptor.#ctor(System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationDescriptor"/> using the specified rule application ID.
            </summary>
            <param name="id">The ID of the rule application.</param>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationDescriptor.Name">
            <summary>
            Gets the name of a RuleApplication.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationDescriptor.Id">
            <summary>
            Gets the Id of a RuleApplication.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CatalogRuleApplicationVersion">
            <summary>
            Represents the version of a RuleApplication in a Catalog, either by revision or label.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationVersion.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationVersion"/> using the latest rule application revision.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationVersion.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationVersion"/> using the specified rule application label.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CatalogRuleApplicationVersion.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.CatalogRuleApplicationVersion"/> using the specified rule application revision.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationVersion.Revision">
            <summary>
            Gets the revision of a RuleApplication.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CatalogRuleApplicationVersion.Label">
            <summary>
            Gets the label of a RuleApplication.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValueList">
            <summary>
            Represents an authored value list datatype.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValueListItem">
            <summary>
            A discrete item in a <see cref="T:InRule.Runtime.ValueList"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.BoundStateSettings">
            <summary>
            These settings support configuration of bound state caching modes and custom state delegates
            </summary>
        </member>
        <member name="M:InRule.Runtime.BoundStateSettings.Copy">
            <summary>
            Returns a new <see cref="T:InRule.Runtime.BoundStateSettings"/> instance as an identical copy of this current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.BoundStateSettings.Entity(System.String)">
            <summary>
            Configures bound state mappings for the specified <see cref="M:InRule.Runtime.BoundStateSettings.Entity(System.String)"/>.
            </summary>
            <param name="entityName">The <see cref="M:InRule.Runtime.BoundStateSettings.Entity(System.String)"/> name to configure.</param>
            <returns>A mapper to use for bound state configuration.</returns>
        </member>
        <member name="P:InRule.Runtime.BoundStateSettings.UseAuthoredTypeInformationForTempFields">
            <summary>
            Specifies whether to use authoring-time CLR type information for temp fields during creation of their associated values.
             Set this to false when using XElement binding to ensure temp fields ignore any authoring-time CLR type info.
             Defaults to true.
            </summary>
        </member>
        <member name="P:InRule.Runtime.BoundStateSettings.BindOnlyToConfiguredStateDelegates">
            <summary>
            If true, tells the engine to use *only* configured delegates for state operations (field reads/writes, collection operations, etc.). An error is thrown if no delegate exists for a given operation for a given schema element.
             If false, the engine will attempt to use configured delegates if they exist, otherwise it will fall back to state access behavior specified by BindingMode.
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityMapper">
            <summary>
            Supports custom configuration of bound state mappings for an <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.EntityField(System.String)">
            <summary>
            Configures bound state mappings for an <see cref="M:InRule.Runtime.EntityMapper.EntityField(System.String)"/>, on this parent <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityMapper.EntityField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityMapper.EntityField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.ComplexField(System.String)">
            <summary>
            Configures bound state mappings for an <see cref="M:InRule.Runtime.EntityMapper.ComplexField(System.String)"/>, on this parent <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityMapper.ComplexField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityMapper.ComplexField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.PrimitiveField(System.String)">
            <summary>
            Configures bound state mappings for an <see cref="M:InRule.Runtime.EntityMapper.PrimitiveField(System.String)"/>, on this parent <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityMapper.PrimitiveField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityMapper.PrimitiveField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.ComplexCollection(System.String)">
            <summary>
            Configures bound state mappings for an <see cref="M:InRule.Runtime.EntityMapper.ComplexCollection(System.String)"/>, on this parent <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.EntityMapper.ComplexCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityMapper.ComplexCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.EntityCollection(System.String)">
            <summary>
            Configures bound state mappings for an <see cref="M:InRule.Runtime.EntityMapper.EntityCollection(System.String)"/>, on this parent <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.EntityMapper.EntityCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityMapper.EntityCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.Type(System.String)">
            <summary>
            Configures the .NET type to use for bound state instances of this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The fully qualified name of the .NET type to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.Factory(System.Func{System.Object})">
            <summary>
            Configures a factory method used by the rule engine to create bound state for new instances of this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="factory">The factory method (.NET delegate) to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.UseOnlyDelegates(System.Boolean)">
            <summary>
            Configures the "use only state delegates" flag specific to this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="onlyDelegates">True to use only configured delegates for state operations for this <see cref="T:InRule.Runtime.Entity"/>; false to consider delegates, but also use configured StateBindingMode settings.</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.ResetUsOnlyDelegatesFlag">
            <summary>
            Resets the "use only state delegates" flag for this <see cref="T:InRule.Runtime.Entity"/> to the <see cref="T:InRule.Runtime.RuleSession"/> default,
             as determined by <see cref="P:InRule.Runtime.BoundStateSettings.BindOnlyToConfiguredStateDelegates"/>.
            </summary>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityMapper.Equality(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Configures a .NET delegate to override equality comparisons for bound instances of this <see cref="T:InRule.Runtime.Entity"/>.
             If provided, this is used internally by the rule engine to determine if a bound object corresponds to an already-existing <see cref="T:InRule.Runtime.Entity"/>, or not.
             The two delegate parameters correspond to the bound objects to be tested for equality.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="T:InRule.Runtime.PrimitiveFieldMapper">
            <summary>
            Supports custom configuration of bound state mappings for a <see cref="T:InRule.Runtime.PrimitiveField"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.PrimitiveFieldMapper.BoundMemberName(System.String)">
            <summary>
            Specifies the bound state member name to use for get/set operations for this <see cref="T:InRule.Runtime.PrimitiveField"/>.
             This mapped name overrides authoring-time settings, including any aliased names.
            </summary>
            <param name="name">The mapped name</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.PrimitiveFieldMapper.Getter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value read of this <see cref="T:InRule.Runtime.PrimitiveField"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="getter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.PrimitiveFieldMapper.Setter(System.Action{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value write of this <see cref="T:InRule.Runtime.PrimitiveField"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the value to be set.
            </summary>
            <param name="setter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="T:InRule.Runtime.EntityCollectionMapper">
            <summary>
            Supports custom configuration of bound state mappings for an <see cref="T:InRule.Runtime.EntityCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.BoundMemberName(System.String)">
            <summary>
            Specifies the bound state member name to use for get/set operations for this <see cref="T:InRule.Runtime.EntityCollection"/>.
             This mapped name overrides authoring-time settings, including any aliased names.
            </summary>
            <param name="name">The name to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.Type(System.String)">
            <summary>
            Specifies the CLR type to use when the engine creates instances of this <see cref="T:InRule.Runtime.EntityCollection"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The fully qualified name of the .NET type to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.Factory(System.Func{System.Collections.IList})">
            <summary>
            Configures a factory method used by the rule engine to create bound state for new instances of this <see cref="T:InRule.Runtime.EntityCollection"/>.
            </summary>
            <param name="factory">The factory method (.NET delegate) to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.Getter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value read of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="getter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.CountFunction(System.Func{System.Object,System.Int32})">
            <summary>
            Specifies a .NET delegate the rule engine uses when determining the count of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.AddMemberFunction(System.Action{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when adding a new member to this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the new member instance.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.RemoveMemberFunction(System.Action{System.Object,System.Int32})">
            <summary>
            Specifies a .NET delegate the rule engine uses when removing a member of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the 0-based index of the member to remove.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.GetMemberFunction(System.Func{System.Object,System.Int32,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when getting a member of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the 0-based index of the member to retrieve.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.GetMembersFunction(System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Specifies a .NET delegate the rule engine uses when getting all members of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.ClearMembersFunction(System.Action{System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when removing all members of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.ReorderMembersFunction(System.Action{System.Object,System.Int32[]})">
            <summary>
            Specifies a .NET delegate the rule engine uses when reordering the members of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate arguments corresponds to the new sort order of the collection, using the pre-sort indices.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.SetMemberFunction(System.Action{System.Object,System.Int32,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when assigning the value of a member of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate arguments corresponds to the index of the member to assign.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMapper.Equality(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Specifies a .NET delegate the rule engine uses when testing for equality between two instances of this <see cref="T:InRule.Runtime.EntityCollection"/>.
             The delegate arguments correspond to the bound values for the <see cref="T:InRule.Runtime.EntityCollection"/>s to be compared.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="P:InRule.Runtime.EntityCollectionMapper.Member">
            <summary>
            Gets a mapper for configuration of <see cref="T:InRule.Runtime.Entity"/> members of this collection.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ComplexCollectionMapper">
            <summary>
            Supports custom configuration of bound state mappings for an <see cref="T:InRule.Runtime.ComplexCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.BoundMemberName(System.String)">
            <summary>
            Specifies the bound state member name to use for get/set operations for this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             This mapped name overrides authoring-time settings, including any aliased names.
            </summary>
            <param name="name">The name to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.Type(System.String)">
            <summary>
            Specifies the CLR type to use when the engine creates instances of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The fully qualified name of the .NET type to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.Factory(System.Func{System.Collections.IList})">
            <summary>
            Configures a factory method used by the rule engine to create bound state for new instances of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
            </summary>
            <param name="factory">The factory method (.NET delegate) to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.Getter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value read of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="getter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.CountFunction(System.Func{System.Object,System.Int32})">
            <summary>
            Specifies a .NET delegate the rule engine uses when determining the count of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.AddMemberFunction(System.Action{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when adding a new member to this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the new member instance.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.RemoveMemberFunction(System.Action{System.Object,System.Int32})">
            <summary>
            Specifies a .NET delegate the rule engine uses when removing a member of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the 0-based index of the member to remove.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.GetMemberFunction(System.Func{System.Object,System.Int32,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when getting a member of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the 0-based index of the member to retrieve.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.GetMembersFunction(System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Specifies a .NET delegate the rule engine uses when getting all members of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.ClearMembersFunction(System.Action{System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when removing all members of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.ReorderMembersFunction(System.Action{System.Object,System.Int32[]})">
            <summary>
            Specifies a .NET delegate the rule engine uses when reordering the members of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate arguments corresponds to the new sort order of the collection, using the pre-sort indices.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.SetMemberFunction(System.Action{System.Object,System.Int32,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses when assigning the value of a member of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate arguments corresponds to the index of the member to assign.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMapper.Equality(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Specifies a .NET delegate the rule engine uses when testing for equality between two instances of this <see cref="T:InRule.Runtime.ComplexCollection"/>.
             The delegate arguments correspond to the bound values for the <see cref="T:InRule.Runtime.ComplexCollection"/>s to be compared.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="P:InRule.Runtime.ComplexCollectionMapper.Member">
            <summary>
            Gets a mapper for configuration of <see cref="T:InRule.Runtime.ComplexCollectionMember"/>s of this collection.
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityFieldMapper">
            <summary>
            Supports custom configuration of bound state mappings for an <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/> of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.ComplexField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexField(System.String)"/> of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.PrimitiveField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.EntityFieldMapper.PrimitiveField(System.String)"/> of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.EntityFieldMapper.PrimitiveField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityFieldMapper.PrimitiveField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.ComplexCollection(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexCollection(System.String)"/> of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityFieldMapper.ComplexCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.EntityCollection(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.EntityFieldMapper.EntityCollection(System.String)"/> of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.EntityFieldMapper.EntityCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.EntityFieldMapper.EntityCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.Type(System.String)">
            <summary>
            Specifies the CLR type to use when the engine creates instances of the <see cref="T:InRule.Runtime.Entity"/> type of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The fully qualified name of the .NET type to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.Factory(System.Func{System.Object})">
            <summary>
            Configures a factory method used by the rule engine to create bound state for new instances of the <see cref="T:InRule.Runtime.Entity"/> type of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="factory">The factory method (.NET delegate) to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.UseOnlyDelegates(System.Boolean)">
            <summary>
            Configures the "use only state delegates" flag for the <see cref="T:InRule.Runtime.Entity"/> type of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
            </summary>
            <param name="onlyDelegates">True to use only configured delegates for state operations for this <see cref="T:InRule.Runtime.Entity"/>; false to consider delegates, but also use configured StateBindingMode settings.</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.ResetUsOnlyDelegatesFlag">
            <summary>
            Resets the "use only state delegates" flag for the <see cref="T:InRule.Runtime.Entity"/> type of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/> to the <see cref="T:InRule.Runtime.RuleSession"/> default,
             as determined by <see cref="P:InRule.Runtime.BoundStateSettings.BindOnlyToConfiguredStateDelegates"/>.
            </summary>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.BoundMemberName(System.String)">
            <summary>
            Specifies the bound state member name to use for get/set operations for this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
             This mapped name overrides authoring-time settings, including any aliased names.
            </summary>
            <param name="name">The name to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.Getter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value read of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="getter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.Setter(System.Action{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value write of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the value to be set.
            </summary>
            <param name="setter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.EntityFieldMapper.Equality(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Specifies a .NET delegate the rule engine uses when testing for equality between two instances of the <see cref="T:InRule.Runtime.Entity"/> type of this <see cref="M:InRule.Runtime.EntityFieldMapper.EntityField(System.String)"/>.
             The delegate arguments correspond to the bound values for the instances to be compared.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="T:InRule.Runtime.ComplexMapper">
            <summary>
            Supports custom configuration of bound state mappings for a <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.EntityField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.ComplexMapper.EntityField(System.String)"/> of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.ComplexMapper.EntityField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.ComplexMapper.EntityField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.PrimitiveField(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.ComplexMapper.PrimitiveField(System.String)"/> of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="fieldName">Name of the <see cref="M:InRule.Runtime.ComplexMapper.PrimitiveField(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.ComplexMapper.PrimitiveField(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.ComplexCollection(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.ComplexMapper.ComplexCollection(System.String)"/> of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.ComplexMapper.ComplexCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.ComplexMapper.ComplexCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.EntityCollection(System.String)">
            <summary>
            Configures bound state mappings for a child <see cref="M:InRule.Runtime.ComplexMapper.EntityCollection(System.String)"/> of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="collectionName">Name of the <see cref="M:InRule.Runtime.ComplexMapper.EntityCollection(System.String)"/> to configure.</param>
            <returns>A mapper for the specified <see cref="M:InRule.Runtime.ComplexMapper.EntityCollection(System.String)"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.Type(System.String)">
            <summary>
            Specifies the CLR type to use when the engine creates instances of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The fully qualified name of the .NET type to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.Factory(System.Func{System.Object})">
            <summary>
            Configures a factory method used by the rule engine to create bound state for new instances of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <param name="factory">The factory method (.NET delegate) to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.BoundMemberName(System.String)">
            <summary>
            Specifies the bound state member name to use for get/set operations for this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
             This mapped name overrides authoring-time settings, including any aliased names.
            </summary>
            <param name="name">The name to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.Getter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value read of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
             The delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
            </summary>
            <param name="getter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.Setter(System.Action{System.Object,System.Object})">
            <summary>
            Specifies a .NET delegate the rule engine uses for each bound state value write of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
             The first delegate argument corresponds to the bound value for the parent <see cref="T:InRule.Runtime.Entity"/> or complex.
             The second delegate argument corresponds to the value to be set.
            </summary>
            <param name="setter">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="M:InRule.Runtime.ComplexMapper.Equality(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Specifies a .NET delegate the rule engine uses when testing for equality between two instances of this <see cref="M:InRule.Runtime.ComplexMapper.ComplexField(System.String)"/> or <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
             The delegate arguments correspond to the bound values for the instances to be compared.
            </summary>
            <param name="function">The .NET delegate to use</param>
            <returns>This mapper instance</returns>
        </member>
        <member name="T:InRule.Runtime.CollectionChangeLogMessage">
            <summary>
            Provides details of a collection change that occurs during execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionChangeLogMessage.MemberId">
            <summary>
            The member that was added or removed, or null if ChangeType == <see cref="T:InRule.Runtime.CollectionChangeType"/>.Sorted or <see cref="T:InRule.Runtime.CollectionChangeType"/>.Cleared.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionChangeLogMessage.CollectionId">
            <summary>
            The collection element identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionChangeLogMessage.MemberIndex">
            <summary>
            The member index that was added or removed, or null if ChangeType == <see cref="T:InRule.Runtime.CollectionChangeType"/>.Sorted or <see cref="T:InRule.Runtime.CollectionChangeType"/>.Cleared.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionChangeLogMessage.ChangeType">
            <summary>
            The change type that occurred.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionChangeLogMessage.CollectionCount">
            <summary>
            The collection count after the specified change occurred.
            </summary>
        </member>
        <member name="T:InRule.Runtime.CollectionChangeType">
            <summary>
            Describes the type of collection change in a <see cref="T:InRule.Runtime.CollectionChangeLogMessage"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CollectionChangeType.Added">
            <summary>
            A collection member was added to a collection.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CollectionChangeType.Removed">
            <summary>
            A collection member was removed from a collection.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CollectionChangeType.Cleared">
            <summary>
            A collection was cleared.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CollectionChangeType.Sorted">
            <summary>
            A collection was sorted.
            </summary>
        </member>
        <member name="F:InRule.Runtime.CollectionChangeType.UserModified">
            <summary>
            A collection was modified by the user outside of irSDK.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ExecutionStatistics">
            <summary>
            Aggregates execution statistics for an entire rule execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.MetadataCompileTime">
            <summary>
            Aggregate time for runtime metadata generation during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.FunctionCompileTime">
            <summary>
            Aggregate time for .NET delegate generation during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.BoundStateRefreshTime">
            <summary>
            Aggregate time for bound state refresh during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.RuleSetsFiredCount">
            <summary>
            Number of rulesets fired during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.TrueRulesCount">
            <summary>
            Number of true assignments to rules during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ActiveNotificationsCount">
            <summary>
            Number of notifications fired minus the number retracted during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ActiveValidationsCount">
            <summary>
            Number of invalidations minus the number retracted during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.CalculationFieldsEvaluatedCount">
            <summary>
            Total calculation fields evaluated during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.RulesEvaluatedCount">
            <summary>
            Total rules evaluated during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ActionsExecutedCount">
            <summary>
            Total actions executed during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.StateValueChangesCount">
            <summary>
            Total state value changes during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.TotalRuleEvaluationTime">
            <summary>
            Aggregate evaluation time for rules during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.TotalActionExecutionTime">
            <summary>
            Aggregate execution time for actions during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.TotalCalculationFieldEvaluationTime">
            <summary>
            Aggregate evaluation time for calculation fields during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ExternalDataQueryCallTime">
            <summary>
            Gets the time spent executing SQL or XPath queries against external databases or files during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ExternalMethodCallTime">
            <summary>
            Gets the time spent calling external methods (including UDFs) during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ExternalSmtpCallTime">
            <summary>
            Gets the time spent sending mail to SMTP servers during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ExternalWebServiceCallTime">
            <summary>
            Gets the time spent making Web Service calls during this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ExecutionStatistics.ExternalWorkflowCallTime">
            <summary>
            Gets the cumulative time spent executing Workflows during this execution sequence.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ErrorLogMessage">
            <summary>
            Provides details of an error that occurs during execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ErrorLogMessage.Exception">
            <summary>
            Returns the top-most <see cref="P:InRule.Runtime.ErrorLogMessage.Exception"/> generated during engine execution, corresponding to this specific error.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ErrorLogMessage.ExecutionStack">
            <summary>
            Returns the element identifier stack for this error.
            </summary>
            <returns>The hierarchy of element identifiers.</returns>
        </member>
        <member name="P:InRule.Runtime.ErrorLogMessage.RuntimeErrorCode">
            <summary>
            Internal Use Only
            </summary>
        </member>
        <member name="P:InRule.Runtime.ErrorLogMessage.SourceElementId">
            <summary>
            The element identifier that is associated with this error
            </summary>
        </member>
        <member name="T:InRule.Runtime.ActivationChangeLogMessage">
            <summary>
            Provides details of an activation change that occurs during execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ActivationChangeLogMessage.Category">
            <summary>
            The category associated with this activation change, or null if none.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ActivationChangeLogMessage.RuleSetId">
            <summary>
            The ruleset element identifier associated with this activation change.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ActivationChangeLogMessage.IsActive">
            <summary>
            True if the element was activated, or false if it was deactivated.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValueChangeLogMessage">
            <summary>
            Provides details of a state value change that occurs during engine execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValueChangeLogMessage.ValueType">
            <summary>
            Specifies the type of value associated with this <see cref="T:InRule.Runtime.ValueChangeLogMessage"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValueChangeLogMessage.ElementId">
            <summary>
            The element identifier of the associated state value.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValueChangeLogMessage.NewValue">
            <summary>
            Gets the assigned value associated with this state change.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValueChangeType">
            <summary>
            Describes the type of <see cref="T:InRule.Runtime.ValueChangeLogMessage"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.ValueChangeType.Field">
            <summary>
            Indicates a state value change.
            </summary>
        </member>
        <member name="F:InRule.Runtime.ValueChangeType.Rule">
            <summary>
            Indicates a rule value change.
            </summary>
        </member>
        <member name="F:InRule.Runtime.ValueChangeType.Calculation">
            <summary>
            Indicates a calculated field change.
            </summary>
        </member>
        <member name="T:InRule.Runtime.NotificationChangeLogMessage">
            <summary>
            Provides details of a new notification or retraction during engine execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.NotificationChangeLogMessage.Notification">
            <summary>
            The associated <see cref="P:InRule.Runtime.NotificationChangeLogMessage.Notification"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValidationChangeLogMessage">
            <summary>
            Provides details of a new validation or retraction during engine execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationChangeLogMessage.Reasons">
            <summary>
            The associated list of <see cref="T:InRule.Runtime.ValidationReason"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationChangeLogMessage.Message">
            <summary>
            The element identifier of the validated item.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationChangeLogMessage.Target">
            <summary>
            The element identifier of the validated item.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationChangeLogMessage.IsValid">
            <summary>
            True if the item is valid, else false.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Collection`1">
            <summary>
            A generic collection type that supports enumeration, count, and index-based member retrieval.
            </summary>
            <typeparam name="TElement">The member type for the collection</typeparam>
        </member>
        <member name="M:InRule.Runtime.Collection`1.GetEnumerator">
            <summary>
            Returns an enumerator of all collection members.
            </summary>
            <returns>The members.</returns>
        </member>
        <member name="P:InRule.Runtime.Collection`1.Count">
            <summary>
            The collection count
            </summary>
        </member>
        <member name="P:InRule.Runtime.Collection`1.Item(System.Int32)">
            <summary>
            Returns a collection member by ordinal, 0-based index.
            </summary>
            <param name="index">Index of the member to retrieve.</param>
            <returns>The member.</returns>
        </member>
        <member name="P:InRule.Runtime.Collection`1.Item(System.String)">
            <summary>
            Returns a collection member by name, or default( TMember ) if not found.
            </summary>
            <param name="name">The name of the member to retieve.</param>
            <returns>The member.</returns>
        </member>
        <member name="T:InRule.Runtime.EngineLogOptions">
            <summary>
            These values are used to configure log collection options for runtime execution.
            </summary>
            <remarks>This is a [Flags] enum which allows multiple values to be combined. E.g. <see cref="F:InRule.Runtime.EngineLogOptions.DetailStatistics"/> | <see cref="F:InRule.Runtime.EngineLogOptions.Execution"/>.</remarks>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.None">
            <summary>
            Disables <see cref="T:InRule.Runtime.RuleExecutionLog"/> messages, value changes, statistics and <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/> generation.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.Execution">
            <summary>
            Enables text feedback messages and rule changes on the <see cref="T:InRule.Runtime.RuleExecutionLog"/>. This includes RuleSet, Rule and Action execution messages.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.StateChanges">
            <summary>
            Enables state changes on the <see cref="T:InRule.Runtime.RuleExecutionLog"/>, including calculations.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.SummaryStatistics">
            <summary>
            Enables summary statistics in <see cref="T:InRule.Runtime.RuleExecutionLog"/> and <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.DetailStatistics">
            <summary>
            Enables detailed statistics in <see cref="T:InRule.Runtime.RuleExecutionLog"/>. This enables RuleSet, Rule and Action timings.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.RuleTrace">
            <summary>
            Enables <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/> generation. This is accessible from <see cref="M:InRule.Runtime.RuleExecutionLog.GetExecutionTrace"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EngineLogOptions.RuleValues">
            <summary>
            Ensures that rule values are captured and accessable via the SDK.
            </summary>
        </member>
        <member name="T:InRule.Runtime.DataManager">
            <summary>
            Provides access to runtime behavior for <see cref="T:InRule.Repository.RuleApplicationDef"/> endpoints and data elements.
            </summary>
        </member>
        <member name="M:InRule.Runtime.DataManager.GetValueList(System.String,InRule.Runtime.PassThruQueryParameter[])">
            <summary>
            Gets an authored value list by name.
            </summary>
            <param name="name">Name of the <see cref="T:InRule.Runtime.ValueList"/> to get.</param>
            <param name="passThruParameters">Optional pass-through parameters to use when source data generated from an <see cref="T:InRule.Repository.SqlQueryDef"/>.</param>
            <returns>The requested <see cref="T:InRule.Runtime.ValueList"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.DataManager.GetValueList(System.String,System.String,InRule.Runtime.PassThruQueryParameter[])">
            <summary>
            Gets an authored value list by name.
            </summary>
            <param name="name">Name of the <see cref="T:InRule.Runtime.ValueList"/> to get.</param>
            <param name="versionName">The version of the source data to use, when backed by an inline <see cref="T:InRule.Repository.TableDef"/>.</param>
            <param name="passThruParameters">Optional pass-through parameters to use when source data generated from an <see cref="T:InRule.Repository.SqlQueryDef"/>.</param>
            <returns>The requested <see cref="T:InRule.Runtime.ValueList"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.DataManager.GetInlineTable(System.String)">
            <summary>
            Gets an authored inline table by name.
            </summary>
            <param name="name">Name of the inline table to get.</param>
            <returns>The requested <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.DataManager.GetInlineTable(System.String,System.String)">
            <summary>
            Gets an authored inline table by name.
            </summary>
            <param name="name">Name of the inline table to get.</param>
            <param name="versionName">The name of the version to use when getting an inline table.</param>
            <returns>The requested <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="T:InRule.Runtime.PassThruQueryParameter">
            <summary>
            A name/value pair representing a query value list pass-through parameter.
            </summary>
        </member>
        <member name="M:InRule.Runtime.PassThruQueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new pass through parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:InRule.Runtime.PassThruQueryParameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="P:InRule.Runtime.PassThruQueryParameter.Value">
            <summary>
            The parameter value.
            </summary>
        </member>
        <member name="T:InRule.Runtime.OverrideManager">
            <summary>
            Represents the Runtime interface to override the authored <see cref="T:InRule.Repository.DataElementDef"/> or <see cref="T:InRule.Repository.EndPoints.EndPointDef"/> for the current <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideDatabaseConnection(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Runtime.DatabaseConnection"/> end point to use the specified connection string that uses the authored database driver.
            </summary>
            <param name="name">Name of the database connection end point to override.</param>
            <param name="connectionString">The connection string to use for this database connection.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideDatabaseConnection(System.String,System.Data.IDbConnection)">
            <summary>
            Overrides an authored <see cref="T:InRule.Runtime.DatabaseConnection"/> end point to use the specified ADO.NET connection.
            </summary>
            <param name="name">Name of the database connection end point to override.</param>
            <param name="connection">The connection object to use for this database connection.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideDatabaseConnection(System.String,System.Data.IDbTransaction)">
            <summary>
            Overrides an authored <see cref="T:InRule.Runtime.DatabaseConnection"/> end point to use the specified ADO.NET transaction.
            </summary>
            <param name="name">Name of the database connection end point to override.</param>
            <param name="transaction">The transaction object to use for this database connection end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideMailServerConnection(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.SendMailServerDef"/> end point to use the specified server address.
            </summary>
            <param name="name">Name of the mail server end point to override.</param>
            <param name="address">The mail server host name or IP address to use for this mail server end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceAddress(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified URL.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="address">The URL to use for this web service end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceAddress(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified WCF <see cref="T:System.ServiceModel.EndpointAddress"/> object.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress"/> object to use for this web service end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceBinding(System.String,System.ServiceModel.Channels.Binding)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified WCF <see cref="T:System.ServiceModel.Channels.Binding"/> object.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding"/> object to use for this web service end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceCertificate(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified X509 certificate object.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="certificateFilePath">File path to the X509 certificate to load into memory and use.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceCertificate(System.String,System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified X509 certificate object.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="certificateFilePath">File path to the X509 certificate to load into memory and use.</param>
            <param name="certificatePassword">Private key value used to secure the referenced X509 certificate.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified X509 certificate object.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> object to use.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideWebServiceWsdlAddress(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.WebServiceDef"/> end point to use the specified WSDL address.
            </summary>
            <param name="name">Name of the web service end point to override.</param>
            <param name="wsdlUri">The WSDL URI to use for this end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlDocumentPath(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.XmlDocumentPathDef"/> end point with the specified document URI.
            </summary>
            <param name="name">Name of the XML document path end point to override.</param>
            <param name="xmlDocumentPath">The document URI to use for this XML document path end point.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlSchemaValidation(System.String,System.Boolean)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> end point to change its schema validation setting. 
            </summary>
            <param name="name">Name of the XML schema end point to override.</param>
            <param name="enableXsdValidation">Whether to enable schema validation.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlSchema(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> end point to change its schema validation setting and path or URI to its schema definition.
            </summary>
            <param name="name">Name of the XML schema end point to override.</param>
            <param name="xsdPath">File path or URI to the XML schema definition to use for validation.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlSchema(System.String,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> end point to change its schema validation setting and associated XML schema.
            </summary>
            <param name="name">Name of the XML schema end point to override.</param>
            <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet"/> containing XML schemas to use for validation.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideRestServiceRootUrl(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.RestServiceDef"/> end point to change its Root Url.
            </summary>
            <param name="restServiceDefName">REST Endpoint Name</param>
            <param name="rootUrl">REST Root Url</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideRestServiceAuthentication(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.RestServiceDef"/> end point to change its AuthenticationType, UserName, Password and Domain.
            </summary>
            <param name="restServiceDefName">REST Endpoint Name</param>
            <param name="restServiceAuthenticationType">Authentication Type</param>
            <param name="userName">User Name</param>
            <param name="password">Password</param>
            <param name="domain">Domain</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideRestServiceX509Certificate(System.String,System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.EndPoints.RestServiceDef"/> end point to change its x.509 Certification Path and x.509 Certification Password.
            </summary>
            <param name="restServiceDefName">REST Endpoint Name</param>
            <param name="x509CertificatePath">Certification Path</param>
            <param name="x509CertificatePassword">Certification Password</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideTable(System.String,System.Data.DataTable)">
            <summary>
            Overrides an authored inline <see cref="T:InRule.Repository.TableDef"/> data element with the specified <see cref="T:System.Data.DataTable"/> object for the default version.
            </summary>
            <param name="name">Name of the inline table data element to override.</param>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to use for this inline table.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideTable(System.String,System.Data.DataTable,System.String)">
            <summary>
            Overrides an authored inline <see cref="T:InRule.Repository.TableDef"/> data element with the specified <see cref="T:System.Data.DataTable"/> object for a specific version.
            </summary>
            <param name="name">The name of the inline table data element to override.</param>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to use for this inline table.</param>
            <param name="versionName">The name of a specific version to override. [case-sensitive]</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlDocument(System.String,System.Xml.XPath.XPathDocument)">
            <summary>
            Overrides an authored inline <see cref="T:InRule.Repository.XmlDocumentDef"/> data element with the specified <see cref="T:System.Xml.XPath.XPathDocument"/> object for the default version.
            </summary>
            <param name="name">The name of the inline XML document data element to override.</param>
            <param name="xml">The <see cref="T:System.Xml.XPath.XPathDocument"/> to use for this inline XML document.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXmlDocument(System.String,System.Xml.XPath.XPathDocument,System.String)">
            <summary>
            Overrides an authored inline <see cref="T:InRule.Repository.XmlDocumentDef"/> data element with the specified <see cref="T:System.Xml.XPath.XPathDocument"/> object for a specific version.
            </summary>
            <param name="name">The name of the inline XML document data element  to override.</param>
            <param name="xml">The <see cref="T:System.Xml.XPath.XPathDocument"/> to use for this inline XML document.</param>
            <param name="versionName">The name of the version to override.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideValueList(System.String,InRule.Runtime.ValueList)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.ValueLists.InlineValueListDef"/> data element with the specified <see cref="T:InRule.Runtime.ValueList"/> object.
            </summary>
            <param name="name">Name of the inline value list data element to override.</param>
            <param name="list">The <see cref="T:InRule.Runtime.ValueList"/> to use for this inline value list.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideSqlQuery(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.SqlQueryDef"/> data element to use the specified query text.
            </summary>
            <param name="name">The name of the SQL query data element to override.</param>
            <param name="query">The new query text to use.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.OverrideXPathQuery(System.String,System.String)">
            <summary>
            Overrides an authored <see cref="T:InRule.Repository.XPathQueryDef"/> data elmenet to use the specified query text.
            </summary>
            <param name="name">The name of the XPath query data element to override.</param>
            <param name="query">The new query text to use.</param>
        </member>
        <member name="M:InRule.Runtime.OverrideManager.Clear">
            <summary>
            Clears all current RuleSession overrides.
            </summary>
        </member>
        <member name="P:InRule.Runtime.OverrideManager.ConfiguredOverrides">
            <summary>
            Provides a read-only view of all <see cref="T:InRule.Repository.DataElementDef"/> and <see cref="T:InRule.Repository.EndPoints.EndPointDef"/> overrides applied to the current <see cref="T:InRule.Runtime.RuleSession"/>, in order from most recent to least recent.
            </summary>
        </member>
        <member name="T:InRule.Runtime.OverrideType">
            <summary>
            Represents the type of <see cref="T:InRule.Repository.DataElementDef"/> or <see cref="T:InRule.Repository.EndPoints.EndPointDef"/> override.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSessionOverride">
            <summary>
            Represents a <see cref="T:InRule.Repository.DataElementDef"/> or <see cref="T:InRule.Repository.EndPoints.EndPointDef"/> override applied to the current <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionOverride.Name">
            <summary>
            The name of the <see cref="T:InRule.Repository.DataElementDef"/> or <see cref="T:InRule.Repository.EndPoints.EndPointDef"/> that was overridden.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionOverride.PropertyName">
            <summary>
            The name of the actual field/property that is being overwritten.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionOverride.VersionName">
            <summary>
            The name of the version overridden.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionOverride.Type">
            <summary>
            The type of override.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionOverride.Value">
            <summary>
            The value used to override the <see cref="T:InRule.Repository.DataElementDef"/> or <see cref="T:InRule.Repository.EndPoints.EndPointDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ContextRuleSet">
            <summary>
            Runtime representation of a context ruleset on a <see cref="T:InRule.Runtime.Field"/> or <see cref="T:InRule.Runtime.CollectionMember"/>, as defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSet">
            <summary>
            Runtime representation of a ruleset defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleElement">
            <summary>
            Base type for runtime representation of all elements defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Element">
            <summary>
            Base type for runtime representations of schema and rule hierarchy elements
            </summary>
        </member>
        <member name="M:InRule.Runtime.Element.GetElement(System.String)">
            <summary>
            Returns a descendent <see cref="T:InRule.Runtime.Element"/> identified by the relative input path.
            </summary>
            <param name="relativeElementIdentifier">An element identifier to the desired <see cref="T:InRule.Runtime.Element"/>, relative to this <see cref="T:InRule.Runtime.Element"/>.</param>
            <returns>The resolved <see cref="T:InRule.Runtime.Element"/></returns>
        </member>
        <member name="P:InRule.Runtime.Element.RuleSession">
            <summary>
            Gets the <see cref="P:InRule.Runtime.Element.RuleSession"/> to which this <see cref="T:InRule.Runtime.Element"/> belongs
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.Name">
            <summary>
            The name of this <see cref="T:InRule.Runtime.Element"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.IsConnectedToSession">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Element"/> is still valid and tracked by the <see cref="P:InRule.Runtime.Element.RuleSession"/>, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.ContextProperties">
            <summary>
            Returns a key/value store specific to this <see cref="T:InRule.Runtime.Element"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.Attributes">
            <summary>
            Returns a key/value store containing the authored attributes for this <see cref="T:InRule.Runtime.Element"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.Parent">
            <summary>
            The parent of this <see cref="T:InRule.Runtime.Element"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.ElementId">
            <summary>
            The element identifier which uniquely identifies this <see cref="T:InRule.Runtime.Element"/> within its <see cref="P:InRule.Runtime.Element.RuleSession"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Element.XPath">
            <summary>
            The XPath portion of the element identifier which identifies this <see cref="T:InRule.Runtime.Element"/> within its <see cref="P:InRule.Runtime.Element.RuleSession"/>
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleElement.GetDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> associated with this <see cref="T:InRule.Runtime.RuleElement"/>
            </summary>
            <returns>The <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleElement.GetRuleElement(System.String)">
            <summary>
            Returns a child <see cref="T:InRule.Runtime.RuleElement"/> by name
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Runtime.RuleElement"/> to return</param>
            <returns>The <see cref="T:InRule.Runtime.RuleElement"/></returns>
        </member>
        <member name="P:InRule.Runtime.RuleElement.Name">
            <summary>
            The name of this <see cref="T:InRule.Runtime.RuleElement"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleElement.Value">
            <summary>
            Gets an <see cref="T:InRule.Runtime.ElementValue"/> representing this <see cref="T:InRule.Runtime.RuleElement"/>'s underlying value
            </summary>
            <remarks>
            In order to read the value of a <see cref="T:InRule.Runtime.RuleElement"/>, rules must have executed with the <see cref="F:InRule.Runtime.EngineLogOptions.RuleValues"/> log option enabled in the <see cref="T:InRule.Runtime.RuleSession"/> settings.
            <see cref="F:InRule.Runtime.EngineLogOptions.RuleValues"/> are not enabled by default for performance reasons, due to the additional overhead in generating them.
            </remarks>
        </member>
        <member name="P:InRule.Runtime.RuleElement.Parent">
            <summary>
            Returns the parent <see cref="T:InRule.Runtime.Element"/> of this <see cref="T:InRule.Runtime.RuleElement"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleElement.HasVersions">
            <summary>
            True if this <see cref="T:InRule.Runtime.RuleElement"/> supports and has versions, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleElement.ActiveVersion">
            <summary>
            The active version for this <see cref="T:InRule.Runtime.RuleElement"/>; is null if either the rule has no versions, or rule execution has not yet occurred
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleElement.ActiveVersionName">
            <summary>
            The active version name for this <see cref="T:InRule.Runtime.RuleElement"/>; is null if either the rule has no versions, or rule execution has not yet occurred
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleElement.RuleElements">
            <summary>
            Returns the collection of child <see cref="T:InRule.Runtime.Rule"/>s for this <see cref="T:InRule.Runtime.RuleElement"/>.
             If this <see cref="T:InRule.Runtime.RuleElement"/> has versions, this property returns the default version logic
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSet.Execute(System.Object[])">
            <summary>
            Executes this <see cref="T:InRule.Runtime.RuleSet"/>.
            </summary>
            <param name="arguments">An optional array of arguments to use for execution.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleExecutionLog"/> generated for the execution sequence</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSet.GetTempXml">
            <summary>
            Serializes rule values in XML form.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the serialized rule value XML.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSet.GetTempXml(System.Boolean)">
            <summary>
            Serializes rule values in XML form.
            </summary>
            <param name="formatted">Whether to render XML with indentation whitespace and each XML element on a new line.</param>
            <returns>A <see cref="T:System.String"/> containing the serialized rule value XML.</returns>
        </member>
        <member name="P:InRule.Runtime.RuleSet.ElementId">
            <summary>
            Element identifier for this <see cref="T:InRule.Runtime.RuleSet"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.Parent">
            <summary>
            Returns the parent <see cref="T:InRule.Runtime.Element"/> of this <see cref="T:InRule.Runtime.RuleSet"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.IsIndependent">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.RuleSet"/> is an independent ruleset, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.IsExplicit">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.RuleSet"/> is an explicit ruleset, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.IsContext">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.RuleSet"/> is a context ruleset, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.IsActivated">
            <summary>
            True if this <see cref="T:InRule.Runtime.RuleSet"/> is activated for execution, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.Categories">
            <summary>
            The collection of categories associated with this <see cref="T:InRule.Runtime.RuleSet"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.Parameters">
            <summary>
            The set of <see cref="T:InRule.Runtime.RuleSetParameter"/>s associated with this <see cref="T:InRule.Runtime.RuleSet"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSet.Name">
            <summary>
            The name of this <see cref="T:InRule.Runtime.RuleSet"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ContextRuleSet.Parent">
            <summary>
            Parent <see cref="T:InRule.Runtime.Element"/> of this <see cref="T:InRule.Runtime.ContextRuleSet"/>
            </summary>
        </member>
        <member name="T:InRule.Runtime.ISchemaElementContainer">
            <summary>
            Represents an item in the rule application schema hierarchy that contains other items as children
            </summary>
        </member>
        <member name="T:InRule.Runtime.SchemaChildElement">
            <summary>
            Base class for <see cref="T:InRule.Runtime.SchemaElement"/>s which are hierarchical children of others, such as <see cref="T:InRule.Runtime.Field"/> and <see cref="T:InRule.Runtime.Collection"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.SchemaElement">
            <summary>
            Base class for <see cref="T:InRule.Runtime.Element"/>s which represent state hierarchy elements.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSetParameter">
            <summary>
            Base class for runtime representation of a ruleset parameter defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSetParameter.IsNull">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.RuleSetParameter"/>'s value is null, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSetParameter.DataType">
            <summary>
            The type of value represented by this <see cref="T:InRule.Runtime.RuleSetParameter"/>
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityRuleSetParameter">
            <summary>
            Runtime representation of an entity ruleset parameter defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityRuleSetParameter.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> that represents the <see cref="T:InRule.Runtime.Entity"/> of this <see cref="T:InRule.Runtime.EntityRuleSetParameter"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityRuleSetParameter.DataTypeEntityName">
            <summary>
            Name of the <see cref="T:InRule.Runtime.Entity"/> used as a value of this <see cref="T:InRule.Runtime.EntityRuleSetParameter"/>
            </summary>
        </member>
        <member name="T:InRule.Runtime.PrimitiveRuleSetParameter">
            <summary>
            Runtime representation of a primitive ruleset parameter defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveRuleSetParameter.DataType">
            <summary>
            The type of value represented by this <see cref="T:InRule.Runtime.PrimitiveRuleSetParameter"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveRuleSetParameter.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> representing this <see cref="T:InRule.Runtime.PrimitiveRuleSetParameter"/>'s underlying value
            </summary>
        </member>
        <member name="T:InRule.Runtime.Classification">
            <summary>
            Runtime representation of a <see cref="T:InRule.Repository.Classifications.ClassificationDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Classification.GetDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.Classifications.ClassificationDef"/> associated with this <see cref="T:InRule.Runtime.Classification"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.Classifications.ClassificationDef"/></returns>
        </member>
        <member name="P:InRule.Runtime.Classification.Value">
            <summary>
            Value associated with this <see cref="T:InRule.Runtime.Classification"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Classification.DisplayName">
            <summary>
            The <see cref="T:InRule.Runtime.Classification"/>'s display name
            </summary>
        </member>
        <member name="P:InRule.Runtime.Classification.Name">
            <summary>
            The <see cref="T:InRule.Runtime.Classification"/>'s name
            </summary>
        </member>
        <member name="P:InRule.Runtime.ElementIdentifier.StepCount">
            <summary>
            Returns the step count for the element identifier
            The EntityIdentifier counts as a step
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSessionDataCache.ValueListItemArrayCache">
            <summary>
            Caches arrays of value list items to prevent duplicate copies
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSessionDataCache.ValueListItemArrayCache.GetAggregrateHashCode(System.Object[])">
            <summary>
            Generates aggregrated rolling hashcode
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.RuleSessionDataCache.ValueListItemArrayCache.IValueListKey">
            <summary>
            Common interface for value lists items collections for both values and values + display names
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.ExecuteWorkflowActionFunction.LoaderService">
            <summary>
            This is a custom WF service used to load a workflow into memory
             It ensures that any configured workflow runs inside RootActivity...
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.ExecuteWorkflowActionFunction.RootActivity">
            <summary>
            This is the root activity for all workflows configured via ExecuteWorkflowActionDef
             It primarily governs execution timeouts...
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.CompileMode">
            <summary>
            Defines the aggressiveness of the runtime engine function compiler.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.Compiler.CompileMode.FullyCompiled">
            <summary>
            All rule logic is fully compiled, and never interpreted. This the default.
            This mode maximizes long-term execution throughput speed at the potential expense of initial warmup time.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.Compiler.CompileMode.FullyInterpreted">
            <summary>
            All rule logic executes in interpreted mode, and is never compiled.
            This mode minimizes initial warmup time at the potential expense of long-term execution throughput speed.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.Compiler.CompileMode.HybridAggressive">
            <summary>
            The first execution of rule logic is interpreted; subsequent executions are fully compiled.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.Compiler.CompileMode.HybridBalanced">
            <summary>
            The first few executions of rule logic are interpreted; subsequent executions are fully compiled.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.Compiler.CompileMode.HybridConservative">
            <summary>
            The first several executions of rule logic are interpreted; subsequent executions are fully compiled.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ArgumentArray">
            <summary>
            Wraps all arguments passed to a dynamic site with more arguments than can be accepted by a Func/Action delegate.
            The binder generating a rule for such a site should unwrap the arguments first and then perform a binding to them.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts a generic ICollection of T into an array of T.  
            
            If the collection is already an  array of T the original collection is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.ToArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            Converts a generic ICollection of T into an array of R using a given conversion.  
            
            If the collection is already an array of R the original collection is returned.
            </summary>
        </member>
        <member name="T:System.Dynamic.Utils.CacheDict`2">
            <summary>
            Provides a dictionary-like object used for caches which holds onto a maximum
            number of elements specified at construction time.
            
            This class is not thread safe.
            </summary>
        </member>
        <member name="M:System.Dynamic.Utils.CacheDict`2.#ctor(System.Int32)">
            <summary>
            Creates a dictionary-like object used for caches.
            </summary>
            <param name="maxSize">The maximum number of elements to store.</param>
        </member>
        <member name="M:System.Dynamic.Utils.CacheDict`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with 'key', returning true if it's found and
            false if it's not present.
            </summary>
        </member>
        <member name="M:System.Dynamic.Utils.CacheDict`2.Add(`0,`1)">
            <summary>
            Adds a new element to the cache, replacing and moving it to the front if the
            element is already present.
            </summary>
        </member>
        <member name="P:System.Dynamic.Utils.CacheDict`2.Item(`0)">
            <summary>
            Returns the value associated with the given key, or throws KeyNotFoundException
            if the key is not present.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExceptionHelpers.UpdateForRethrow(System.Exception)">
            <summary>
            Updates an exception before it's getting re-thrown so
            we can present a reasonable stack trace to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExceptionHelpers.GetExceptionStackTraces(System.Exception)">
            <summary>
            Returns all the stack traces associates with an exception
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.True">
            <summary>
            A singleton boxed boolean true.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.False">
             <summary>
            A singleton boxed boolean false.
             </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.SkipInterpretExpression">
            <summary>
            We don't need to insert code to track lines in adaptive mode as the
            interpreter does that for us. TODO: improve the adaptive compiler so we
            don't need to do this, and can just remove line tracking from languages
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ThreadLocal`1">
            <summary>
            Provides fast strongly typed thread local storage.  This is significantly faster than
            Thread.GetData/SetData.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.#ctor(System.Boolean)">
            <summary>
            True if the caller will guarantee that all cleanup happens as the thread
            unwinds.
            
            This is typically used in a case where the thread local is surrounded by
            a try/finally block.  The try block pushes some state, the finally block
            restores the previous state.  Therefore when the thread exits the thread
            local is back to it's original state.  This allows the ThreadLocal object
            to not check the current owning thread on retrieval.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.GetOrCreate(System.Func{`0})">
            <summary>
            Gets the current value if its not == null or calls the provided function
            to create a new value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.Update(System.Func{`0,`0})">
            <summary>
            Calls the provided update function with the current value and
            replaces the current value with the result of the function.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.Update(`0)">
            <summary>
            Replaces the current value with a new one and returns the old value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.GetStorageInfo">
            <summary>
            Gets the StorageInfo for the current thread.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.RetryOrCreateStorageInfo(Microsoft.Scripting.Utils.ThreadLocal{`0}.StorageInfo[])">
            <summary>
            Called when the fast path storage lookup fails. if we encountered the Empty storage 
            during the initial fast check then spin until we hit non-empty storage and try the fast 
            path again.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ThreadLocal`1.CreateStorageInfo">
            <summary>
            Creates the StorageInfo for the thread when one isn't already present.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ThreadLocal`1.Value">
            <summary>
            Gets or sets the value for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ThreadLocal`1.StorageInfo">
            <summary>
            Helper class for storing the value.  We need to track if a ManagedThreadId
            has been re-used so we also store the thread which owns the value.
            </summary>
        </member>
        <member name="M:System.Dynamic.Utils.TypeUtils.GetBooleanOperator(System.Type,System.String)">
            <summary>
            Searches for an operator method on the type. The method must have
            the specified signature, no generic arguments, and have the
            SpecialName bit set. Also searches inherited operator methods.
            
            NOTE: This was designed to satisfy the needs of op_True and
            op_False, because we have to do runtime lookup for those. It may
            not work right for unary operators in general.
            </summary>
        </member>
        <member name="M:System.Dynamic.Utils.TypeUtils.MatchesArgumentTypes(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Returns true if the method's parameter types are reference assignable from
            the argument types, otherwise false.
            
            An example that can make the method return false is that 
            typeof(double).GetMethod("op_Equality", ..., new[] { typeof(double), typeof(int) })
            returns a method with two double parameters, which doesn't match the provided
            argument types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Dynamic.Utils.TypeUtils.CanCache(System.Type)">
            <summary>
            We can cache references to types, as long as they aren't in
            collectable assemblies. Unfortunately, we can't really distinguish
            between different flavors of assemblies. But, we can at least
            create a whitelist for types in mscorlib (so we get the primitives)
            and System.Core (so we find Func/Action overloads, etc).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Create(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Creates a new ReflectedCaller which can be used to quickly invoke the provided MethodInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.TryGetParameterOrReturnType(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            Gets the next type or null if no more types are available.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.SlowCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Uses reflection to create new instance of the appropriate ReflectedCaller
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.FastCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Fast creation works if we have a known primitive types for the entire
            method siganture.  If we have any non-primitive types then FastCreate
            falls back to SlowCreate which works for all types.
            
            Fast creation is fast because it avoids using reflection (MakeGenericType
            and Activator.CreateInstance) to create the types.  It does this through
            calling a series of generic methods picking up each strong type of the
            signature along the way.  When it runs out of types it news up the 
            appropriate CallInstruction with the strong-types that have been built up.
            
            One relaxation is that for return types which are non-primitive types
            we can fallback to object due to relaxed delegates.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.ArgumentCount">
            <summary>
            The number of arguments including "this" for instance methods.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.GotoInstruction">
            <summary>
            This instruction implements a goto expression that can jump out of any expression. 
            It pops values (arguments) from the evaluation stack that the expression tree nodes in between 
            the goto expression and the target label node pushed and not consumed yet. 
            A goto expression can jump into a node that evaluates arguments only if it carries 
            a value and jumps right after the first argument (the carried value will be used as the first argument). 
            Goto can jump into an arbitrary child of a BlockExpression since the block doesn�t accumulate values 
            on evaluation stack as its child expressions are being evaluated.
            
            Goto needs to execute any finally blocks on the way to the target label.
            <example>
            { 
                f(1, 2, try { g(3, 4, try { goto L } finally { ... }, 6) } finally { ... }, 7, 8)
                L: ... 
            }
            </example>
            The goto expression here jumps to label L while having 4 items on evaluation stack (1, 2, 3 and 4). 
            The jump needs to execute both finally blocks, the first one on stack level 4 the 
            second one on stack level 2. So, it needs to jump the first finally block, pop 2 items from the stack, 
            run second finally block and pop another 2 items from the stack and set instruction pointer to label L.
            
            Goto also needs to rethrow ThreadAbortException iff it jumps out of a catch handler and 
            the current thread is in "abort requested" state.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EnterFinallyInstruction">
            <summary>
            The first instruction of finally block.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveFinallyInstruction">
            <summary>
            The last instruction of finally block.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction">
            <summary>
            The last instruction of a catch exception handler.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveFaultInstruction">
            <summary>
            The last instruction of a fault exception handler.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DynamicSplatInstruction">
            <summary>
            Implements dynamic call site with many arguments. Wraps the arguments into <see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.SetDebugCookie(System.Object)">
            <summary>
            Attaches a cookie to the last emitted instruction.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.GroupStackFrames(System.Collections.Generic.IEnumerable{System.Diagnostics.StackFrame})">
            <summary>
            A single interpreted frame might be represented by multiple subsequent Interpreter.Run CLR frames.
            This method filters out the duplicate CLR frames.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.Interpreter">
            <summary>
            A simple forth-style stack machine for executing Expression trees
            without the need to compile to IL and then invoke the JIT.  This trades
            off much faster compilation time for a slower execution performance.
            For code that is only run a small number of times this can be a 
            sweet spot.
            
            The core loop in the interpreter is the RunInstructions method.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Interpreter.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>
            Runs instructions within the given frame.
            </summary>
            <remarks>
            Interpreted stack frames are linked via Parent reference so that each CLR frame of this method corresponds 
            to an interpreted stack frame in the chain. It is therefore possible to combine CLR stack traces with 
            interpreted stack traces by aligning interpreted frames to the frames of this method.
            Each group of subsequent frames of Run method corresponds to a single interpreted frame.
            </remarks>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightCompiler.ParameterVisitor._shadowedVars">
            <summary>
            A stack of variables that are defined in nested scopes. We search
            this first when resolving a variable in case a nested scope shadows
            one of our variable instances.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightDelegateCreator">
            <summary>
            Manages creation of interpreted delegates. These delegates will get
            compiled if they are executed often enough.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.CreateCompiledDelegate(System.Runtime.CompilerServices.StrongBox{System.Object}[])">
            <summary>
            Used by LightLambda to get the compiled delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.Compile(System.Object)">
            <summary>
            Create a compiled delegate for the LightLambda, and saves it so
            future calls to Run will execute the compiled code instead of
            interpreting.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightDelegateCreator.SameDelegateType">
            <summary>
            true if the compiled delegate has the same type as the lambda;
            false if the type was changed for interpretation.
            </summary>
        </member>
        <member name="E:Microsoft.Scripting.Interpreter.LightLambda.Compile">
            <summary>
            Provides notification that the LightLambda has been compiled.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor">
            <summary>
            Visits a LambdaExpression, replacing the constants with direct accesses
            to their StrongBox fields. This is very similar to what
            ExpressionQuoter does for LambdaCompiler.
            
            Also inserts debug information tracking similar to what the interpreter
            would do.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._closureVars">
            <summary>
            Local variable mapping.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._closureArray">
            <summary>
            The variable that holds onto the StrongBox{object}[] closure from
            the interpreter
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._shadowedVars">
            <summary>
            A stack of variables that are defined in nested scopes. We search
            this first when resolving a variable in case a nested scope shadows
            one of our variable instances.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor.BindLambda(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.LocalVariable})">
            <summary>
            Walks the lambda and produces a higher order function, which can be
            used to bind the lambda to a closure array from the interpreter.
            </summary>
            <param name="lambda">The lambda to bind.</param>
            <param name="closureVariables">Variables which are being accessed defined in the outer scope.</param>
            <returns>A delegate that can be called to produce a delegate bound to the passed in closure array.</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor.MergedRuntimeVariables">
            <summary>
            Provides a list of variables, supporing read/write of the values
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.CopyLocals">
            <summary>
            Gets a copy of the local variables which are defined in the current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.ContainsVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Checks to see if the given variable is defined within the current local scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariables.ClosureVariables">
            <summary>
            Gets the variables which are defined in an outer scope and available within the current scope.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalVariables.VariableScope">
            <summary>
            Tracks where a variable is defined and what range of instructions it's used in
            </summary>
        </member>
        <member name="T:InRule.Runtime.IRuleExecutionContext">
            <summary>
            Provides global access to runtime execution information
            </summary>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.GetEntity(System.String)">
            <summary>
            Returns a reference to the entity identified by the input parameter.
            </summary>
            <param name="elementIdentifierOrInstanceId">The element identifier or instance Id for the <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> to return.</param>
            <returns>The requested entity, or null if no match found</returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.GetElement(System.String)">
            <summary>
            Returns a reference to the element identified by the input parameter.
            </summary>
            <param name="elementId">The element identifier for the <see cref="T:InRule.Runtime.Element"/> to return.</param>
            <returns>The requested element.</returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.CreateEntity(System.String)">
            <summary>
            Returns a reference to a newly created <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> instance.
            </summary>
            <param name="entityName">Name of the entity to create</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.CreateEntity(System.String,System.String)">
            <summary>
            Returns a reference to a newly created <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> instance, optionally bound.
            </summary>
            <param name="entityName">Name of the entity to create</param>
            <param name="assemblyQualifiedBoundTypeName">Fully qualified type name for the bound object of this <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> instance, or null if no explicit bound type</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.RemoveEntity(System.String)">
            <summary>
            Removes the referenced <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> from the session; any existing references are nulled out.
            </summary>
            <param name="elementId">The element identifier for the <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> to remove.</param>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.CreateIndependentRuleSet(System.String)">
            <summary>
            Creates a <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/> instance for the specified independent ruleset.
            </summary>
            <param name="ruleSetName">The name of the ruleset to create</param>
            <returns>The initialized <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/></returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.GetNotifications(System.Boolean)">
            <summary>
            Returns the collection of <see cref="T:InRule.Runtime.Notification"/>s for this session.
            </summary>
            <param name="activeOnly">True to return only active <see cref="T:InRule.Runtime.Notification"/>s, false to return all</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.GetValidations(System.Boolean)">
            <summary>
            Returns the collection of <see cref="T:InRule.Runtime.Validation"/>s for this session.
            </summary>
            <param name="activeOnly">True to return only active <see cref="T:InRule.Runtime.Validation"/>s, false to return all</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.ActivateRuleSetsByCategory(System.String)">
            <summary>
            Activates all <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/>s associated with the specified category.
            </summary>
            <param name="category">The category to activate.</param>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.DeactivateRuleSetsByCategory(System.String)">
            <summary>
            Deactivates all <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/>s associated with the specified category.
            </summary>
            <param name="category">The category to deactivate.</param>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.ActivateRuleSets(System.String)">
            <summary>
            Activates all <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/>s specified by the ruleSetPath parameter.
            </summary>
            <param name="ruleSetPath">
            A non-instance-based path that uniquely identifies the ruleset instances to activate.
             For example, the path "/Entity1/RuleSet1" will activate RuleSet1 on all current instances of Entity1 configured in state.
            </param>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.DeactivateRuleSets(System.String)">
            <summary>
            Deactivates all <see cref="P:InRule.Runtime.IRuleExecutionContext.RuleSet"/>s specified by the ruleSetPath parameter.
            </summary>
            <param name="ruleSetPath">
            A non-instance-based path that uniquely identifies the ruleset instances to activate.
             For example, the path "/Entity1/RuleSet1" will deactivate RuleSet1 on all current instances of Entity1 configured in state.
            </param>
        </member>
        <member name="M:InRule.Runtime.IRuleExecutionContext.GetEntities">
            <summary>
            Returns the collection of <see cref="P:InRule.Runtime.IRuleExecutionContext.Entity"/> instances for this session.
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.RuleApplication">
            <summary>
            The currently-executing RuleApplicationDef
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.Calc">
            <summary>
            The currently-executing calc field (null if running under a rule)
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.RuleElement">
            <summary>
            The currently-executing rule element (null if running in a calc)
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.SchemaElement">
            <summary>
            The schema element under which the current UDF or workflow is executing (null if under independent ruleset)
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.Entity">
            <summary>
            The Entity under which the current UDF or workflow is executing (null if under independent ruleset)
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.RuleSet">
            <summary>
            The ruleset in which the current UDF or workflow is executing (null if running in a calc)
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.ContextProperties">
            <summary>
            Provides a key-value dictionary for session-durable metadata storage
            </summary>
        </member>
        <member name="P:InRule.Runtime.IRuleExecutionContext.FunctionLibraries">
            <summary>
            Returns a dynamic collection of external function libraries configured on the enclosing rule application.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.GlobalScope">
            <summary>
            Global scope for tracking Expression visibility during parsing
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.MethodScope">
            <summary>
            Method scope for tracking Expression visibility during parsing
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.ExpressionScope">
            <summary>
            Scope for tracking Expression visibility during parsing
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceLocation">
            <summary>
            Represents a location in source code.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new source location.
            </summary>
            <param name="index">The index in the source stream the location represents (0-based).</param>
            <param name="line">The line in the source stream the location represents (1-based).</param>
            <param name="column">The column in the source stream the location represents (1-based).</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Equality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if they are equal.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the locations are the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Inequality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if they are not equal.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the locations are not the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is before the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is before the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is after the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is after the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is before or the same as the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is before or the same as the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is after or the same as the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is after or the same as the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.Compare(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>0 if the locations are equal, -1 if the left one is less than the right one, 1 otherwise.</returns>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.None">
            <summary>
            A location that is valid but represents no location at all.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.Invalid">
            <summary>
            An invalid location.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.MinValue">
            <summary>
            A minimal valid location.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Index">
            <summary>
            The index in the source stream the location represents (0-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Line">
            <summary>
            The line in the source stream the location represents (1-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Column">
            <summary>
            The column in the source stream the location represents (1-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.IsValid">
            <summary>
            Whether the location is a valid location.
            </summary>
            <returns>True if the location is valid, False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Scripting.SourceSpan">
            <summary>
            Stores the location of a span of text in a source file.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.#ctor(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Constructs a new span with a specific start and end location.
            </summary>
            <param name="start">The beginning of the span.</param>
            <param name="end">The end of the span.</param>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.None">
            <summary>
            A valid span that represents no location.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.Invalid">
            <summary>
            An invalid span.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Equality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>
            Compares two specified Span values to see if they are equal.
            </summary>
            <param name="left">One span to compare.</param>
            <param name="right">The other span to compare.</param>
            <returns>True if the spans are the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Inequality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>
            Compares two specified Span values to see if they are not equal.
            </summary>
            <param name="left">One span to compare.</param>
            <param name="right">The other span to compare.</param>
            <returns>True if the spans are not the same, False otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Start">
            <summary>
            The start location of the span.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.End">
            <summary>
            The end location of the span. Location of the first character behind the span.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Length">
            <summary>
            Length of the span (number of characters inside the span).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.IsValid">
            <summary>
            Whether the locations in the span are valid.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.ScriptCompiler">
            <summary>
            An instance of this class represents a single script compilation/execution cycle
            </summary>
        </member>
        <member name="T:InRule.Runtime.Scripting.ScriptObjectFactory">
            <summary>
            ScriptObjectFactory is a helper API for creating new ScriptObject (unbound state) in external assemblies, during engine execution
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Add(System.Object)">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item into this collection at the specified index.
             If the specified index exceeds the current collection bounds, null values are added up to the point of insertion.
            </summary>
            <param name="index">The index as which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.RemoveAt(System.Int32)">
            <summary>
            Removes from the collection the item at the specified index.
            </summary>
            <param name="index">The index at which the removal occurs.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Clear">
            <summary>
            Clears all elements from this collection.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the elements from the incoming collection to the end of this collection.
            </summary>
            <param name="items">The incoming collection whose members will be added.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.InsertRange(System.Int32,System.Object[])">
            <summary>
            Inserts the elements from the incoming collection at the specified index in this collection.
             If the specified index exceeds the current collection bounds, null values are added up to the point of insertion.
            </summary>
            <param name="index">The index at which to perform the insertion.</param>
            <param name="items">The incoming collection whose members will be inserted.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous set of elements from this collection.
            </summary>
            <param name="index">The index at which to begin the removal.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Push(System.Object)">
            <summary>
            Stack operation that inserts an item at index 0 of this collection.
             This is a convenience method identical to Insert( 0, item )
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Pop">
            <summary>
            Stack operation that removes and returns the item at index 0 from this collection.
             This is a convenience method identical to RemoveAt( 0 )
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Enqueue(System.Object)">
            <summary>
            Queue operation that adds an item at index 0 of this collection.
             This is a convenience method identical to Insert( 0, item )
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.ICollectionMetaObject.Dequeue">
            <summary>
            Queue operation that removes and returns the last item from this collection.
             This is a convenience method identical to RemoveAt( myCollection.Count - 1 )
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.ForEach(System.Action{System.Object})">
            <summary>
            Performs a specified operation against each member of the collection.
            
            <code>
            myCollection.ForEach( function( item ) { item.SomeProperty = false; } );
            </code>
            
            </summary>
            <param name="operation">A function defining the operation; accepts the collection item as the lone parameter.</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.ForEach(System.Action{System.Int32,System.Object})">
            <summary>
            Performs a specified operation against each member of the collection.
            
            <code>
            myCollection.ForEach( function( index, item ) { if ( index &lt; 10 ) { item *= 3; } } );
            </code>
            
            </summary>
            <param name="operation">A function defining the operation; accepts two parameters (the collection item index and the collection item).</param>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Reverse">
            <summary>
            Returns a new collection containing the original collection elements in reverse order;
             the original collection is unchanged.
            </summary>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Filter(System.Func{System.Object,System.Boolean})">
            <summary>
            Returns a new collection containing elements from the original collection that match a filter function.
            
            <code>
            var filtered = myCollection.Filter( function ( item )
            {
                return item.Name == 'Fred';
            } );
            </code>
            
            </summary>
            <param name="criteria">The filter function; accepts a single parameter (the collection item) and returns a boolean result.</param>
            <returns>The new collection</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InRule.Runtime.Scripting.IEnumerableMetaObject.Filter(System.Func{System.Int32,System.Object,System.Boolean})" -->
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Transform(System.Func{System.Object,System.Object})">
            <summary>
            Returns a new collection containing elements from the original collection transformed by the input function.
            
            <code>
            var allAges = myCollection.Transform( function ( item )
            {
                return item.Age;
            } );
            </code>
            
            </summary>
            <param name="func">The transform function; accepts a single parameter (the collection item) and returns a result value.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Transform(System.Func{System.Int32,System.Object,System.Object})">
            <summary>
            Returns a new collection containing elements from the original collection transformed by the input function.
            
            <code>
            var allAges = myCollection.Transform( function ( index, item )
            {
                if( index == 0 )
                {
                    return item.Age - 1;    // some special case...
                }
                else
                {
                    return item.Age;
                }
            } );
            </code>
            
            </summary>
            <param name="func">The transform function; accepts two parameters (the collection item index, and the collection item) and returns a result value.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Union(System.Collections.IEnumerable)">
            <summary>
            Returns a new collection resulting from the union of the current collection with a second one.
             The original participating collections are unchanged.
            
            <code>
            var allItems = myCollection.Union( myOtherCollection );
            </code>
            
            </summary>
            <param name="rhs">The collection to union against the target collection.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Union(System.Collections.IEnumerable,System.Func{System.Object,System.Int32})">
            <summary>
            Returns a new collection resulting from the union of the current collection with a second one.
             The original participating collections are unchanged.
            
            <code>
            var allItems = myCollection.Union( myOtherCollection, function( item )
            {
                return item.Name.Length;    // hash function for element identity...
            } );
            </code>
            
            </summary>
            <param name="rhs">The collection to union against the target collection.</param>
            <param name="comparer">A hash function applied to each element, for excluding duplicates; accepts a single parameter (the collection item) and returns an integer.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Intersect(System.Collections.IEnumerable)">
            <summary>
            Returns a new collection resulting from the intersection of the current collection with a second one.
             The original participating collections are unchanged.
            
            <code>
            var commonItems = myCollection.Intersect( myOtherCollection );
            </code>
            
            </summary>
            <param name="rhs">The collection to intersect against the target collection.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.Intersect(System.Collections.IEnumerable,System.Func{System.Object,System.Int32})">
            <summary>
            Returns a new collection resulting from the intersection of the current collection with a second one.
             The original participating collections are unchanged.
            
            <code>
            var commonItems = myCollection.Intersect( myOtherCollection, function( item )
            {
                return item.Name.Length;    // hash function for element identity...
            } );
            </code>
            
            </summary>
            <param name="rhs">The collection to intersect against the target collection.</param>
            <param name="comparer">A hash function applied to each element, for determining equality; accepts a single parameter (the collection item) and returns an integer.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.GetRange(System.Int64,System.Int64)">
            <summary>
            Returns a new collection consisting of a subset of elements of the current collection.
             The original collection is unchanged.
             
            <code>
            var subset = myCollection.GetRange( 0, 3 );
            </code>
            
            </summary>
            <param name="index">The zero-based starting index of the subset to return.</param>
            <param name="count">The maximum number of elements to return (will return fewer if requested subset exceeds the bounds of the collection).</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.TrueForAll(System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether all elements of the collection match a specified predicate function.
            
            <code>
            var allAreBlue = myCollection.TrueForAll( function( item )
            {
                return item.Color == "Blue";
            } );
            </code>
            
            </summary>
            <param name="predicate">The function against which element is evaluated; accepts a single parameter (the collection item) and returns a boolean value.</param>
            <returns>True if all elements return true from the predicate function; else false</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.TrueForAll(System.Func{System.Int32,System.Object,System.Boolean})">
            <summary>
            Determines whether all elements of the collection match a specified predicate function.
            
            <code>
            var allAreBlueOrRed = myCollection.TrueForAll( function( index, item )
            {
                if( index &gt; 5 )
                {
                    return item.Color == "Blue";
                }
                else
                {
                    return item.Color == "Red";
                }
            } );
            </code>
            
            </summary>
            <param name="predicate">The function against which element is evaluated; accepts two parameters (the collection item index, and the collection item) and returns a boolean value.</param>
            <returns>True if all elements return true from the predicate function; else false</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.TrueForAny(System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any elements of the collection match a specified predicate function.
            
            <code>
            var anyAreBlue = myCollection.TrueForAny( function( item )
            {
                return item.Color == "Blue";
            } );
            </code>
            
            </summary>
            <param name="predicate">The function against which element is evaluated; accepts a single parameter (the collection item) and returns a boolean value.</param>
            <returns>True if any elements return true from the predicate function; else false</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.TrueForAny(System.Func{System.Int32,System.Object,System.Boolean})">
            <summary>
            Determines whether any elements of the collection match a specified predicate function.
            
            <code>
            var anyAreBlueOrRed = myCollection.TrueForAny( function( index, item )
            {
                if( index &gt; 5 )
                {
                    return item.Color == "Blue";
                }
                else
                {
                    return item.Color == "Red";
                }
            } );
            </code>
            
            </summary>
            <param name="predicate">The function against which element is evaluated; accepts two parameters (the collection item index, and the collection item) and returns a boolean value.</param>
            <returns>True if any elements return true from the predicate function; else false</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.OrderBy(System.Func{System.Object,System.Object})">
            <summary>
            Returns a new collection consisting of elements from the current collection, ordered by a key generated for each element.
            
            <code>
            var inOrder = myCollection.OrderBy( function( item )
            {
                return item.AccountNumber;
            } );
            </code>
            
            </summary>
            <param name="keyGenerator">A function that generates a key by which the ordering is performed; takes a single parameter (the collection item) and returns the key value.</param>
            <returns>The new collection</returns>
        </member>
        <member name="M:InRule.Runtime.Scripting.IEnumerableMetaObject.OrderBy(System.Func{System.Object,System.Object},System.Func{System.Object,System.Object,System.Int32})">
            <summary>
            Returns a new collection consisting of elements from the current collection, ordered by a key generated for each element.
            
            <code>
            var keyGen = function ( item ) { return item.CustomerRecord; };
            
            var keyCompare = function ( item1, item2 )
                {
                    if( item1.CustomerId &gt; item2.CustomerId )
                    {
                        return 1;
                    }
                    else if ( item2.CustomerId &gt; item1.CustomerId )
                    {
                        return -1;
                    }
                    else
                    {
                        return 0;
                    }
                };
            
            var inOrder = myCollection.OrderBy( keyGen, keyCompare );
            </code>
            
            </summary>
            <param name="keyGenerator">A function that generates a key by which the ordering is performed; takes a single parameter (the collection item) and returns the key value.</param>
            <param name="keyComparer">A function that compares two keys (generated by keyGenerator) and determines equality; accepts two parameters (the key values to be compared) and returns 1 if first is greater, -1 if second is greater, or 0 if equal.</param>
            <returns>The new collection</returns>
        </member>
        <member name="P:InRule.Runtime.Scripting.IEnumerableMetaObject.Count">
            <summary>
            Returns the number of items in this collection.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Scripting.ScriptFunction.ArgumentCount">
            <summary>
            Includes the leading 'this' parameter present for all ScriptFunctions
            </summary>
        </member>
        <member name="T:InRule.Runtime.EngineException">
            <summary>
            Exception type used to track errors and their locations in rule/schema hierarchy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.Internal.GetFieldElementReferenceFunction">
            <summary>
            Returns an StateElementBase for the container/info combination
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Schema.WalkContainerFunction.MakeStaticTreeForRing(InRule.Repository.Infos.IContainerInfo,InRule.Runtime.Engine.Compiler.FunctionCompileContext,System.Int32)">
            <summary>
            Creates the static execution tree for a given ring on the container
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Schema.Instrument_LogExecuteRuleElement_PipelineExecutionHandler">
            <summary>
            Wraps an inner delegate with a instrumentation and logging
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Schema.WalkContainerFunction_ExecutionHandler">
            <summary>
            Runtime handler for executing walk container function
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Schema.WalkContainerFunction_ExecutionHandler.Execute(InRule.Runtime.Engine.State.StateContainer,InRule.Runtime.Engine.Dependencies.DependencyScope,System.Int64,InRule.Runtime.Engine.IValueStack)">
            <summary>
            An instance of this delegate is returned from the GetDirectExecuteDelegate request
            </summary>
            <param name="container"></param>
            <param name="scope"></param>
            <param name="frameId"></param>
            <param name="valueStack"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ChrFunction">
            <summary>
            <cultureAware>No: N/A</cultureAware>
            <nullHandling>Yes: Numeric expression is cast to an Int32. null -> 0</nullHandling>
            <performance>Medium: Performs initial range check using expressions, and calls System.Convert.ToChar() delegate if valid.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ConcatFunction">
            <summary>
            <cultureAware>No: N/A</cultureAware>
            <nullHandling>Yes: Function uses String.Join(), which handles null values in the string array</nullHandling>
            <performance>Medium: Calls System.String.Join() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.FormatFunction">
            <summary>
            <cultureAware>Yes: Format transformations are culture-specific</cultureAware>
            <nullHandling>Yes: Value expressions are first cast to either Decimal or DateTime, so null -> 0.
              If format expression is null, the Value expression is returned unchanged.</nullHandling>
            <performance>Medium: Calls either System.Decimal.ToString() or System.DateTime.ToString() delegates.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.HasWhitespaceFunction">
            <summary>
            <cultureAware>No: We are assuming that checking for the existance of whitespace (leading, trailing and duplicates) is not dependent on culture.</cultureAware>
            <nullHandling>Yes: Value expression has an explicit null check.</nullHandling>
            <performance>Medium: Calls into static method to perform single iteration of char array, giving O(n) performance.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.InstrFunction">
            <summary>
            <cultureAware>Yes: Uses culture-specific System.Globalization.CompareInfo.</cultureAware>
            <nullHandling>Yes: Null checking on both args: null -> String.Empty.</nullHandling>
            <performance>Medium: Calls CultureInfo.CurrentCulture.CompareInfo.IndexOf() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.IsWildcardMatchFunction">
            <summary>
            <cultureAware>Partial: Does not honor string culture settings (Neither does InRule3.x).  Uses ordinal compare of each character using Char.Equals(). 
            This behavior needs to be evaluated and is tracked in backlog task #20304. Partial because the case-insensitive check uses culture-specific Char.ToUpper().</cultureAware>
            <nullHandling>Yes: Explicit null checks on both value and pattern.</nullHandling>
            <performance>Medium: Calls into either case-sensitive or case-insensitive static methods to perform single iteration of both char arrays
            giving O(n) performance on size of pattern string.  Case-insensitive version performs culture-specific Char.ToUpper() on each character comparison,
            although this is ~15 times slower than the case-sensitive version.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.LeftFunction">
            <summary>
            <cultureAware>No: N/A.</cultureAware>
            <nullHandling>Yes: Explicit null check on value expression.  NumChars arg is cast to Decimal, so null -> 0.</nullHandling>
            <performance>Medium: Calls String.SubString() delegate. Includes bounds checking on both arg inputs like InRule3.x function.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.LengthFunction">
            <summary>
            <cultureAware>No: N/A.</cultureAware>
            <nullHandling>Yes: Explicit null check on value expression.</nullHandling>
            <performance>Medium: Calls String.Length delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.MidFunction">
            <summary>
            <cultureAware>No: N/A.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty, and start+length params are cast to Int32: null -> 0.</nullHandling>
            <performance>Medium: Performs null and range checks and calls String.SubString() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ProperCaseFunction">
            <summary>
            <cultureAware>Yes: TextInfo.ToTitleCase() function used is sourced from the current CultureInfo object.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty.</nullHandling>
            <performance>Medium: Performs null check and calls CultureInfo.TextInfo.ToTitleCase(value.ToLower()) delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ReplaceFunction">
            <summary>
            <cultureAware>No: Uses String.Replace() function which uses an ordinal, case-sensitive string comparer.</cultureAware>
            <nullHandling>Yes: Explicit null check on input values: null -> String.Empty.</nullHandling>
            <performance>Medium: Performs null checks and calls String.Replace() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.RightFunction">
            <summary>
            <cultureAware>No: N/A.</cultureAware>
            <nullHandling>Yes: Explicit null check on value expression.  NumChars arg is cast to Decimal, so null -> 0.</nullHandling>
            <performance>Medium: Calls String.SubString() delegate. Includes bounds checking on both arg inputs like InRule3.x function.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ToLowerFunction">
            <summary>
            <cultureAware>Yes: Uses String.ToLower() which is culture-specific.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty.</nullHandling>
            <performance>Medium: Performs null check and calls String.ToLower() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.ToUpperFunction">
            <summary>
            <cultureAware>Yes: Uses String.ToUpper() which is culture-specific.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty.</nullHandling>
            <performance>Medium: Performs null check and calls String.ToUpper() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.TrimFunction">
            <summary>
            <cultureAware>No: Other than following whitespace rules from Char.IsWhitespace() that applies to all cultures.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty.</nullHandling>
            <performance>Medium: Performs null check and calls String.Trim() delegate.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.SyntaxFunctions.String.TrimWhitespaceFunction">
            <summary>
            <cultureAware>No: Other than following whitespace rules from Char.IsWhitespace() that applies to all cultures.</cultureAware>
            <nullHandling>Yes: Explicit null check on input value: null -> String.Empty.</nullHandling>
            <performance>Medium: Calls into static method to perform single iteration of char array, giving O(n) performance.</performance>
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase">
            <summary>
                OAuth Code from OAuth.net
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
                Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GetParameters(System.String)">
            <summary>
                Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.UrlEncode(System.String)">
            <summary>
                This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
                While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.IList{InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameter})">
            <summary>
                Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameter},System.String@,System.String@)">
            <summary>
                Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">
                The signature type. To use the default values use <see cref="T:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.SignatureTypes">OAuthBase.SignatureTypes</see>.
            </param>
            <returns>The signature base</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
                Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameter},System.String@,System.String@)">
            <summary>
                Generates a signature using the HMAC-SHA1 algorithm
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.SignatureTypes,System.Collections.Generic.List{InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameter},System.String@,System.String@)">
            <summary>
                Generates a signature using the specified signatureType
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateTimeStamp">
            <summary>
                Generate the timestamp for the signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.GenerateNonce">
            <summary>
                Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.SignatureTypes">
            <summary>
                Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameter">
            <summary>
                Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Logic.Actions.Http.AuthenticationProviders.OAuth1AuthenticationProvider.OAuthBase.QueryParameterComparer">
            <summary>
                Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityStateType">
            <summary>
            Supported string formats that entity can be serialized to or deserialized from.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EntityStateType.Xml">
            <summary>
            Instructs the engine to treat the provided string as XML.
            </summary>
        </member>
        <member name="F:InRule.Runtime.EntityStateType.Json">
            <summary>
            Instructs the engine to treat the provided string as JSON.
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleSession">
            <summary>
            RuleSession is the main point of interaction with the InRule rule engine.
            It provides methods to configure state, execute rules, and examine execution results.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(InRule.Runtime.RuleApplicationReference,InRule.Runtime.CacheRetention)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided <see cref="T:InRule.Runtime.RuleApplicationReference"/> and <see cref="T:InRule.Runtime.CacheRetention"/> policy.
            </summary>
            <param name="ruleApplicationReference">A reference to the rule application to use for execution.</param>
            <param name="cacheRetention">The desired rule application caching policy.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(InRule.Runtime.RuleApplicationReference)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided <see cref="T:InRule.Runtime.RuleApplicationReference"/>.
            </summary>
            <param name="ruleApplicationReference">A reference to the rule application to use for execution.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided path to a <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="ruleApplicationDefPath">A file system path to the desired <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(System.String,InRule.Runtime.CacheRetention)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided path to a <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="ruleApplicationDefPath">A file system path to the desired <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <param name="cacheRetention">The desired rule application caching policy.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(InRule.Repository.RuleApplicationDef)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided <see cref="T:InRule.Repository.RuleApplicationDef"/>.
             The resulting compiled rule application is not cached in the AppDomain-wide <see cref="P:InRule.Runtime.RuleSession.RuleApplicationCache"/>.
            </summary>
            <param name="ruleApplication">A reference to the rule application to be used for execution.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.#ctor(InRule.Repository.RuleApplicationDef,InRule.Runtime.CacheRetention)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.RuleSession"/> instance using the provided <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="ruleApplication">A reference to the rule application to be used for execution.</param>
            <param name="cacheRetention">The desired rule application caching policy.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.Dispose">
            <summary>
            Cleans up resources used by this <see cref="T:InRule.Runtime.RuleSession"/> instance.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetRuleApplicationDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.RuleApplicationDef"/> that was used to instantiate the <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The source <see cref="T:InRule.Repository.RuleApplicationDef"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateEntity(System.String)">
            <summary>
            Creates and returns a new <see cref="T:InRule.Runtime.Entity"/> of the specified type.
             The configured <see cref="T:InRule.Runtime.BoundStateSettings"/> determine choice of unbound or bound state.
            </summary>
            <param name="entityName">Name of the entity type to create and return</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateEntity(System.String,System.String)">
            <summary>
            Creates and returns a new <see cref="T:InRule.Runtime.Entity"/> of the specified type, initialized with the provided XML.
             The configured <see cref="T:InRule.Runtime.BoundStateSettings"/> determine choice of unbound or bound state.
            </summary>
            <param name="entityName">Name of the entity type to create and return</param>
            <param name="entityState">The set of field and collection values used for initialization</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateEntity(System.String,System.String,InRule.Runtime.EntityStateType)">
            <summary>
            Creates and returns a new <see cref="T:InRule.Runtime.Entity"/> of the specified type, initialized with the provided XML or JSON.
             The configured <see cref="T:InRule.Runtime.BoundStateSettings"/> determine choice of unbound or bound state.
            </summary>
            <param name="entityName">Name of the entity type to create and return</param>
            <param name="entityState">The set of field and collection values used for initialization</param>
            <param name="stateType">Specifies if the entity state is XML or JSON</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateEntity(System.String,System.Object)">
            <summary>
            Creates and returns a new bound <see cref="T:InRule.Runtime.Entity"/> of the specified type, using the provided state object.
             The configured <see cref="T:InRule.Runtime.BoundStateSettings"/> determine choice of unbound or bound state.
            </summary>
            <param name="entityName">Name of the entity type to create and return</param>
            <param name="boundValue">The state object bound to the newly created <see cref="T:InRule.Runtime.Entity"/></param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateEntity(System.String,System.Object,InRule.Runtime.EntityStateType)">
            <summary>
            Creates and returns a new bound <see cref="T:InRule.Runtime.Entity"/> of the specified type, using the provided state object.
             The configured <see cref="T:InRule.Runtime.BoundStateSettings"/> determine choice of unbound or bound state.
            </summary>
            <param name="entityName">Name of the entity type to create and return</param>
            <param name="boundValue">The state object bound to the newly created <see cref="T:InRule.Runtime.Entity"/></param>
            <param name="stateType">Specifies if the entity state is XML or JSON</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetElement(System.String)">
            <summary>
            Returns a state element (<see cref="T:InRule.Runtime.Field"/>, <see cref="T:InRule.Runtime.Collection"/>, etc.) corresponding to the provided elementIdentifier.
            </summary>
            <param name="elementIdentifier">A formatted string uniquely identifying the requested value</param>
            <returns>The requested <see cref="T:InRule.Runtime.Element"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetEntity(System.String)">
            <summary>
            Returns an <see cref="T:InRule.Runtime.Entity"/> corresponding to the provided argument.
            </summary>
            <param name="elementIdentifierOrInstanceId">A formatted element identifier or guid uniquely identifying the requested <see cref="T:InRule.Runtime.Entity"/></param>
            <returns>The requested <see cref="T:InRule.Runtime.Entity"/>, or null if none found</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetEntities">
            <summary>
            Returns a collection of all <see cref="T:InRule.Runtime.Entity"/> instances active in this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The collection of <see cref="T:InRule.Runtime.Entity"/> instances</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.RemoveEntity(System.String)">
            <summary>
            Removes the specified <see cref="T:InRule.Runtime.Entity"/> from this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <param name="elementIdentifierOrInstanceId">A formatted element identifier or guid uniquely identifying the <see cref="T:InRule.Runtime.Entity"/> to remove</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.CreateIndependentRuleSet(System.String)">
            <summary>
            Creates an independent <see cref="T:InRule.Runtime.RuleSet"/> instance for the specified independent ruleset.
            </summary>
            <param name="ruleSetName">The name of the ruleset to create</param>
            <returns>The initialized <see cref="T:InRule.Runtime.RuleSet"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetIndependentRuleSet(System.String)">
            <summary>
            Returns an independent <see cref="T:InRule.Runtime.RuleSet"/> corresponding to the provided identifier.
            </summary>
            <param name="ruleSetId">A formatted element identifier uniquely identifying the requested <see cref="T:InRule.Runtime.RuleSet"/></param>
            <returns>The requested <see cref="T:InRule.Runtime.RuleSet"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetIndependentRuleSets">
            <summary>
            Returns a collection of all independent <see cref="T:InRule.Runtime.RuleSet"/> instances active in this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The collection of independent <see cref="T:InRule.Runtime.RuleSet"/> instances</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.RemoveIndependentRuleSet(System.String)">
            <summary>
            Removes the specified independent <see cref="T:InRule.Runtime.RuleSet"/> from this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <param name="ruleSetId">A formatted element identifier uniquely identifying the <see cref="T:InRule.Runtime.RuleSet"/> to remove</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ApplyRules">
            <summary>
            Executes rules against the state configured for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The <see cref="T:InRule.Runtime.RuleExecutionLog"/> created for this request</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ExecuteIndependentRuleSet(System.String,System.Object[])">
            <summary>
            Executes the specified independent ruleset, with the specified arguments, against this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <param name="ruleSetName">The independent ruleset to execute</param>
            <param name="arguments">An optional set of arguments to use for ruleset execution</param>
            <returns>The <see cref="T:InRule.Runtime.RuleExecutionLog"/> created for this request</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetNotifications">
            <summary>
            Retrieves the collection of <see cref="T:InRule.Runtime.Notification"/>s generated for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The collection of <see cref="T:InRule.Runtime.Notification"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetNotifications(System.Boolean)">
            <summary>
            Retrieves the collection of <see cref="T:InRule.Runtime.Notification"/>s generated for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <param name="activeOnly">An optional argument specifying whether to retrieve only active <see cref="T:InRule.Runtime.Notification"/>s, or both active and inactive ones</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Notification"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetValidations">
            <summary>
            Retrieves the collection of <see cref="T:InRule.Runtime.Validation"/>s generated for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetValidations(System.Boolean)">
            <summary>
            Retrieves the collection of <see cref="T:InRule.Runtime.Validation"/>s generated for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
            <param name="activeOnly">An optional argument specifying whether to retrieve only active <see cref="T:InRule.Runtime.Validation"/>s, or both active and inactive ones</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ResetSessionState">
            <summary>
            Removes all <see cref="T:InRule.Runtime.Entity"/> instances and child state values from this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ResetWorkingMemory">
            <summary>
            Resets internal execution tracking for the rule engine, such that subsequent execution requests will re-fire rules that otherwise have reached a steady state.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.GetValue(System.String)">
            <summary>
            Retrieves a discrete value from state.
            </summary>
            <param name="elementIdentifier">An identifier for the requested state element</param>
            <returns>The requested <see cref="T:InRule.Runtime.ElementValue"/></returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.SetValue(System.String,System.Object)">
            <summary>
            Sets a discrete value in state.
            </summary>
            <param name="elementIdentifier">An identifier for the state element to set</param>
            <param name="value">The value to assign to the state element</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.RefreshBoundState">
            <summary>
            Refreshes bound state values and marks dependencies for execution. Use this method between rule executions to ensure changes made directly to bound state are seen by the engine.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ResetAllRuleSetActivations">
            <summary>
            Resets all ruleset activations to their default.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ActivateRuleSetsByCategory(System.String)">
            <summary>
            Activates all <see cref="T:InRule.Runtime.RuleSet"/>s associated with the specified category.
            </summary>
            <param name="category">The category to activate.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.DeactivateRuleSetsByCategory(System.String)">
            <summary>
            Deactivates all <see cref="T:InRule.Runtime.RuleSet"/>s associated with the specified category.
            </summary>
            <param name="category">The category to deactivate.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ActivateRuleSets(System.String)">
            <summary>
            Activates all <see cref="T:InRule.Runtime.RuleSet"/>s specified by the ruleSetPath parameter.
            </summary>
            <param name="ruleSetPath">
            A non-instance-based authoring-time path that uniquely identifies the <see cref="T:InRule.Runtime.RuleSet"/> instances to activate.
             For example, the path "Entity1.RuleSet1" will activate RuleSet1 on all current instances of Entity1 configured in state.
            </param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.DeactivateRuleSets(System.String)">
            <summary>
            Deactivates all <see cref="T:InRule.Runtime.RuleSet"/>s specified by the ruleSetPath parameter.
            </summary>
            <param name="ruleSetPath">
            A non-instance-based authoring-time path that uniquely identifies the <see cref="T:InRule.Runtime.RuleSet"/> instances to activate.
             For example, the path "Entity1.RuleSet1" will deactivate RuleSet1 on all current instances of Entity1 configured in state.
            </param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ActivateRuleSetInstance(System.String)">
            <summary>
            Activates a single <see cref="T:InRule.Runtime.RuleSet"/> instance, identified by the element identifier argument.
            </summary>
            <param name="elementIdentifier">
            The <see cref="T:InRule.Runtime.RuleSet"/> instance to activate.
             For example, the path "Entity1:1/RuleSet1" will activate RuleSet1 on the instance of Entity1:1.
            </param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.DeactivateRuleSetInstance(System.String)">
            <summary>
            Deactivates a single <see cref="T:InRule.Runtime.RuleSet"/> instance, identified by the element identifier argument.
            </summary>
            <param name="elementIdentifier">
            The <see cref="T:InRule.Runtime.RuleSet"/> instance to deactivate.
             For example, the path "Entity1:1/RuleSet1" will deactivate RuleSet1 on the instance of Entity1:1.
            </param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.ActivateAllRuleSets">
            <summary>
            Activates all the <see cref="T:InRule.Runtime.RuleSet"/>s in a ruleapp
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.DeactivateAllRuleSets">
            <summary>
            Deactivates all the <see cref="T:InRule.Runtime.RuleSet"/>s in a ruleapp
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSession.SaveState(System.String)">
            <summary>
            Saves a snapshot of the RuleSession state to a file, omitting temp field state or RuleSet activations.
            </summary>
            <param name="path">The path to the new state file. Any existing file will be overwritten.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.SaveState(System.String,System.Boolean)">
            <summary>
            Saves a snapshot of the RuleSession state to a file, optionally including temp field state and RuleSet activations.
            </summary>
            <param name="path">The path to the new state file. Any existing file will be overwritten.</param>
            <param name="includeTempFieldsAndRuleSetActivations">Specifies whether to include temp state values and RuleSet activations.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.SaveState(System.String,System.Boolean,InRule.Runtime.Element)">
            <summary>
            Saves a snapshot of the RuleSession state to a file, optionally including temp field state and RuleSet activations and an optional designated root <see cref="T:InRule.Runtime.Element"/>.
            </summary>
            <param name="path">The path to the new state file. Any existing file will be overwritten.</param>
            <param name="includeTempFieldsAndRuleSetActivations">Specifies whether to include temp state values and RuleSet activations.</param>
            <param name="rootElement">A designated root <see cref="T:InRule.Runtime.Element"/>, or null.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.SaveState(System.IO.Stream,System.Boolean,InRule.Runtime.Element)">
            <summary>
            Saves a snapshot of the RuleSession state to a stream, optionally including temp field state and RuleSet activations and an optional designated root <see cref="T:InRule.Runtime.Element"/>.
            </summary>
            <param name="stream">The output stream which will contain the RuleSession state.</param>
            <param name="includeTempFieldsAndRuleSetActivations">Specifies whether to include temp state values and RuleSet activations.</param>
            <param name="rootElement">A designated root <see cref="T:InRule.Runtime.Element"/>, or null.</param>
        </member>
        <member name="M:InRule.Runtime.RuleSession.LoadState(System.String)">
            <summary>
            Loads a snapshot of the RuleSession state from a file.
            </summary>
            <param name="path">The path to an existing state file.</param>
            <returns>The designated root <see cref="T:InRule.Runtime.Element"/> if the state file was persisted with one, otherwise null.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleSession.LoadState(System.IO.Stream)">
            <summary>
            Loads a snapshot of the RuleSession state from a stream.
            </summary>
            <param name="stream">The input stream containing the RuleSession state.</param>
            <returns>The designated root <see cref="T:InRule.Runtime.Element"/> if the state file was persisted with one, otherwise null.</returns>
        </member>
        <member name="P:InRule.Runtime.RuleSession.RuleApplicationCache">
            <summary>
            The singleton used to provide AppDomain-wide cache semantics for compiled rule applications.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Id">
            <summary>
            A unique identifier for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.RuleApplication">
            <summary>
            Returns the <see cref="T:InRule.Runtime.RuleApplicationReference"/> configured for this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Events">
            <summary>
            Exposes session-level events which fire at the conclusion of rule execution.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Settings">
            <summary>
            The compilation, logging, tracing, etc. settings used during rule execution under this <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Data">
            <summary>
            Allows runtime access to data elements.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Overrides">
            <summary>
            Allows runtime configuration of endpoints and data elements.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.ContextProperties">
            <summary>
            Key/value data store whose values are consumable from inside user-defined functions (UDFs).
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.LastRuleExecutionLog">
            <summary>
            The most recently created <see cref="T:InRule.Runtime.RuleExecutionLog"/> for this <see cref="T:InRule.Runtime.RuleSession"/>, or null if none yet exists.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Statistics">
            <summary>
            Gets cumulative performance statistics for the lifetime of the <see cref="T:InRule.Runtime.RuleSession"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSession.Status">
            <summary>
            Determine SessionStatus (Idle / Disposed / WaitingForResponse)
            </summary>
            <remarks>This property is thread-safe.</remarks>
        </member>
        <member name="M:InRule.Runtime.RuleSession.RuleSessionDebug.ApplyRulesWithDebugTraceDump">
            <summary>
            Configures the execution to use full tracing and dumps the trace frames to debug
            </summary>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.RuleSessionSettings">
            <summary>
            Provides access to settings that influence execution behavior of the rule engine.
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleSessionSettings.Copy">
            <summary>
            Returns an identical copy of this <see cref="T:InRule.Runtime.RuleSessionSettings"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.UseAuthoredTypeInformationForTempFields">
            <summary>
            Specifies whether to use authoring-time CLR type information for temp fields during creation of their associated values.
             Set this to false when using XElement binding to ensure temp fields ignore any authoring-time CLR type info.
             Defaults to true.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.MaxExecutionCores">
            <summary>
             The maximum number of CPU cores/threads available to the rule engine for rule execution.
             Note that setting <see cref="P:InRule.Runtime.RuleSessionSettings.LogOptions"/> to anything other than <see cref="F:InRule.Runtime.EngineLogOptions.None"/> overrides this setting and restricts usage to 1 core.
             0 = use all available cores, 1 = single core (default), otherwise specifies max number of cores which can be used.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.LogOptions">
            <summary>
            Provides granular configuration of engine logging options.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.Now">
            <summary>
            Allows override of current date and time used by the Now() and Today() functions. If not set, each rule execution will use DateTime.Now.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.ExecutionTimeout">
            <summary>
            The default execution timeout is 30 seconds; use TimeSpan.Zero for infinite timeout.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.MaxCycleCount">
            <summary>
            The maximum number of core engine operations (value reads, value writes, rule executions) allowed for a given execution request.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleSessionSettings.EnableXsdValidationOnInternalSchema">
            <summary>
            Specifies whether XSD schema validation will be performed on load for internal-schema entities.
            </summary>
            <remarks>
            <para>If this is explicitly set at runtime, it overrides the setting on <see cref="P:InRule.Repository.RuleApplicationDef.EnableXsdValidationOnInternalSchema"/></para>
            <para>The default setting is true, in which case any fields in loaded XML for an internal-schema entity that are not present as Entity StateLocation fields will result in an xsd validation exception.</para>
            <para>When this setting is false, any extraneous fields will simply be ignored on load, with no error.</para>
            </remarks>
        </member>
        <member name="T:InRule.Runtime.Notification">
            <summary>
            Represents a notification fired by the runtime engine from a Fire Notification action.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Notification.ToString">
            <summary>
            Returns the message of the notification
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Runtime.Notification.Name">
            <summary>
            The notification name
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.Message">
            <summary>
            The notification message
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.IsActive">
            <summary>
            True if the notification is active, false if it's been retracted
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.Type">
            <summary>
            The type of notification
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.AssociatedField">
            <summary>
            Element identifier of the field associated with the notification
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.UniqueKey">
            <summary>
            A unique identifier for this notification
            </summary>
        </member>
        <member name="P:InRule.Runtime.Notification.Item(System.String)">
            <summary>
            Returns associated values from the notification's key/value store
            </summary>
            <param name="key">Key of the value to return.</param>
            <returns>Value mapped to the key, or null if none.</returns>
        </member>
        <member name="T:InRule.Runtime.Validation">
            <summary>
            Represents a validation fired by the runtime engine from a Mark Field Invalid action.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Validation.ActiveReasons">
            <summary>
            The collection of validation reasons for this <see cref="T:InRule.Runtime.Validation"/> instance
            </summary>
        </member>
        <member name="P:InRule.Runtime.Validation.Message">
            <summary>
            The validation message
            </summary>
        </member>
        <member name="P:InRule.Runtime.Validation.IsActive">
            <summary>
            True if the validation is active, else false if it's been retracted
            </summary>
        </member>
        <member name="P:InRule.Runtime.Validation.Target">
            <summary>
            The element identifier of the validation's target field
            </summary>
        </member>
        <member name="T:InRule.Runtime.ValidationReason">
            <summary>
            Represents a specific reason for field invalidation
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationReason.Message">
            <summary>
            The reason message
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationReason.FiredBy">
            <summary>
            Element identifier of the action that triggered the reason
            </summary>
        </member>
        <member name="P:InRule.Runtime.ValidationReason.Target">
            <summary>
            Element identifier of the reason's target field
            </summary>
        </member>
        <member name="T:InRule.Runtime.ElementValue">
            <summary>
            Represents a runtime state value, and can be either primitive, <see cref="T:InRule.Runtime.Entity"/>, or bound object (CLR object).
             Provides support for implicit and explicit value casting, equality comparisons, and null checking.
            </summary>
        </member>
        <member name="M:InRule.Runtime.ElementValue.Create(System.Object)">
            <summary>
            Creates an <see cref="T:InRule.Runtime.ElementValue"/> from an input object. Input is expected to be either a primitive type, or an <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="value">Input value to encapsulate in this <see cref="T:InRule.Runtime.ElementValue"/>.</param>
            <returns>The new <see cref="T:InRule.Runtime.ElementValue"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToObject">
            <summary>
            Returns the value associated with this <see cref="T:InRule.Runtime.ElementValue"/>. If this is a bound non-primitive value, the underlying bound value is returned.
            </summary>
            <returns>The value associated with this <see cref="T:InRule.Runtime.ElementValue"/>.</returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToValueList">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:InRule.Runtime.ValueList"/>.
            </summary>
            <returns>The converted value as a <see cref="T:InRule.Runtime.ValueList"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToEntity">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to an <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <returns>The converted value as a <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToBoolean">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <returns>The converted value as a <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableBoolean">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.Boolean"/>.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToInt64">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <returns>The converted value as a <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableInt64">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.Int64"/>.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToInt32">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <returns>The converted value as a <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableInt32">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.Int32"/>.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToDate">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.DateTime"/> containing only date-specific information.
            </summary>
            <returns>The converted value as a <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableDate">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.DateTime"/> containing only date-specific information.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToDateTime">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <returns>The converted value as a <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableDateTime">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.DateTime"/>.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToDecimal">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The converted value as a <see cref="T:System.Decimal"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToNullableDecimal">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a nullable <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The converted value as a nullable <see cref="T:System.Decimal"/></returns>
        </member>
        <member name="M:InRule.Runtime.ElementValue.ToString">
            <summary>
            Converts this <see cref="T:InRule.Runtime.ElementValue"/> to a <see cref="T:System.String"/>.
            If the value is null, <see cref="F:System.String.Empty"/> is returned.
            </summary>
            <returns>The converted value as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:InRule.Runtime.ElementValue.IsNull">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.ElementValue"/> represents a null value, else false.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InRule.Runtime.Collection">
            <summary>
            Base class for runtime representation of collections defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Collection.GetDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.FieldDef"/> associated with this <see cref="T:InRule.Runtime.Collection"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.FieldDef"/></returns>
        </member>
        <member name="M:InRule.Runtime.Collection.Add">
            <summary>
            Adds a new member to this <see cref="T:InRule.Runtime.Collection"/>.
            </summary>
            <returns>The new member</returns>
        </member>
        <member name="M:InRule.Runtime.Collection.Add(System.Object)">
            <summary>
            Adds a new member to this <see cref="T:InRule.Runtime.Collection"/>, using the specified bound value or <see cref="T:InRule.Runtime.Entity"/> instance.
            </summary>
            <param name="value">The bound value or <see cref="T:InRule.Runtime.Entity"/> instance to associate with the new member.</param>
            <returns>The new member</returns>
        </member>
        <member name="M:InRule.Runtime.Collection.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:InRule.Runtime.CollectionMember"/> at the specified ordinal index from the <see cref="T:InRule.Runtime.Collection"/>.
            </summary>
            <param name="index">The 0-based index of the member to remove.</param>
        </member>
        <member name="M:InRule.Runtime.Collection.Clear">
            <summary>
            Removes all members from this <see cref="T:InRule.Runtime.Collection"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Collection.GetEnumerator">
            <summary>
            Returns an enumerator for all <see cref="T:InRule.Runtime.CollectionMember"/>s.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:InRule.Runtime.Collection.Name">
            <summary>
            The <see cref="T:InRule.Runtime.Collection"/>'s name
            </summary>
        </member>
        <member name="P:InRule.Runtime.Collection.IsTemp">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Collection"/> was marked 'Temporary' during authoring, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Collection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:InRule.Runtime.CollectionMember"/> by ordinal index.
            </summary>
            <param name="index">The 0-based index of the member to return.</param>
            <returns>The member</returns>
        </member>
        <member name="P:InRule.Runtime.Collection.Value">
            <summary>
            Returns an <see cref="T:InRule.Runtime.ElementValue"/> that represents the bound value of this <see cref="T:InRule.Runtime.Collection"/>, if any.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Collection.Count">
            <summary>
            Returns the count of this <see cref="T:InRule.Runtime.Collection"/>
            </summary>
        </member>
        <member name="T:InRule.Runtime.CollectionMember">
            <summary>
            Base class for runtime representation of collection members defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.CollectionMember.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.CollectionMember"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.ElementId">
            <summary>
            Element identifier for this <see cref="T:InRule.Runtime.CollectionMember"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.Fields">
            <summary>
            The collection of <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.CollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.Collections">
            <summary>
            The collection of <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.CollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.RuleSets">
            <summary>
            The collection of <see cref="T:InRule.Runtime.RuleSet"/>s under this <see cref="T:InRule.Runtime.CollectionMember"/> (includes any <see cref="T:InRule.Runtime.ContextRuleSet"/>s).
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.Parent">
            <summary>
            Parent <see cref="T:InRule.Runtime.Collection"/> of this <see cref="T:InRule.Runtime.CollectionMember"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.Name">
            <summary>
            Name of this <see cref="T:InRule.Runtime.CollectionMember"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.CollectionMemberIndex">
            <summary>
            Returns the index of this member in it's parent collection.
             If an <see cref="T:InRule.Runtime.EntityCollectionMember"/> appears more than once in a collection, or in more than one collection, this returns -1.
            </summary>
        </member>
        <member name="P:InRule.Runtime.CollectionMember.Value">
            <summary>
            Returns an <see cref="T:InRule.Runtime.ElementValue"/> that represents the bound value of this <see cref="T:InRule.Runtime.CollectionMember"/>, if any.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ComplexCollection">
            <summary>
            Runtime representation of a complex collection defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.ComplexCollection.GetEnumerator">
            <summary>
            Returns an enumerator for all <see cref="T:InRule.Runtime.ComplexCollectionMember"/>s.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:InRule.Runtime.ComplexCollectionMember">
            <summary>
            Runtime representation of a complex collection member defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.ComplexCollectionMember.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="P:InRule.Runtime.ComplexCollectionMember.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexCollectionMember.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.ComplexCollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexCollectionMember.Value">
            <summary>
            Returns an <see cref="T:InRule.Runtime.ElementValue"/> that represents the bound value of this <see cref="T:InRule.Runtime.ComplexCollectionMember"/>, if any.
            </summary>
        </member>
        <member name="T:InRule.Runtime.ComplexField">
            <summary>
            Runtime representation of a complex field defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Field">
            <summary>
            Runtime representation of a field defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Field.GetDef">
            <summary>
            Returns the <see cref="T:InRule.Repository.FieldDef"/> associated with this <see cref="T:InRule.Runtime.Field"/>.
            </summary>
            <returns>The <see cref="T:InRule.Repository.FieldDef"/></returns>
        </member>
        <member name="M:InRule.Runtime.Field.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.Field"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="M:InRule.Runtime.Field.GetValidations">
            <summary>
            Returns the collection of validations associated with this <see cref="T:InRule.Runtime.Field"/>, if any.
            </summary>
            <param name="activeOnly">Specifies whether to return all <see cref="T:InRule.Runtime.Validation"/>s, or only active ones. Defaults to true (return active only).</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.Field.GetValidations(System.Boolean)">
            <summary>
            Returns the collection of validations associated with this <see cref="T:InRule.Runtime.Field"/>, if any.
            </summary>
            <param name="activeOnly">Specifies whether to return all <see cref="T:InRule.Runtime.Validation"/>s, or only active ones. Defaults to true (return active only).</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.Field.ToString">
            <summary>
            Gets the string representation of the <see cref="T:InRule.Runtime.Field"/> value.
            If the value is null, <see cref="F:System.String.Empty"/> is returned.
            </summary>
            <returns>The <see cref="T:InRule.Runtime.Field"/> value as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:InRule.Runtime.Field.Name">
            <summary>
            The name of this <see cref="T:InRule.Runtime.Field"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.IsCalculated">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Field"/> represents a calculation, otherwise false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.SourceExpression">
            <summary>
            Returns the calculation expression if this represents a calculated field, else null
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.DataType">
            <summary>
            The type of value represented by this <see cref="T:InRule.Runtime.Field"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.Field"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.Field"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.RuleSets">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.RuleSet"/>s under this <see cref="T:InRule.Runtime.Field"/> (including any <see cref="T:InRule.Runtime.ContextRuleSet"/>s).
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.Classifications">
            <summary>
            Returns a collection of all <see cref="T:InRule.Runtime.Classification"/>s associated with this <see cref="T:InRule.Runtime.Field"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.IsReadOnly">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Field"/>'s value cannot be changed externally, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.IsTemp">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Field"/> was marked 'Temporary' during authoring, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.IsNull">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Field"/>'s value is null, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> representing this <see cref="T:InRule.Runtime.Field"/>'s underlying value
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.IsValid">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Field"/> has not been marked invalid, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Field.AssociatedValueList">
            <summary>
            Returns the underlying <see cref="T:InRule.Runtime.ValueList"/> associated with this <see cref="T:InRule.Runtime.Field"/>, or null if none exists
            </summary>
        </member>
        <member name="M:InRule.Runtime.ComplexField.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.ComplexField"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="P:InRule.Runtime.ComplexField.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.ComplexField"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexField.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.ComplexField"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexField.RuleSets">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.RuleSet"/>s under this <see cref="T:InRule.Runtime.ComplexField"/> (including any <see cref="T:InRule.Runtime.ContextRuleSet"/>s).
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexField.DataType">
            <summary>
            The <see cref="P:InRule.Runtime.ComplexField.DataType"/> of this <see cref="T:InRule.Runtime.ComplexField"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.ComplexField.Value">
            <summary>
            Returns an <see cref="T:InRule.Runtime.ElementValue"/> that represents the bound value of this <see cref="T:InRule.Runtime.ComplexField"/>, if any.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Entity">
            <summary>
            Runtime representation of an authored <see cref="T:InRule.Repository.EntityDef"/> defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Entity.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetDef">
            <summary>
            Gets the <see cref="T:InRule.Repository.EntityDef"/> associated with this <see cref="T:InRule.Runtime.Entity"/>
            </summary>
            <returns>The <see cref="T:InRule.Repository.EntityDef"/></returns>
        </member>
        <member name="M:InRule.Runtime.Entity.RemoveFromSession">
            <summary>
            Removes this <see cref="T:InRule.Runtime.Entity"/> from its associated <see cref="T:InRule.Runtime.RuleSession"/>. The <see cref="T:InRule.Runtime.Entity"/> instance is no longer usable after this call completes.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Entity.GetValidations">
            <summary>
            Returns the collection of validations associated with this <see cref="T:InRule.Runtime.Entity"/>, if any.
            </summary>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetValidations(System.Boolean)">
            <summary>
            Returns the collection of validations associated with this <see cref="T:InRule.Runtime.Entity"/>, if any.
            </summary>
            <param name="activeOnly">Specifies whether to return all <see cref="T:InRule.Runtime.Validation"/>s, or only active ones. Defaults to true (return active only).</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.ExecuteRuleSet(System.String,System.Object[])">
            <summary>
            Executes an explicit <see cref="T:InRule.Runtime.RuleSet"/> against this <see cref="T:InRule.Runtime.Entity"/> instance.
            </summary>
            <param name="name">The name of the explicit <see cref="T:InRule.Runtime.RuleSet"/> to execute.</param>
            <param name="arguments">An optional array of arguments to pass to the <see cref="T:InRule.Runtime.RuleSet"/>.</param>
            <returns>The <see cref="T:InRule.Runtime.RuleExecutionLog"/> generated for the execution sequence</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.ActivateRuleSet(System.String)">
            <summary>
            Activates the specified <see cref="T:InRule.Runtime.RuleSet"/> for this <see cref="T:InRule.Runtime.Entity"/> instance.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Runtime.RuleSet"/> to activate</param>
        </member>
        <member name="M:InRule.Runtime.Entity.DeactivateRuleSet(System.String)">
            <summary>
            Deactivates the specified <see cref="T:InRule.Runtime.RuleSet"/> for this <see cref="T:InRule.Runtime.Entity"/> instance.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Runtime.RuleSet"/> to deactivate</param>
        </member>
        <member name="M:InRule.Runtime.Entity.RefreshBoundState">
            <summary>
            Refreshes bound state and marks dependencies for execution. Use this method between rule executions to ensure changes made directly to the bound state value of this <see cref="T:InRule.Runtime.Entity"/> are seen by the engine.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Entity.ResetWorkingMemory">
            <summary>
            Resets executions counts and agenda flags for this <see cref="T:InRule.Runtime.Entity"/> to prepare it for re-execution. Does not reset field values or collections.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Entity.ResetWorkingMemory(System.Boolean)">
            <summary>
            Resets executions counts and agenda flags for this <see cref="T:InRule.Runtime.Entity"/> to prepare it for re-execution. Does not reset field values or collections.
            </summary>
            <param name="recursive">True to recursively reset all child entities below this <see cref="T:InRule.Runtime.Entity"/>, otherwise false. Defaults to false (no recursion).</param>
        </member>
        <member name="M:InRule.Runtime.Entity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to use for serialization.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.WriteXml(System.Xml.XmlWriter,System.Xml.XmlQualifiedName)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to use for serialization.</param>
            <param name="elementName">The name to use for the outer XML element.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.SaveXml(System.String)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> to an XML file.
            </summary>
            <param name="path">The path to the file used to capture serialized output.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.SaveXml(System.String,System.Xml.XmlQualifiedName)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> to an XML file.
            </summary>
            <param name="path">The path to the file used to capture serialized output.</param>
            <param name="elementName">The name to use for the outer XML element.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXElement">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> containing the serialized XML</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXElement(System.Xml.XmlQualifiedName)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="elementName">The name to use for the outer XML element.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> containing the serialized XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetJson">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the serialized Json.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXml">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the serialized XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXml(System.Xml.XmlQualifiedName)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as a <see cref="T:System.String"/>.
            </summary>
            <param name="elementName">The name to use for the outer XML element.</param>
            <returns>A <see cref="T:System.String"/> containing the serialized XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXml(System.Boolean)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as a <see cref="T:System.String"/> with optional formatting.
            </summary>
            <param name="formatted">Whether to render XML with indentation whitespace and each XML element on a new line.</param>
            <returns>A <see cref="T:System.String"/> containing the serialized XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetXml(System.Boolean,System.Xml.XmlQualifiedName)">
            <summary>
            Serializes the state of this <see cref="T:InRule.Runtime.Entity"/> and returns it as a <see cref="T:System.String"/> with optional formatting..
            </summary>
            <param name="formatted">Whether to render XML with indentation whitespace and each XML element on a new line.</param>
            <param name="elementName">The name to use for the outer XML element.</param>
            <returns>A <see cref="T:System.String"/> containing the serialized XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetTempXml">
            <summary>
            Serializes temporary state values (including rule values if enabled) in XML form.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the serialized temporary state XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.GetTempXml(System.Boolean)">
            <summary>
            Serializes temporary state values (including rule values if enabled) in XML form.
            </summary>
            <param name="formatted">Whether to render XML with indentation whitespace and each XML element on a new line.</param>
            <returns>A <see cref="T:System.String"/> containing the serialized temporary state XML.</returns>
        </member>
        <member name="M:InRule.Runtime.Entity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Re-initializes the state of this <see cref="T:InRule.Runtime.Entity"/> using the specified <see cref="T:System.Xml.XmlReader"/>.
             No prior state values are preserved. Any defined default values are re-applied after state is initialized from the new XML.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to use.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.LoadXml(System.String)">
            <summary>
            Re-initializes the state of this <see cref="T:InRule.Runtime.Entity"/> using the specified XML file path.
             No prior state values are preserved. Any defined default values are re-applied after state is initialized from the new XML.
            </summary>
            <param name="path">The path to the XML file to use.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.ParseXml(System.Xml.Linq.XElement)">
            <summary>
            Re-initializes the state of this <see cref="T:InRule.Runtime.Entity"/> using the specified <see cref="T:System.Xml.Linq.XElement"/>.
             No prior state values are preserved. Any defined default values are re-applied after state is initialized from the new XML.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XElement"/> to use.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.ParseXml(System.String)">
            <summary>
            Re-initializes the state of this <see cref="T:InRule.Runtime.Entity"/> using the specified XML <see cref="T:System.String"/>.
             No prior state values are preserved. Any defined default values are re-applied after state is initialized from the new XML.
            </summary>
            <param name="xml">The <see cref="T:System.String"/> containing XML to use.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.ParseJson(System.String)">
            <summary>
            Re-initializes the state of this <see cref="T:InRule.Runtime.Entity"/> using the specified JSON <see cref="T:System.String"/>.
             No prior state values are preserved. Any defined default values are re-applied after state is initialized from the new JSON.
            </summary>
            <param name="json">The <see cref="T:System.String"/> containing XML to use.</param>
        </member>
        <member name="M:InRule.Runtime.Entity.Load(System.Object)">
            <summary>
            Loads a new bound object into this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
            <param name="obj">The new bound object to load.</param>
        </member>
        <member name="P:InRule.Runtime.Entity.ElementId">
            <summary>
            The element identifier which uniquely identifies this <see cref="T:InRule.Runtime.Entity"/> within its <see cref="T:InRule.Runtime.RuleSession"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.RuleSets">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.RuleSet"/>s under this <see cref="T:InRule.Runtime.Entity"/> (does not include any <see cref="T:InRule.Runtime.ContextRuleSet"/>s).
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.Classifications">
            <summary>
            Returns a collection of all <see cref="T:InRule.Runtime.Classification"/>s associated with this <see cref="T:InRule.Runtime.Entity"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.LocationsAssigned">
            <summary>
            Returns a collection of <see cref="T:InRule.Runtime.Element"/>s that correspond to locations to which this <see cref="T:InRule.Runtime.Entity"/> is presently assigned
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.Parent">
            <summary>
            Returns null (<see cref="T:InRule.Runtime.Entity"/> does not have a parent of its own)
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.InstanceId">
            <summary>
            Gets or sets an optional, user-defined identifier for this <see cref="T:InRule.Runtime.Entity"/> instance
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.Name">
            <summary>
            Returns the authored name of this <see cref="T:InRule.Runtime.Entity"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.IsValid">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Entity"/> instance has not been marked invalid, else false
            </summary>
        </member>
        <member name="P:InRule.Runtime.Entity.BoundValue">
            <summary>
            Returns the bound value associated with this <see cref="T:InRule.Runtime.Entity"/>, or null if none.
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityCollection">
            <summary>
            Runtime representation of an entity collection defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityCollection.Add(InRule.Runtime.Entity)">
            <summary>
            Adds a new member to this <see cref="T:InRule.Runtime.EntityCollection"/>.
            </summary>
            <param name="entity">The <see cref="T:InRule.Runtime.Entity"/> to add as a new member.</param>
            <returns>The new member</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator for all <see cref="T:InRule.Runtime.EntityCollectionMember"/>s.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:InRule.Runtime.EntityCollection.MemberDataTypeName">
            <summary>
            Name of the <see cref="T:InRule.Runtime.Entity"/> used as a member of this <see cref="T:InRule.Runtime.EntityCollection"/>
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityCollectionMember">
            <summary>
            Runtime representation of an entity collection member defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMember.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.EntityCollectionMember"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMember.InitializeWithNewEntity">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.Entity"/> instance of the appropriate type and initializes this <see cref="T:InRule.Runtime.EntityCollectionMember"/> with the new instance.
            </summary>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.EntityCollectionMember.InitializeWithNewEntity(System.Object)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.Entity"/> instance of the appropriate type and initializes this <see cref="T:InRule.Runtime.EntityCollectionMember"/> with the new instance.
            </summary>
            <param name="boundValue">The bound value (CLR object) to associate with the newly created <see cref="T:InRule.Runtime.Entity"/>.</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="P:InRule.Runtime.EntityCollectionMember.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.EntityCollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityCollectionMember.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.EntityCollectionMember"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityCollectionMember.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> that represents the <see cref="T:InRule.Runtime.Entity"/> of this <see cref="T:InRule.Runtime.EntityCollectionMember"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.EntityField">
            <summary>
            Runtime representation of an entity field defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.EntityField.GetSchemaElements">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.SchemaChildElement"/>s under this <see cref="T:InRule.Runtime.EntityField"/>.
            </summary>
            <returns>The collection</returns>
        </member>
        <member name="M:InRule.Runtime.EntityField.GetValidations(System.Boolean)">
            <summary>
            Returns the collection of validations associated with this <see cref="T:InRule.Runtime.EntityField"/>, if any.
            </summary>
            <param name="activeOnly">Specifies whether to return all <see cref="T:InRule.Runtime.Validation"/>s, or only active ones. Defaults to true (return active only).</param>
            <returns>The collection of <see cref="T:InRule.Runtime.Validation"/>s</returns>
        </member>
        <member name="M:InRule.Runtime.EntityField.InitializeWithNewEntity">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.Entity"/> instance of the appropriate type and initializes this <see cref="T:InRule.Runtime.EntityField"/> with the new instance.
            </summary>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="M:InRule.Runtime.EntityField.InitializeWithNewEntity(System.Object)">
            <summary>
            Creates a new <see cref="T:InRule.Runtime.Entity"/> instance of the appropriate type and initializes this <see cref="T:InRule.Runtime.EntityCollectionMember"/> with the new instance.
            </summary>
            <param name="boundValue">The bound value (CLR object) to associate with the newly created <see cref="T:InRule.Runtime.Entity"/>.</param>
            <returns>The newly created <see cref="T:InRule.Runtime.Entity"/></returns>
        </member>
        <member name="P:InRule.Runtime.EntityField.Fields">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Field"/>s under this <see cref="T:InRule.Runtime.EntityField"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityField.Collections">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.Collection"/>s under this <see cref="T:InRule.Runtime.EntityField"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityField.RuleSets">
            <summary>
            Returns a collection of all child <see cref="T:InRule.Runtime.RuleSet"/>s under this <see cref="T:InRule.Runtime.EntityField"/> (including any <see cref="T:InRule.Runtime.ContextRuleSet"/>s).
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityField.DataTypeEntityName">
            <summary>
            Name of the <see cref="T:InRule.Runtime.Entity"/> used as a value of this <see cref="T:InRule.Runtime.EntityField"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.EntityField.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> that represents the <see cref="T:InRule.Runtime.Entity"/> of this <see cref="T:InRule.Runtime.EntityCollectionMember"/>.
            </summary>
        </member>
        <member name="T:InRule.Runtime.PrimitiveField">
            <summary>
            Runtime representation of a primitive field defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> schema hierarchy.
            </summary>
        </member>
        <member name="M:InRule.Runtime.PrimitiveField.GetSchemaElements">
            <summary>
            Throws NotSupportedException (<see cref="T:InRule.Runtime.PrimitiveField"/>s have no children)
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.IsCalculated">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.PrimitiveField"/> represents a calculation, otherwise false
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.SourceExpression">
            <summary>
            Returns the calculation expression if this represents a calculated field, else null
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.Fields">
            <summary>
            Throws NotSupportedException (<see cref="T:InRule.Runtime.PrimitiveField"/>s have no child fields)
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.Collections">
            <summary>
            Throws NotSupportedException (<see cref="T:InRule.Runtime.PrimitiveField"/>s have no child collections)
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.RuleSets">
            <summary>
            Throws NotSupportedException (<see cref="T:InRule.Runtime.PrimitiveField"/>s have no child rulesets)
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.DataType">
            <summary>
            The type of value represented by this <see cref="T:InRule.Runtime.PrimitiveField"/>
            </summary>
        </member>
        <member name="P:InRule.Runtime.PrimitiveField.Value">
            <summary>
            Gets or sets an <see cref="T:InRule.Runtime.ElementValue"/> representing this <see cref="T:InRule.Runtime.PrimitiveField"/>'s underlying value
            </summary>
        </member>
        <member name="T:InRule.Runtime.Rule">
            <summary>
            Runtime representation of a rule or action defined in the <see cref="T:InRule.Repository.RuleApplicationDef"/> rule hierarchy.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Rule.IsActivated">
            <summary>
            Returns true if this <see cref="T:InRule.Runtime.Rule"/> is activated for execution, else false
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.DynamicTypeWrapper">
            <summary>
            Wrapper for a dynamic type builder which accumulates the methods on the type so that when the type
            is created the maximum number of methods can be created per type
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.IDelegateWrapper">
            <summary>
            Interface for delegates which do not match the execution delegate signature
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.IExecutionDelegateWrapper">
            <summary>
            Interface for execution delegates
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.DynamicMethodWrapper">
            <summary>
            Base class for wrappers for Delegate and ExecutionDelegate
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.DynamicMethodExecutionDelegateWrapper">
            <summary>
            Wrapper class for holding dynamic methods for execution
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.DynamicMethodDelegateWrapper">
            <summary>
            Wrapper class for the delegates where do not match the Execution Delegate type signature
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.PassthroughExecutionDelegateWrapper">
            <summary>
            Wrapper class for holding execution delegates that are not created from the dynamic method generator
            </summary>
        </member>
        <member name="T:InRule.Runtime.RuleExecutionLog">
            <summary>
            Contains runtime diagnostic statistics and messages optionally collected during rule execution.
             Log options are bitwise-OR'ed together to specify the desired collection level; collecting more log information will result in slower performance,
             while collecting less will result in better performance.
            To configure log options:
            <code>
              myRuleSession.Settings.LogOptions = EngineLogOptions.Changes | EngineLogOptions.Statistics;   // omits execution-specific messages...
            </code>
            </summary>
        </member>
        <member name="M:InRule.Runtime.RuleExecutionLog.GetExecutionTrace">
            <summary>
            Gets the handle from which execution trace details for this execution sequence can be examined.
            </summary>
            <returns>The <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/> instance.</returns>
        </member>
        <member name="M:InRule.Runtime.RuleExecutionLog.GetHtml">
            <summary>
            Generates an HTML-formatted report with detailed statistics of the execution sequence for this <see cref="T:InRule.Runtime.RuleExecutionLog"/>.
            </summary>
            <returns>The HTML report, as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.RequestId">
            <summary>
            A unique engine identifier for the execution sequence that produced this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.SessionId">
            <summary>
            A unique identifier for the <see cref="T:InRule.Runtime.RuleSession"/> that produced this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.Start">
            <summary>
            Start time of this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.End">
            <summary>
            End time of this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.TotalExecutionTime">
            <summary>
            Elapsed time of this execution sequence, including compile times.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.RuleExecutionTime">
            <summary>
            Elapsed time of this execution sequence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.CycleCount">
            <summary>
            Discrete units of work performed for this execution sequence.
             Use this value to gauge relative workload for a given rule application and state combination.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.HasErrors">
            <summary>
            Returns true if this execution sequence produced one or more errors, else false.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.HasNotifications">
            <summary>
            Returns true if this execution sequence produced one or more notification changes, else false.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.HasValidations">
            <summary>
            Returns true if this execution sequence produced one or more validation changes, else false.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.AllMessages">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.LogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.TextFeedbackMessages">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.TextFeedbackLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.ErrorMessages">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.ErrorLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.CollectionChanges">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.CollectionChangeLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.NotificationChanges">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.NotificationChangeLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.ValidationChanges">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.ValidationChangeLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.ActivationChanges">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.ActivationChangeLogMessage"/>s for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.StateValueChanges">
            <summary>
            A collection of all <see cref="T:InRule.Runtime.ValueChangeLogMessage"/>s for state values in this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.Statistics">
            <summary>
            Aggregated execution statistics collected for this <see cref="T:InRule.Runtime.RuleExecutionLog"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Runtime.RuleExecutionLog.TotalTraceFrames">
            <summary>
            Returns the total number of trace frames generated during this execution sequence.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.State.EntityOrigin">
            <summary>
            EntityOrigin defines lifetime management policy for entity container instances.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.EntityOrigin.RootSDK">
            <summary>
            Rooted entity container lifetime is tied to their parent session state.
             They can be cleaned up manually by the end user, or automatically upon session teardown.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.EntityOrigin.NonRootSDK">
            <summary>
            Non-rooted entity container lifetime is tied to their parent container(s).
             When a non-rooted entity is no longer referenced from any other state location, it is removed from memory.
             The presence of an SDK reference to this entity will not prevent it from being removed.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Engine.State.EntityOrigin.Internal">
            <summary>
            Similar semantics as NonRoot, but used to distinguish between explicitly created (non-root) entities and those created
             internally during rule execution.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Engine.Compiler.ExpressionFactory">
            <summary>
            Fluent interface for defining type-safe expressions for property access and method invocation
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.CallWithBlockCheck(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            Creates a block wrapper for an Expression.Call expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.CallWithBlockCheck(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a block wrapper for an Expression.Call expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.CallWithBlockCheck(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a block wrapper for an Expression.Call expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.PropertyWithBlockCheck(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates a block wrapper for an Expression.Property expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.PropertyWithBlockCheck(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
            <summary>
            Creates a block wrapper for an Expression.Property expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.PropertyOrFieldWithBlockCheck(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates a block wrapper for an Expression.PropertyOrField expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.PropertyWithBlockCheck(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates a block wrapper for an Expression.Property expression where any non variable arguments are converted to parameters
            </summary>
        </member>
        <member name="M:InRule.Runtime.Engine.Compiler.ExpressionFactory.ConvertToBlockParameter(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            Creates a parameter of the source expression type, adds steps to the step list to assign and added the parm to the parm list
            </summary>
        </member>
        <member name="M:InRule.Runtime.TypeUtils.ToUnspecifiedDateTime(System.DateTime)">
            <summary>
            Conversion function provided for inrule interpretation of inter-kind conversions,
             since .NET intepretation is inconsistent wrt Unspecified kind (including not even providing a .ToUnspecifiedDateTime() method).
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.TypeUtils.ToUtcDateTime(System.DateTime)">
            <summary>
            Conversion function provided for inrule interpretation of inter-kind conversions,
             since .NET intepretation is inconsistent wrt Unspecified kind (including not even providing a .ToUnspecifiedDateTime() method).
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.TypeUtils.ToLocalDateTime(System.DateTime)">
            <summary>
            Conversion function provided for inrule interpretation of inter-kind conversions,
             since .NET intepretation is inconsistent wrt Unspecified kind (including not even providing a .ToUnspecifiedDateTime() method).
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.TypeUtils.DateTimesAreEqual(System.DateTime,System.DateTime)">
            <summary>
            Reliably compare two datetimes for equality taking "kind" timezone offset into account
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.TypeUtils.CompareDateTimes(System.DateTime,System.DateTime)">
            <summary>
            Reliably compare two datetimes taking "kind" timezone offset into account
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
    </members>
</doc>
