<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InRule.Repository</name>
    </assembly>
    <members>
        <member name="T:InRule.Repository.EndPoints.InternalXmlSchemaDef">
            <summary>
            Internal Xml Schema endpoint definition.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.XmlSchemaDef">
            <summary>
            Xml Schema repository endpoint definition.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.EndPointDef">
            <summary>
            Base class for all endpoints in the ruleapplication including schema endpoints.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefBase">
            <summary>
            RuleRepositoryDefBase is the base abstract element that all repository elements must inherit.
            </summary>
        </member>
        <member name="T:InRule.Repository.IChild">
            <summary>
            Represents a parent-child relationship.
            </summary>
        </member>
        <member name="T:InRule.Repository.IParent">
            <summary>
            Represents a parent def.
            </summary>
        </member>
        <member name="M:InRule.Repository.IChild.SetParent(InRule.Repository.IParent)">
            <summary>
            Sets the parent for this definiion.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:InRule.Repository.IChild.Parent">
            <summary>
            The parent of the definion.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.LookupItem(System.Guid)">
            <summary>
            Lookup item by its <see cref="P:InRule.Repository.RuleRepositoryDefBase.Guid"/>.
            </summary>
            <param name="guid"></param>
            <returns>Def if found, otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.CreateFullName(InRule.Repository.RuleRepositoryDefBase,System.String)">
            <summary>
            Creates the full name for a def, using a different name instead of the name on the def.
            </summary>
            <param name="def">The def to use to create the full name.</param>
            <param name="name">The name to use instead of the Name property on the def.</param>
            <returns>Full name of the def.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetFullName">
            <summary>
            Gets the name of the field, in the format [RuleAppName].[ItemName].[ItemName]...
            </summary>
            <returns>Full name of the field.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.VisitDefs(System.Action{InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            Used to iterate over all defs contained by this def, included this def itself. Visits each def exactly once.
            </summary>
            <param name="action">Delegate that defines some action to take for each visit to a def.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.SetParent(InRule.Repository.IParent)">
            <summary>
            Sets specified def as parent of this def.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetChildCollection(System.Type)">
            <summary>
            Get child collection of specified type, if any.
            </summary>
            <param name="collectionMemberType"></param>
            <returns>Collection if any for the specified type, otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.InitializeAllInternalCaches">
            <summary>
            Ensure all internal (intra-instance) caches are initialized
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetAllChildCollections">
            <summary>
            Get all child collections for this def.
            </summary>
            <returns>List of Collections</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.ContainsText(InRule.Repository.RuleTextSearchContext,System.String,System.Boolean)">
            <summary>
            Searches all searchable fields of item for specified text
            </summary>
            <param name="searchMode">types of content to search while looking for specified search text</param>
            <param name="searchText">text to search for</param>
            <param name="recurseIntoChildren">include children in search</param>
            <returns>true if text found.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.Copy">
            <summary>
            Creates a copy of the object (newly assigned guid).
            </summary>
            <returns>A new instance with new Guid, ID and Revision assigned.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetRuleApp">
            <summary>
            Gets the <see cref="T:InRule.Repository.RuleApplicationDef"/> containing this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetInvalidMessagesList">
            <summary>
            Gets list of invalid data messages (for this model node only, no subnodes taken into account). 
            </summary>
            <remarks>XPath context is not included in message, this should be prepended by caller if desired.</remarks>
            <returns>List of invalid data messages, if any. .Length is 0 if none (is valid).</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.CheckForValidationErrors(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Gets list of invalid data messages (for this model node only, no subnodes taken into account). 
            </summary>
            <remarks>XPath context is not included in message, this should be prepended by caller if desired.</remarks>
            <returns>List of invalid data messages, if any. .Length is 0 if none (is valid).</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.IsModified">
            <summary>
            Determine if this def has been modified (excluding <see cref="P:InRule.Repository.RuleRepositoryDefBase.AuthoringIsExpanded"/> and other selected properties);
            </summary>
            <returns>True if has been modified.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.IsModified(System.Boolean)">
            <summary>
            Determine if this def has been modified (excluding <see cref="P:InRule.Repository.RuleRepositoryDefBase.AuthoringIsExpanded"/> and other selected properties);
            </summary>
            <returns>True if has been modified.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.TryChangeExpression(InRule.Repository.Expressions.Expression,InRule.Repository.RuleRefactorEventArgs)">
            <summary>
            Attempts to refactor every occurrance of an item in an expression with a new item,
            but only if the change is valid. Names are resolved relative to the rule node.
            </summary>
            <param name="expression">The expression to inspect.</param>
            <param name="e">Arguments describing the refactor operation.</param>
            <returns>True if a change was made. False if not.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.PermissionCheckRequired(InRule.Security.RuleUserRolePermissions,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Indicates if the specified def needs to be checked for the specified permission when editing. 
            </summary>
            <param name="permission"></param>
            <param name="editedDef"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.CompareCollections(InRule.Repository.RuleRepositoryDefCollection,InRule.Repository.RuleRepositoryDefCollection)">
            <summary>
            returns true if any member of the first collection in not contained in the second collection (does not check children)
            Collections must be of the same size.
            </summary>
            <param name="thisCollection"></param>
            <param name="newCollection"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.IsDifferentFrom(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Determine if specified def differs from this one (excluding differences in <see cref="P:InRule.Repository.RuleRepositoryDefBase.AuthoringIsExpanded"/> and other selected properties);
            </summary>
            <returns>True if is different.</returns>
            <exception cref="T:InRule.Repository.RuleRepositoryException">If types don't match.</exception>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.IsDifferentFrom(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Determine if specified def differs from this one (excluding differences in <see cref="P:InRule.Repository.RuleRepositoryDefBase.AuthoringIsExpanded"/> and other selected properties);
            </summary>
            <returns>True if is different.</returns>
            <exception cref="T:InRule.Repository.RuleRepositoryException">If types don't match.</exception>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetContentCode">
            <summary>
            Calc and get Content Hashcode for ruleapp. Use to determine whether content has changed.
            </summary>
            <remarks>
            The following are ignored when determining whether content has changed:
            <list type="bullet">
            	<item><description>//@AuthoringIsExpanded</description></item>
            	<item><description>//@Revision</description></item>
            	<item><description>//@Guid</description></item>
            	<item><description>//@Id</description></item>
            	<item><description>//@RepositoryAssemblyFileVersion</description></item>
            	<item><description>Newline-format differences in innertext (all are mapped to same newline format)</description></item>
            </list>
            <para>Non-top-level Guids are ignored since irAuthor doesn't currently preserve many sub-element guids, difficult to preserve these.</para>
            </remarks>
            <returns>32bit hashcode </returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetContentStringCode(System.Boolean)">
            <summary>
            Get hashcode-like content code for the purpose of assessing uniqueness
            </summary>
            <param name="forSecurity"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.SetOriginalContentCode">
            <summary>
            Set <see cref="P:InRule.Repository.RuleRepositoryDefBase.OriginalContentCode"/>, which "baselines" the <see cref="M:InRule.Repository.RuleRepositoryDefBase.IsModified"/> call.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.FindDef(System.String)">
            <summary>
            Searches for the nearest def with the given (optionally dotted) name, relative to the def doing the search..
            </summary>
            <param name="expressionText">The name of the def to find.</param>
            <returns>The def with the given name, or null if one was not found.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.HasPermission(InRule.Security.RuleUserRole[],InRule.Security.RuleUserRolePermissions,System.Boolean)">
            <summary>
            Checks if a given list of <see cref="T:InRule.Security.RuleUserRole"/>s have the specified permission 
            on this def or any of its parents.
            </summary>
            <param name="roles"></param>
            <param name="permission"></param>
            <param name="useParent"></param>
            <returns>Returns true to indicate specified permission has been granted for the specified roles.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.FindNodeHavingPermission(InRule.Security.RuleUserRolePermissions,System.String)">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> having the specified permission granted for the specified RuleUserRole name.
            </summary>
            <param name="permission"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.GetStringFromInvariantCulture(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets an expression in the specified culture from a culture invariant string.
            </summary>
            <param name="expression"></param>
            <param name="toCulture"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.ReplaceWith(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            replaces this def with another
            </summary>
            <param name="replacementDef">if this is null, the effect is ParentCollection.Remove(this)</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefBase.SetRecursiveCatalogState(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.CatalogState)">
            <summary>
            Sets the state of the def after performing the specified catalog operation
            </summary>
            <param name="def">def to set the state</param>
            <param name="performedCatalogFunction">catalog function</param>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.Revision">
            <summary>
            Revision number (in version-control history), within a specific repository.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.PublicRevision">
            <summary>
            Public revision, changes upon def checkin
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.Guid">
            <summary>
            Uniquely identifies an item def in any repository. Intended to be used to facilitate transfer of items between repositories (including offline ruleapps).
            </summary>
            <remarks>See also <see cref="P:InRule.Repository.RuleRepositoryDefBase.Id"/>.
            <para>When a node within a ruleapp, uniquely identifies node within this and all other ruleapps (this Guid is not intended to be reused; a copied or reused node
            should have a new Guid assigned).</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.Id">
            <summary>
            Uniquely identifies an item def within a specific repository, with a "friendly" integer id.
            </summary>
            <remarks>See also <see cref="P:InRule.Repository.RuleRepositoryDefBase.Guid"/>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IncludeInBusinessLanguage">
            <summary>
            Determines whether this def will be considered by the Business Language template engine
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.RepositoryAssemblyFileVersion">
            <summary>
            Indicates Repository AssemblyFileVersion under which this ruleapp was created
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IsActive">
            <summary>
            Indicates whether this def is active (enabled).
            </summary>
            <remarks>If not enabled, it will be omitted by the rule compiler in the compiled ruleapp.
            If <see cref="P:InRule.Repository.RuleApplicationDef.AllowRuleInactivation"/> is false, this setting is ignored (def will be treated as enabled).</remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.AssignedCategories">
            <summary>
            Categories (from the centralized list <see cref="T:InRule.Repository.CategoryDef"/> assigned to this def.
            </summary>
            <seealso cref="P:InRule.Repository.RuleRepositoryDefBase.Attributes"/>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IsTestableNode">
            <summary>
            Indicates if this def is shown by the testing tool irVerify.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.Parent">
            <summary>
            Gets the parent def for this def as shown in the authored tree.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.ParentCollection">
            <summary>
            Gets a parent collection of all defs to which this def belongs, if there is one.
            Returns null for the base def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.ThisRuleSet">
            <summary>
            Returns containing <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> - null returned if N/A.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.ThisEntity">
            <summary>
            Returns containing <see cref="T:InRule.Repository.EntityDef"/> if any - null returned if N/A.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.SerializeInProgress">
            <summary>
            Used to determine whether serialization in progress. Use to selectively return null (omit from persisted output) for non-value types.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.ThisRuleApp">
            <summary>
            Returns containing <see cref="T:InRule.Repository.RuleApplicationDef"/> - null returned if N/A.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IsPartOfElementPath">
            <summary>
            Indicates if this def name is included in an AuthoringElementPath.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IsRootItem">
            <summary>
            Indicates if this def is  a root-only placeholder for tree-navigation purposes, like Data folder, Actions folder etc. or the RuleApplication def.
            </summary>
            <remarks>
            If true,the def name will not be included in the AuthoringElementPath for this def or other defs it contains.
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.AuthoringElementTypeName">
            <summary>
            Gets the type name for this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.AuthoringElementPath">
            <summary>
            Gets the authoring path for this def.
            </summary>
            <remarks>All rootitems like rule application def and folder defs return 'root'.For an entity/independent Ruleset def, returns def name.
            For all other items like fields,dataelements,actions:
            <list type="bullet">
            <item>
            <description>if contained under an Entity/Independent Ruleset, path returned in the form EntityName.FieldName,EntityName.ActionName, IndependentRuleSetName.RuleName.ActionName etc(dot-notation).</description>
            </item>
            <item>
            <description>if contained under other items like Data,Schemas,EndPoints returns the def name.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.AuthoringElementTreeName">
            <summary>
            Gets the name of the def as shown in the rule application tree in irAuthor.
            </summary>
            <remarks>
            This can be the <see cref="P:InRule.Repository.RuleRepositoryDefBase.AuthoringContextName"/> or the non-empty Name set for the def.
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.AuthoringContextName">
            <summary>
            Gets the default Name of this def when added to the rule application.
            </summary>
            <remarks>
            By default, this is the name shown in irAuthor rule application tree when a node is added.
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.IsSchemaElement">
            <summary>
            Gets a Boolean value indicating if this def is a schema element.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.RelevantPermissions">
            <summary>
            Gets a list of <see cref="T:InRule.Security.RuleUserRolePermissions"/> applicable to this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.PermissionsToCheck">
            <summary>
            Gets a list of <see cref="T:InRule.Security.RuleUserRolePermissions"/> to be checked when this def is edited.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.OriginalContentCode">
            <summary>
            The original hashcode for this def from when it was opened.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.Attributes">
            <summary>
            Attributes assigned to this def. Use <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default"/> property to access the "Default" attributes-set which is typically used by authoring tools.
            </summary>
            <seealso cref="P:InRule.Repository.RuleRepositoryDefBase.AssignedCategories"/>
            <remarks>
            Any number of "attribute-sets" may be defined, but typically only the pre-defined <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default"/> is used.
            The <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Count"/> property does NOT return a count of these attributes as you might expect
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.SecurityPermissions">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.SecurityPermissionCollection"/> for this def.
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleRepositoryDefBase.Renaming">
            <summary>
            Occurs before the def is renamed.
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleRepositoryDefBase.Renamed">
            <summary>
            Occurs after the def has been renamed.
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleRepositoryDefBase.IncludeInBusinessLanguageChanged">
            <summary>
            Occurs when the value of IncludeInBusinessLanguage has been modified
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.CatalogState">
            <summary>
            Gets or sets the state of the catalog.
            </summary>
            <value>The state of the catalog.</value>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.CatalogCheckedOutTo">
            <summary>
            Gets or sets the catalog checked out username.
            </summary>
            <value>Catalog checked out username.</value>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.CatalogDefState">
            <summary>
            Gets or sets the state of the def in catalog.
            </summary>
            <value>The state of the def in catalog.</value>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection">
            <summary>
            Specifies a collection of all collections of meta-data for a repository definition, 
            including the Default set used by authoring tools.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Item(InRule.Repository.AttributeGroupKey)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection"/> in the collection.
            </summary>
            <remarks>On a get, if the key does not exist an <see cref="T:InRule.Repository.XmlSerializableStringDictionary"/> is created on demand and returned.</remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Item(System.String)">
            <summary>
            Gets or sets the value of an attribute with the specified key
            </summary>
            <param name="key">Specifies the key whose value to get or set</param>
            <returns>The attribute value with the specified <paramref name="key"/></returns>
            <remarks>
            This property gets/sets attributes in the 'default' group (authoring group) only
            This property is functionally equivalent to <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default"/>[<paramref name="key"/>]
            This property is functionally equivalent to <see cref="T:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection"/>[<see cref="F:InRule.Repository.RuleRepositoryDefBase.DefaultAttributeGroupKey"/>][<paramref name="key"/>]
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default">
            <summary>
            The "default" attributes-set typically used by authoring tools.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Count">
            <summary>
            Gets the count of attribute groups (NOT individual attributes) in this collection
            </summary>
            <remarks>
            This does NOT return the count of attributes in the 'default' group (authoring group)
            To get the count of attributes in the 'default' group call <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default"/>.Count
            </remarks>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.CollectionItem">
            <summary>
            Specifies an item in the <see cref="T:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection"/> collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.EndPointDef.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid endpoint entity name.
            </summary>
            <param name="candidateName"></param>
            <returns>Valid engine endpoint name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
        <member name="P:InRule.Repository.EndPoints.EndPointDef.IsTestableNode">
            <summary>
            Gets false, indicating this def is not shown in irVerify.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.EndPointDef.ParentCollection">
            <summary>
            Gets the parent collection of endpoints to which this endpoint belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.EndPointDef.IsSchemaElement">
            <summary>
            Indicates if this endpoint is an activated schema endpoint.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.ISchemaEndPoint">
            <summary>
            Identifies schema endpoint classes. Implemented by <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> et al.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.ISchemaEndPoint.SupportCircularReferences">
            <summary>
            Indicates that this schema supports circular references (entity field of same type as an ancestor)
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.ISchemaEndPoint.BindEnumerationFieldsToValueLists">
            <summary>
            Gets whether Fields that map to enumerated types should be bound to a ValueList during schema import.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.ISchemaEndPoint.CreateConstraintsForEnumerationFields">
            <summary>
            Gets whether Constraint rules should be created for Fields that map to enumerated types during schema import.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.ISchemaEndPointInternal">
            <summary>
            Identifies schema endpoint classes. Implemented by <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> et al.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.#ctor(System.String,System.String,System.String)">
            <summary>
            Create an XSD runtime endpoint override using specified client and server XSD paths
            </summary>
            <param name="name"></param>
            <param name="clientXsdPath">Specifies an xsd file or http path to be used client-side. If null, <paramRef name="serverXsdpath"/> is used.</param>
            <param name="serverXsdPath">Specifies an xsd file or http path to be used server-side. If null, <paramRef name="clientXsdpath"/> is used.</param>
            <remarks>
            To disable XSD-latest sequencing and XSD validation (such as when XSD is not available at runtime), set both <paramRef name="serverXsdpath"/> and <paramRef name="clientXsdpath"/> to null.
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.#ctor">
            <overloads>
            Create an XSD endpoint or XSD endpoint runtime override
            </overloads>	
            <summary>
            Create an XSD endpoint with auto-assigned name
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.#ctor(System.String)">
            <summary>
            Create an XSD endpoint using specified name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.#ctor(System.String,System.String)">
            <summary>
            Create an XSD runtime EndPoint override using specified XSD path.
            </summary>
            <param name="name">Name of this EndPoint.</param>
            <param name="xsdPath">Specifies path to XSD: Absolute file or http URI, absolute file system or UNC path, or relative file system path to client/server working directory.</param>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an XSD runtime EndPoint override using specified XSD path.
            </summary>
            <param name="name">Name of this EndPoint.</param>
            <param name="xsdPath">Specifies path to XSD: Absolute file or http URI, absolute file system or UNC path, or relative file system path to client/server working directory.</param>
            <param name="useEmbeddedXsd">Indicates whether the XSD will be embedded in the rule application or loaded via file path.</param>
            <param name="enableXsdValidation">Indicates if the schema will be validated on load.</param>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlSchemaDef.GetXsdPath">
            <summary>
            Gets the XSD path to be used by SDK operations.
            </summary>
            <remarks>
            Uses XsdPath if set, otherwise LastImportedFileName.
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.XsdPath">
            <summary>
            Gets or sets path to XSD: Absolute file or http URI, absolute file system or UNC path, or relative file system path to client/server working directory.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.AllowGetXmlWithDupInstances">
            <summary>
            Specifies whether Xml rendering of duplicate instances is allowed at runtime for entities associated with this schema.
            </summary>
            <remarks>
            <para>The default setting is false, in which case an error occurs on Xml render
            when a given instance (EntityId) appears more than once in the hierarchical graph being rendered.</para>
            <para>When this setting is true, duplicate instances are rendered with no error - note that if this xml is loaded back in, it results in distinct
            instances (EntityIds) rather than shared ones.</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.CreateChildFields">
            <summary>
            Specifies whether child relational fields are created for FK relationships
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.AutoSelectDependencies">
            <summary>
            Specifies whether dependent entities are created for FK relationships
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.CreateEntitiesForAnonymousComplexTypes">
            <summary>
            Specifies whether Entities are created during import for anonymous xs:complexTypes nested in non-global elements. True by default. If false, InRule Complex Fields will be created instead.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.IgnoreReadonlySettings">
            <summary>
            When using a dataset XSD, allows specifying ignoring of ReadOnly setting on a column.
            </summary>
            <remarks>
            This has the following effects:
            <list type="bullet">
            	<item><description>At import time, it will not set FieldDef.ReadOnly true for XSD elements specifying ReadOnly.</description></item>
            	<item><description>At runtime, when a dataset instance is created by inrule (rather than being passed in), all of its columns will have ReadOnly false.</description></item>
            	<item><description>At runtime, attempting to set a column value (including autoincrement values) will now work, when before it failed due to the 2 constraints above.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.DisableConstraintAndValueListForEnumerations">
            <summary>
            Specifies whether a Constraint and ValueList are created when importing XML schema with simpleType enumerations.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.BindEnumerationFieldsToValueLists">
            <summary>
            Specifies whether to bind Fields that map to xs:enumeration restriction types to a ValueList during import.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlSchemaDef.CreateConstraintsForEnumerationFields">
            <summary>
            Specifies whether to create Constraint rules for Fields that map to xs:enumeration restriction types during import.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.ISchemaCache">
            <summary>
            Represents a cache that can be built up at compile time for each SchemaEndPoint to speed up Runtime EntityState operations.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.AssemblyDef">
            <summary>
            External .NET Assembly repository endpoint definition
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.#ctor(System.String,System.Boolean)">
            <overloads>
            Create a .NET Assembly Schema or Function Library endpoint
            </overloads>
            <summary>
            Create a .NET Assembly Schema or Function Library endpoint as specified
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.GetDefaultEndPointAssembliesDir">
            <summary>
            Get default directory used to load assemblies from.
            </summary>
            <returns>Directory abs. path that will be used to load assemblies from (except when dir overridden by SDK).
            No exception raised if directory does not exist.</returns>
            <remarks>.config parameter "DefaultEndPointAssembliesDir is used if present. 
            Otherwise, a sub-directory "Functions" off of the appdomain's binary directory is used.
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.AllowGetXmlWithDupInstances">
            <summary>
            Specifies whether Xml rendering of duplicate instances is allowed at runtime for entities associated with this schema (applicable only when XmlSerializer specified).
            </summary>
            <remarks>
            <para>The default setting is false, in which case an error occurs on Xml render
            when a given instance (EntityId) appears more than once in the hierarchical graph being rendered.</para>
            <para>When this setting is true, duplicate instances are rendered with no error - note that if this xml is loaded back in, it results in distinct
            instances (EntityIds) rather than shared ones.</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.AssemblyName">
            <summary>
            The file name of the assembly without the extension.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.LastImportInfo">
            <summary>
            Used for Last sync and import storage only.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.LastImportedFileName">
            <summary>
            Full path to where file was last imported from.
            </summary>
            <remarks>
            Is not required to use endpoint, currently provided for informational purposes only.
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.EntityDefsInfo">
            <summary>
            Get EntityDefsInfo
            </summary>
            <remarks>Created on-demand here, unlike as in <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> - therefore it is not persisted.</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.RuleWriteAllImportOnly">
            <summary>
            Used only at import time at the class-level, is not persisted
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.DefaultRuleWriteAllBehavior">
            <summary>
            Gets a value indicating whether [default rule write all behavior].
            </summary>
            <value>
            	<c>true</c> if [default rule write all behavior]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.BindEnumerationFieldsToValueLists">
            <summary>
            Specifies whether to bind Fields that map to Enum types to a ValueList during import.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.CreateConstraintsForEnumerationFields">
            <summary>
            Specifies whether to create Constraint rules for Fields that map to Enum types during import.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.InfoBase.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.InfoBase.OnAfterMerge">
            This is a little weird, but this should be called when we know
            that we had to merge an existing item with a new item in order to 
            change the new item back to available if it is unavailable for any reason
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassInfo.#ctor">
            <summary>
            Only used for XML Serialization.  Do not use.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfo.Methods">
            <summary>
            All methods, sorted by name.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfo.RuleWriteAllImportOnly">
            <summary>
            Used only at import time at the class-level, is not persisted
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfo.Include">
            <summary>
            This is for use by import attributes only
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.ISchemaEndPointImportedItems">
            <summary>
            Identifies schema endpoint imported items.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.AssemblyDef.ClassInfoCollection.ClassInfoComparer">
            <summary>
            Compares the Name property of the given InfoBases.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.InfoWithTypeBase.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.InfoWithTypeBase.TypeIsIntrinsicType">
            <summary>
            Indicates whether this property is handled via intrinsic type.
            </summary>
            <remarks>
            For collections, this indicates whether the collection members, not the collection itself, are an intrinsic type.
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.InfoWithTypeBase.IsTypeEnum">
            <summary>
            Indicates whether this property is an enum.
            </summary>
            <remarks>
            For collections, this indicates whether the collection members, not the collection itself, are enums.
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.InfoWithTypeBase.TypeImplementsIList">
            <summary>
            Indicates whether this type implements <see cref="T:System.Collections.IList"/> and is not an array (which is required to remove or add collection members from the rule app)
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.InfoWithTypeBase.CollectionMemberTypeName">
            <summary>
            If the Type of the state object implements IList, this is the first non-Object Type that 
            Item property returns.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.StateBase.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassFieldInfo.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassMethodInfo.#ctor">
            Only used for XML Serialization.  Do not call.
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassMethodInfo.RuleWriteInfos">
            <summary>
            Specifies whether working memory should be refreshed for specific state path(s) after a call to this method (due to the method changing these state values directly on the object graph)
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassMethodInfo.RuleWriteAll">
            <summary>
            Specifies whether all working memory should be refreshed after a call to this method (due to method changing one or more state values directly on the object graph)
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassParameterInfoCollection.GetParameterList">
            <summary>
            Displays the parameters and types in a method signature-like fasion.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassParameterInfo.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.AssemblyDef.ClassParameterInfo.ValueList">
            <summary>
            Gets or sets the optional value list that the value of the parameter must 
            be a member of.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.AssemblyDef.ClassPropertyInfo.#ctor">
            <summary>
            Only used for XML Serialization.  Do not call.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.AssemblyDef.InfoComparer">
            <summary>
            Compares the Name property of the given InfoBases.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.AssemblyDef.ClassMethodInfoComparer">
            <summary>
            Compares method infos, sorting in a reliable order.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.AssemblyDef.StateCollection">
            <summary>
            Collection of objects derived from StateBase. 
            </summary>
            <remarks>Required for proper binding to grids.</remarks>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.XmlSchemaDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> Model. 
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.RuleDefController">
            <summary>
            Common base class for Model-View-Controller settings Controllers.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.RuleDefController.Load">
            <summary>
            Loads View state from Model state.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save">
            <summary>
            Saves View state to Model state.
            </summary>
            <returns>true if no validation errors, false otherwise.</returns>
        </member>
        <member name="P:InRule.Repository.ViewsAndControllers.RuleDefController.IsAlreadySaved">
            <summary>
            Indicates whether <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/> has already been invoked.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISchemaEndPointController">
            <summary>
            Model-View-Controller Controller Interface for <see cref="T:InRule.Repository.EndPoints.ISchemaEndPoint"/> Models. 
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISchemaEndPointController.Apply(InRule.Repository.EndPoints.ISchemaEndPointImportedItems)">
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <param name="importedItems"></param>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.XmlSchemaDefController.Apply(InRule.Repository.EndPoints.ISchemaEndPointImportedItems)">
            <overloads>
            Apply imported schema to ruleapp schema
            </overloads>
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <param name="items"></param>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.XmlSchemaDefController.Apply">
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.XmlSchemaDefController.ValidateXmlSchema(System.String)">
            <summary>
            Validate against xml schema
            </summary>
            <param name="stateXml"></param>
            <returns>Array of validation errors / warnings if any (0-length array if none).</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">Import not called since instantiation of this object</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.XmlSchemaDefController.ValidateXmlSchema(System.Xml.XmlReader)">
            <summary>
            Validate against xml schema
            </summary>
            <param name="stateXml"></param>
            <returns>Array of validation errors / warnings if any (0-length array if none).</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">Import not called since instantiation of this object</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.XmlSchemaDefController.Import(System.String,System.Boolean)">
             <overloads>
             Import from XmlSchema to ruleapp-compatible entities and fields. May be used to reload an existing endpoint from an updated schema.
             </overloads>
             <summary>
             Import from XmlSchema to ruleapp-compatible entities and fields. May be used to reload an existing endpoint from an updated schema.
             </summary>
             <param name="xmlSchemaFileOrUrlPath">May optionally be constructed from LastImportedFileName property of <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/></param>
             <param name="updateModel">Specify whether model should be updated.</param>
             <returns>Imported entities and fields object (also available from <see cref="P:InRule.Repository.EndPoints.XmlSchemaDef.EntityDefsInfo"/></returns>
             <remarks><see cref="P:InRule.Repository.EndPoints.XmlSchemaDef.EntityDefsInfo"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping at EntityDefsInfo.EntityDefInfos. 
             <para>If EntityDefsInfo already contains entities and fields, the .IsSelected setting of any matching ones is maintained.</para>		
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
            </remarks>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IXmlSchemaDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.XmlSchemaDefController"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IDefView">
            <summary>
            View properties common to defs subclassed from <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IXmlSchemaDefView.SetErrorMessage(InRule.Repository.EndPoints.XmlSchemaDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.DatabaseConnectionController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EndPoints.DatabaseConnection"/> Model.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.DatabaseConnectionController.Apply(InRule.Repository.EndPoints.ISchemaEndPointImportedItems)">
            <overloads>
            Apply imported schema to ruleapp schema
            </overloads>
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <param name="items"></param>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.DatabaseConnectionController.Apply">
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.DatabaseConnectionController.ImportEntitiesListOnly">
            <summary>
            Import entities list only - this is a necessary first step for large db schemas to achieve acceptable performance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.DatabaseConnectionController.Import(System.Boolean)">
             <overloads>
             Import from Db Schema to ruleapp-compatible entities and fields. May be used to reload an existing endpoint from an updated schema.
             </overloads>
             <summary>
             Import from Db Schema to ruleapp-compatible entities and fields. May be used to reload an existing endpoint from an updated schema.
             </summary>
             <param name="updateModel">Specify whether model should be updated.</param>
             <returns>Imported entities and fields object (also available from <see cref="P:InRule.Repository.EndPoints.DatabaseConnection.EntityDefsInfo"/></returns>
             <remarks><see cref="P:InRule.Repository.EndPoints.DatabaseConnection.EntityDefsInfo"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping at EntityDefsInfo.EntityDefInfos. 
             <para>If EntityDefsInfo already contains entities and fields, the .IsSelected setting of any matching ones is maintained.</para>		
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
            </remarks>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IDatabaseConnectionView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EndPoints.DatabaseConnection"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.DatabaseConnectionController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IDatabaseConnectionView.SetErrorMessage(InRule.Repository.EndPoints.DatabaseConnection,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.AssemblyDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> Model.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.Apply(InRule.Repository.EndPoints.ISchemaEndPointImportedItems)">
            <overloads>
            Apply imported schema to ruleapp schema
            </overloads>
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <param name="items"></param>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.Apply">
            <summary>
            Apply imported schema to ruleapp schema
            </summary>
            <returns>0 or more messages indicating changes as the result of the apply.</returns>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If one or more duplicate selected aliases exist in schema to be applied.</exception>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.Import(System.Boolean,System.String,System.String,System.Boolean)">
             <overloads>
             Import from .NET Assembly to ruleapp-compatible entities and fields. May be used to reload an existing endpoint from an updated assembly.
             </overloads>
             <summary>
             Import from .NET Assembly to ruleapp-compatible entities and fields, specifying whether to updated Model associated with Controller. May be used to reload an existing endpoint from an updated assembly.
             </summary>
             <param name="isSchemaEndPoint">Specifies if is an existing schema endpoint.</param>
             <param name="assemblyName">Name of the .Net Assembly.</param>
             <param name="assemblyDir">Looks for assemblyName.dll or assemblyName.exe here</param>
             <param name="updateModel">Specify whether model should be updated.</param>
             <returns><see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> containing imported classes and any import warnings in <see cref="P:InRule.Repository.EntityDefsInfo.Notes"/></returns>
             <remarks>Imported entities and fields are available from <see cref="P:InRule.Repository.ViewsAndControllers.AssemblyDefController.Model"/></remarks>
             <remarks><see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping.
             <para>If <see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> already contains entities these are interpreted as selected - any others as deselected.</para>
             <para>The existing fields select/deselect state is also preserved.</para>
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
            </remarks>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.ImportFromCurrentAppDomain(System.Boolean,System.String,System.String,System.Boolean,System.Predicate{System.Type})">
             <overloads>
             Import from .NET Assembly to ruleapp-compatible entities and fields.
             Should only be used to import unbound assemblies, e.g. assemblies that are generated by the compiler.
             </overloads>
             <summary>
             Import from .NET Assembly to ruleapp-compatible entities and fields, specifying whether 
             to updated Model associated with Controller. May be used to reload an existing endpoint from an updated assembly.
             </summary>
             <param name="isSchemaEndPoint"></param>
             <param name="assemblyName">The name of the assembly (without file extension)</param>
             <param name="assemblyDir">Looks for assemblyName.dll or assemblyName.exe here</param>
             <param name="updateModel">Specify whether model should be updated.</param>
            <param name="typeSelector"></param>
            <returns><see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> containing imported classes and any import warnings in <see cref="P:InRule.Repository.EntityDefsInfo.Notes"/></returns>
             <remarks>Imported entities and fields are available from <see cref="P:InRule.Repository.ViewsAndControllers.AssemblyDefController.Model"/></remarks>
             <remarks><see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping.
             <para>If <see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> already contains entities these are interpreted as selected - any others as deselected.</para>
             <para>The existing fields select/deselect state is also preserved.</para>
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
             <para>This method is meant to be used interally only. It should not be publicly exposed, since it does not create an isolated AppDomain for the purpose of importing an assembly. This method was created in order to improve performance.</para>
            </remarks>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.Import(System.String,System.String)">
             <summary>
             Import from .NET Assembly to ruleapp-compatible entities and fields, updating Model associated with Controller. May be used to reload an existing endpoint from an updated assembly.
             </summary>
             <param name="assemblyName"></param>
             <param name="assemblyDir">Looks for assemblyName.dll or assemblyName.exe here</param>
             <returns><see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> containing imported classes and any import warnings in <see cref="P:InRule.Repository.EntityDefsInfo.Notes"/></returns>
             <remarks>Imported entities and fields are available from <see cref="P:InRule.Repository.ViewsAndControllers.AssemblyDefController.Model"/></remarks>
             <remarks><see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping.
             <para>If <see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> already contains entities these are interpreted as selected - any others as deselected.</para>
             <para>The existing fields select/deselect state is also preserved.</para>
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
            </remarks>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.AssemblyDefController.Import(System.String)">
             <summary>
             Import from .NET Assembly to ruleapp-compatible entities and fields, from a full assembly path, updating Model associated with Controller. May be used to reload an existing endpoint from an updated assembly.
             </summary>
             <param name="assemblyPath">Full path to assembly to load</param>
             <returns><see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> containing imported classes and any import warnings in <see cref="P:InRule.Repository.EntityDefsInfo.Notes"/></returns>
             <remarks>Imported entities and fields are available from <see cref="P:InRule.Repository.ViewsAndControllers.AssemblyDefController.Model"/></remarks>
             <remarks><see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> is populated with imported entities and fields, 
            			schema EntityDefsInfo.Name, import EntityDefsInfo.Notes, and entity and field source mapping.
             <para>If <see cref="P:InRule.Repository.EndPoints.AssemblyDef.ClassInfos"/> already contains entities these are interpreted as selected - any others as deselected.</para>
             <para>The existing fields select/deselect state is also preserved.</para>
            	<para>"Apply" must be separately called 
            		to apply this endpoint schema to the ruleapp schema.</para>
            </remarks>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IAssemblyDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.AssemblyDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IAssemblyDefView.SetErrorMessage(InRule.Repository.EndPoints.AssemblyDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.SchemaOperations.DbSchemaImport">
            <summary>
            Support for importing oledb schema to ruleapp format
            </summary>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.XmlSchemaExport.ExportInternalSchemaToXsd(InRule.Repository.RuleApplicationDef,InRule.Common.Utilities.FileSystem.FileInfo,System.Boolean)">
            <overloads>Exports all internal-schema entities to XSD</overloads>
            <summary>
            Exports all internal-schema entities to XSD file
            </summary>
            <param name="ra"></param>
            <param name="targetPath">Target path to which to write out XSD. Is written even if compile errors occur.</param>
            <param name="useSeq">Use sequence (strict ordering) of elements.</param>
            <returns>0-length array if no xsd-compile errors; otherwise one or more XSD compile errors</returns>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.XmlSchemaExport.ExportInternalSchemaToXsd(InRule.Repository.RuleApplicationDef,System.String@,System.Boolean)">
            <summary>
            Exports all internal-schema entities to XSD string
            </summary>
            <param name="ra"></param>
            <param name="xml">Target string ref. Is written even if compile errors occur.</param>
            <param name="useSeq">Use sequence (strict ordering) of elements.</param>
            <returns>0-length array if no xsd-compile errors; otherwise one or more XSD compile errors</returns>
        </member>
        <member name="T:InRule.Common.Utilities.XmlSerializationWriterXmlSchema">
            <summary>
            XmlSchema serializer
            </summary>
            <remarks>
            This file was generated using sgen /assembly:C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.Xml.dll /k
            
            Included here because .NET creates a temp assembly when XmlSchema.Write() called.
            Instead of calling XmlSchema.Write, do this to avoid temp assembly generation:
            	XmlSchemaSerializer generatedSchemaSerializer = new XmlSchemaSerializer();
            	generatedSchemaSerializer.Serialize(writer, theXmlSchema)
            </remarks>
        </member>
        <member name="T:InRule.Common.Utilities.XmlValidatingReaderCheck">
            <summary>
            Support for XML schema validation
            </summary>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.#ctor(System.Xml.XmlReader,System.Xml.Schema.XmlSchema)">
            <overloads>
            Start validation of specified xml reader, xml file or xml string against specified schema
            </overloads>
            <summary>
            Start validation at specified xml reader file starting against specified schema
            </summary>
            <param name="reader"></param>
            <param name="schema"></param>
            <remarks><see cref="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages"/> contains 0 or more validation messages on return.</remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">On any exception errors during attempted validation</exception>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.#ctor(System.Xml.XmlReader,System.Xml.XmlReader)">
            <summary>
            Start validation at specified xml reader file starting against specified schema
            </summary>
            <param name="xml"></param>
            <param name="schema"></param>
            <remarks><see cref="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages"/> contains 0 or more validation messages on return.</remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">On any exception errors during attempted validation</exception>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.#ctor(System.IO.FileInfo,System.Xml.Schema.XmlSchema)">
            <summary>
            Start validation of specified xml file against specified xmlreader schema
            </summary>
            <param name="xmlFile"></param>
            <param name="schema"></param>
            <remarks><see cref="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages"/> contains 0 or more validation messages on return.</remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">On any exception errors during attempted validation</exception>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.#ctor(InRule.Common.Utilities.FileSystem.FileInfo,System.Xml.Schema.XmlSchema)">
            <summary>
            Start validation of specified xml file against specified xmlreader schema
            </summary>
            <param name="xmlFile"></param>
            <param name="schema"></param>
            <remarks><see cref="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages"/> contains 0 or more validation messages on return.</remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">On any exception errors during attempted validation</exception>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.#ctor(System.String,System.Xml.Schema.XmlSchema)">
            <summary>
            Start validation of specified xml against specified schema
            </summary>
            <param name="xml"></param>
            <param name="schema"></param>
            <remarks><see cref="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages"/> contains 0 or more validation messages on return.</remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">On any exception errors during attempted validation</exception>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationEventErrorsOnly(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validation event for XML Schema validation - intended for use with schema validation, where only errors are returned (lax processing warnings ignored).
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <remarks>Ignores warnings (such as from processing=lax directive) - only SeverityType errors are returned.</remarks>
        </member>
        <member name="M:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationEventErrorsAndWarnings(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validation event for XML Schema validation - intended for use with schema compile, where warnings are returned
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:InRule.Common.Utilities.XmlValidatingReaderCheck.ValidationMessages">
            <summary>
            List of 0 or more validation messages
            </summary>
        </member>
        <member name="T:InRule.Repository.Data.ExecuteSqlQuery">
            <summary>
            ExecuteSqlQuery logic.
            </summary>
        </member>
        <member name="M:InRule.Repository.Data.ExecuteSqlQuery.GetSqlQueryTableName(System.String)">
            <summary>
            Gets the name of the table in a SQL select statement.
            </summary>
        </member>
        <member name="M:InRule.Repository.Data.ExecuteSqlQuery.GetOutParameterValues(InRule.Repository.Data.AnyDbCommand,System.Collections.Generic.List{System.Object})">
            <summary>
            Gets a list of output parameter values.
            </summary>
            <param name="cmd">Dbcommand.</param>
            <param name="outputParams">output params.</param>
            <returns> a list of outparameters and its values</returns>
        </member>
        <member name="M:InRule.Repository.Data.ExecuteSqlQuery.GetOutputParameterSize(System.Data.IDbDataParameter)">
            <summary>
            Gets the size of the output parameter.
            </summary>
            <param name="p">Data Parameter.</param>
            <returns>size of data type</returns>
        </member>
        <member name="M:InRule.Repository.Data.ExecuteSqlQuery.ReplaceVarInstancesOnly(System.String,System.String,System.String)">
            <summary>
            Replace only instances of variables in string
            </summary>
            <param name="origString"></param>
            <param name="find"></param>
            <param name="replaceWith"></param>
            <returns></returns>
            <remarks>Replaces only instances delimited by whitespace, math operator (e.g., -, +), etc.</remarks>
        </member>
        <member name="T:InRule.Repository.Utilities.DataSetUtility">
            <summary>
            Support for XML schema validation
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.CatalogInfo">
            <summary>
            Information about a repository including AuthenticationProvider, Support for single-signon etc. 
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.Uri">
            <summary>
            Gets/Sets the service uri for the repository.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.AuthenticationProvider">
            <summary>
            Gets/Sets the AuthenticationProvider for the repository service.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.SupportsIntegratedSecurity">
            <summary>
            Gets/Sets whether the service supports integrated security.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.LoggingLevel">
            <summary>
            Gets/Sets the <see cref="T:InRule.Common.Logging.LogLevel"/> specified for for the repository service.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.IsRunningUnderSysAcc">
            <summary>
            Gets/Sets a Boolean value indicating if repository service is running under system account.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.DbSchemaVersion">
            <summary>
            Gets/Sets the catalog database schema version.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.RuleAppSchemaVersion">
            <summary>
            Gets/Sets the catalog database Rule Application schema version.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.ServiceRuleAppSchemaVersion">
            <summary>
            Gets/Sets the catalog service Rule Application schema version.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.DefRevisionRecordsToUpgrade">
            <summary>
            Gets/Sets the number of def revision records that need to be upgraded.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.RepositoryAssemblyVersion">
            <summary>
            Gets/Sets the assembly version of the InRule.Repository currently in use by the catalog.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.RepositoryFileVersion">
            <summary>
            Gets/Sets the file version of the InRule.Repository currently in use by the catalog.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.CatalogInfo.ServerRuleAppSchemaUpgradeRequired">
            <summary>
            Gets whether the catalog database requires a Rule Application schema upgrade.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.CryptoUtil.Encrypt(System.String)">
            <summary>
            Takes a string, encrypts it and returns the Base64 encoding of the encrypted bytes.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Service.CryptoUtil.Decrypt(System.String)">
            <summary>
            Takes a base64 string, decrypts it and returns a unicode string.
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Client.CallMetaData.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:InRule.Repository.Client.CallMetaData.RuleApplicationDef">
            <summary>
            Gets or sets the rule application def.
            </summary>
            <value>The rule application def.</value>
        </member>
        <member name="T:InRule.Repository.Client.CatalogOperation">
            <summary>
            Keeps track of current executed catalog operation
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogState.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogState.CheckedOut">
            <summary>
            Checked out state
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogState.CheckedIn">
            <summary>
            Checked In
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogState.Added">
            <summary>
            Newly added to catalog-based app
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogState.CheckedOutByOtherUsers">
            <summary>
            Used to indiciate the status of def when checked-out by other users.
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogSharingState.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogSharingState.Shared">
            <summary>
            represents the def is being shared by some other ruleapp
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogSharingState.SharedAsMaster">
            <summary>
            represents the def is being shared in the master ruleapp
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogSharingState.SharedByMaster">
            <summary>
            represents the def is being shared by another master ruleapp
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogSharingState.SharedAsSchema">
            <summary>
            indicates that this is shared but that it cannot be bound or individually checked out
            </summary>
        </member>
        <member name="T:InRule.Repository.CatalogDefState">
            <summary>
            Enum to maintain def status for a ruleapp from catalog
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogDefState.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:InRule.Repository.CatalogDefState.Deprecated">
            <summary>
            represents the def is depreacted or not.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.RuleAppCheckOutMode">
            <summary>
            keeps track of Ruleapp checkout options.. at the ruleapp level
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesUserNameExist(System.String)">
            <summary>
            Determine if <see cref="T:InRule.Security.RuleUser"/> exists by Name
            </summary>
            <param name="username"></param>
            <returns>true if exists.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetUserByName(System.String)">
            <summary>
            Get <see cref="T:InRule.Security.RuleUser"/> meta-info by Name
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetUsers(System.Boolean)">
            <overloads>
            Get <see cref="T:InRule.Security.RuleUser"/>s, by InActive filter or specified Ids.
            </overloads>
            <summary>
            Get all <see cref="T:InRule.Security.RuleUser"/>s, including InActive if specified.
            </summary>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetGroups(System.Boolean)">
            <overloads>
            Get <see cref="T:InRule.Security.RuleGroup"/>s, by InActive filter or specified Ids.
            </overloads>
            <summary>
            Get all <see cref="T:InRule.Security.RuleGroup"/>s, including InActive if specified.
            </summary>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetUsers(System.Int32[])">
            <summary>
            Get one or more <see cref="T:InRule.Security.RuleUser"/>s by Id.
            </summary>
            <param name="users"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetGroups(System.Int32[])">
            <summary>
            Get one or more <see cref="T:InRule.Security.RuleGroup"/>s by Id.
            </summary>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.SetUserPassword(System.Int32,System.String)">
            <overloads>
            Set <see cref="T:InRule.Security.RuleUser"/> password by Id.
            </overloads>
            <summary>
            Set <see cref="T:InRule.Security.RuleUser"/> password by Id.
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <remarks>
            	<para>PreConditions:</para>
            	<list type="number">
            		<item>
                    <description>The configured authentication provider must support setting the password, which
            		may be determined using <see cref="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesProviderSupportSetPassword"/>.</description>
            		</item>
            	</list>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The password for the specified <see cref="T:InRule.Security.RuleUser"/> has been changed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.SetUserPassword(InRule.Security.RuleUser,System.String)">
            <summary>
            Set <see cref="T:InRule.Security.RuleUser"/> password by Id specified in a <see cref="T:InRule.Security.RuleUser"/>.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <remarks>
            	<para>PreConditions:</para>
            	<list type="number">
            		<item>
                    <description>The configured authentication provider must support setting the password, which
            		may be determined using <see cref="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesProviderSupportSetPassword"/>.</description>
            		</item>
            	</list>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The password for the specified <see cref="T:InRule.Security.RuleUser"/> has been changed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRolesForUser(InRule.Security.RuleUser)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRole"/>s a <see cref="T:InRule.Security.RuleUser"/> belongs to.
            Note: Roles returned will be a complete set of the user roles and group roles if any.
            </summary>
            Use <remarks cref="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetExplicitRolesForUser(InRule.Security.RuleUser)"> to get only user roles.</remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetExplicitRolesForUser(InRule.Security.RuleUser)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRole"/>s a <see cref="T:InRule.Security.RuleUser"/> belongs to.
            Note: Roles returned will not be a complete set of the user roles and group roles.
            </summary>
            Use <remarks cref="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRolesForUser(InRule.Security.RuleUser)"> to get complete user roles.</remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRolesForGroup(InRule.Security.RuleGroup)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleGroupRole"/>s a <see cref="T:InRule.Security.RuleGroup"/> belongs to.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRoles">
            <summary>
            Get list of all <see cref="T:InRule.Security.RuleUserRole"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetPermissionsForRole(InRule.Security.RuleUserRole)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRolePermissions"/> associated with a <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRole"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRolesForPermission(InRule.Security.RuleUserRolePermissions)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRole"/>s associated with a <see cref="T:InRule.Security.RuleUserRolePermissions"/>.
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetPermissions">
            <summary>
            Get list of all <see cref="T:InRule.Security.RuleUserRolePermissions"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesUserHavePermissions(System.Int32,InRule.Security.RuleUserRolePermissions[])">
            <overloads>
            Determine if specified <see cref="T:InRule.Security.RuleUser"/> has specified <see cref="T:InRule.Security.RuleUserRolePermissions"/>.
            </overloads>		
            <summary>
            Determine if specified <paramref name="userId"/> has specified <see cref="T:InRule.Security.RuleUserRolePermissions"/>
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
            <returns>true if specified <see cref="T:InRule.Security.RuleUser"/> has all specified <see cref="T:InRule.Security.RuleUserRolePermissions"/>.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesUserHavePermissions(InRule.Security.RuleUser,InRule.Security.RuleUserRolePermissions[])">
            <summary>
            Determine if specified <see cref="T:InRule.Security.RuleUser"/> has specified <see cref="T:InRule.Security.RuleUserRolePermissions"/>
            </summary>
            <param name="aUser"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetRoleByName(System.String)">
            <summary>
            Get <see cref="T:InRule.Security.RuleUserRole"/> by <see cref="P:InRule.Security.RuleUserRole.Name"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.UpdateRole(InRule.Security.RuleUserRole)">
            <summary>
            Update <see cref="T:InRule.Security.RuleUserRole"/> meta-info including <see cref="P:InRule.Security.RuleUserRole.Name"/>.
            </summary>
            <param name="ruleUserRole"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>Meta-info for the specified <see cref="T:InRule.Security.RuleUserRole"/> has been set.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddUser(System.String,System.String)">
            <summary>
            Add new <see cref="T:InRule.Security.RuleUser"/>.
            </summary>
            <param name="username"></param>
            <param name="password">Note that this parameter is ignored if provider does not support setting password.</param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddHashedUser(System.String,System.String)">
            <summary>
            Add new <see cref="T:InRule.Security.RuleUser"/> whose password has already been encrypted or hashed.
            </summary>
            <param name="username"></param>
            <param name="password">Hashed, or encoded, password</param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddUserToRole(InRule.Security.RuleUser,InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleUser"/> to <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveUserFromRole(InRule.Security.RuleUser,InRule.Security.RuleUserRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleUser"/> from <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveGroupFromRole(InRule.Security.RuleGroup,InRule.Security.RuleGroupRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleGroup"/> from <see cref="T:InRule.Security.RuleGroupRole"/>.
            </summary>
            <param name="group"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleGroup"/> has been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddPermissionsToRole(InRule.Security.RuleUserRolePermissions[],InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleUserRolePermissions"/> to <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRolePermissions"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRolePermissions"/> have been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddRolesToPermission(InRule.Security.RuleUserRole[],InRule.Security.RuleUserRolePermissions)">
            <summary>
            Add <see cref="T:InRule.Security.RuleUserRole"/>s to a <see cref="T:InRule.Security.RuleUserRolePermissions"/>.
            </summary>
            <param name="roles"></param>
            <param name="aPermission"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRole"/>s have been added to the <see cref="T:InRule.Security.RuleUserRolePermissions"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemovePermissionsFromRole(InRule.Security.RuleUserRolePermissions[],InRule.Security.RuleUserRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleUserRolePermissions"/> from a <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRolePermissions"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRolePermissions"/> have been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveRolesFromPermission(InRule.Security.RuleUserRole[],InRule.Security.RuleUserRolePermissions)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleUserRole"/> from a <see cref="T:InRule.Security.RuleUserRolePermissions"/>/
            </summary>
            <param name="roles"></param>
            <param name="aPermission"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="T:InRule.Security.RuleUserRole"/>s have been removed from the specified <see cref="T:InRule.Security.RuleUserRolePermissions"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddRole(System.String)">
            <summary>
            Add a new <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRole"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveRole(InRule.Security.RuleUserRole)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleUserRole"/> 
            </summary>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRole"/> has been removed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.UpdateUser(InRule.Security.RuleUser)">
            <summary>
            Update <see cref="T:InRule.Security.RuleUser"/> meta-info including <see cref="P:InRule.Security.RuleUser.Name"/>, <see cref="P:InRule.Security.RuleUser.IsActive"/>.
            </summary>
            <param name="user"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>Meta-info for the <see cref="T:InRule.Security.RuleUser"/> has been set.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.UpdateGroup(InRule.Security.RuleGroup)">
            <summary>
            Update <see cref="T:InRule.Security.RuleGroup"/> meta-info including <see cref="P:InRule.Security.RuleGroup.Name"/>, <see cref="P:InRule.Security.RuleGroup.IsActive"/>.
            </summary>
            <param name="group"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>Meta-info for the <see cref="T:InRule.Security.RuleGroup"/> has been set.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.DoesProviderSupportSetPassword">
            <summary>
            Determine if configured authentication provider supports setting password via <see cref="T:InRule.Repository.Client.RuleCatalogConnection"/>.
            </summary>
            <remarks>Internal database provider does support setting password, external LDAP provider does not.</remarks>
            <returns>true if configured provider supports setting password via <see cref="T:InRule.Repository.Client.RuleCatalogConnection"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveGroup(InRule.Security.RuleGroup)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleGroup"/>
            </summary>
            <param name="group"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="T:InRule.Security.RuleGroup"/> has been removed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.RemoveUser(InRule.Security.RuleUser)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleUser"/>
            </summary>
            <param name="user"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="T:InRule.Security.RuleUser"/> has been removed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.ValidatePermissions(InRule.Repository.RuleApplicationDef)">
            <summary>
            Validates changes to a rule application against the repository.
            </summary>
            <param name="ruleAppDef">The edited rule application</param>
            <returns>A collection containing any errors reported during the validation.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetConfigParam(System.String)">
            <summary>
            Returns the value of a config parameter stored in the repository database
            </summary>
            <param name="paramName">The name of the config parameter</param>
            <returns>The value of the config parameter</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.SetConfigParam(System.String,System.String)">
            <summary>
            NOTE: FOR INTERNAL USE ONLY
            Saves the value of a config parameter into the repository database
            </summary>
            <param name="paramName">The name of the config parameter</param>
            <param name="paramValue">The value of the named parameter</param>
            <remarks>This method will throw an expection if not called from an InRule Assembly</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.HasPermission(InRule.Security.RuleUserRolePermissions,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Checks if a the currently logged in user has a permission at a given node.
            </summary>
            <param name="permission">The permission is check for</param>
            <param name="def">The def at a given node in the rule application</param>
            <returns>returns true if the user has the given permission</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.HasPermission(InRule.Security.RuleUserRolePermissions)">
            <summary>
            Checks if a the currently logged in user has a permission at the Repository level.
            </summary>
            <param name="permission">The permission is check for</param>
            <returns>returns true if the user has the given permission</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetCatalogInformation">
            <summary>
            Gets the <see cref="T:InRule.Repository.Client.CatalogInfo"/> for this repository connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddGroup(System.String)">
            <summary>
            Add new <see cref="T:InRule.Security.RuleGroup"/>.
            </summary>
            <param name="groupName">Name of the Group to add.</param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleGroup"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AddGroupToRole(InRule.Security.RuleGroup,InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleGroup"/> to <see cref="T:InRule.Security.RuleGroupRole"/>.
            </summary>
            <param name="group"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleGroup"/> has been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleRepositoryConnectionBase`2.GetGroupByName(System.String)">
            <summary>
            Get <see cref="T:InRule.Security.RuleGroup"/> meta-info by Name
            </summary>
            <param name="groupname"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.AggExecStats">
            <summary>
            Gets Aggregate stats for client-side repository service calls.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.ServiceAggExecStats">
            <summary>
            Gets Aggregate stats for service-side repository service calls.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.Timeout">
            <summary>
            Gets or sets the client-side timeout for communications with the repository service. Default is 30sec.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.User">
            <summary>
            Get authenticated-user info associated with this connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.ServiceUri">
            <summary>
            Gets repository service uri used by this connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.UseIntegratedSecurity">
            <summary>
            Specifies if single-signon was used while creating repository connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleRepositoryConnectionBase`2.Roles">
            <summary>
            Gets a list of <see cref="T:InRule.Security.RuleUserRole"/>s for the authenticated User for this connection.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.#ctor(System.Uri,System.TimeSpan,System.String,System.String)">
            <summary>
            Create connection, authentication delayed until first use. No authentication occurs if only cached accesses occur.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.#ctor(System.Uri,System.TimeSpan)">
            <summary>
            Creates an authenticated connection using single-signon
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.#ctor(System.Uri)">
            <summary>
            Creates an authenticated connection using single-signon and default timeout.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.#ctor(System.Uri,System.TimeSpan,System.String)">
            <summary>
            Creates a connection using single signon. Authentication occurs on first use 
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.#ctor(InRule.Repository.Client.RuleCatalogConnection,System.TimeSpan)">
            <summary>
            Create connection from existing connection, passing revised connection timeout
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.Ping">
            <summary>
            Makes an unauthenticated "no operation" call to the catalog service.
            </summary>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">Throw RepositoryServiceException if operation fails to connect to the catalog service.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CreateRuleApplication(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Creates a new rule application in the catalog. New rule application will be checked in upon return.
            </summary>
            <param name="ruleapp">Rule application to create.</param>
            <param name="comments">A comment for the first checkin of the rule application.</param>
            <returns>The newly created rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if Duplicate Ruleapp Names found in catalog.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CreateRuleApplication(InRule.Repository.RuleApplicationDef,System.String,InRule.Repository.Client.DefSharingBehavior)">
            <summary>
            Creates a new rule application in the catalog. New rule application will be checked in upon return.
            </summary>
            <param name="ruleapp">Rule application to create.</param>
            <param name="comments">A comment for the first checkin of the rule application.</param>
            <param name="shareExistingDefs">If equal to DefSharingBehavior.Share, all ruleapp managed elements that match the content of the latest revision of existing sharable server managed elements will be shared from the server; otherwise, no share relationships will be established - all ruleapp managed elements will be created as revision 1.</param>
            <returns>The newly created rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if Duplicate Ruleapp Names found in catalog.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Promotes a rule application into the catalog. This is intended to be used only when the source rule application originated from another catalog.
            </summary>
            <overloads cref="M:InRule.Repository.Client.RuleCatalogConnection.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String,System.String)">PromoteRuleApplication without description.</overloads>
            <param name="ruleapp">Rule application to create or duplicate.</param>
            <param name="comment">Checkin comment for new rule application revision.</param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="bullet">
            		<item><description>If a rule application with the same guid already exists in the catalog, this app will be checked in as the latest revision of that app.</description></item>
            		<item><description>If no rule application with the same guid already exists in the catalog, this app will be checked in as the first revision.</description></item>
            		<item><description>Managed elements within the rule application are shared ONLY when guid-matched managed element exists in target catalog, is already marked sharable, and the content of the submitted definition matches the content of the latest revision of definition in the target catalog.</description></item>
            	</list> 
            </remarks>
            <returns>The newly promoted rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If Duplicate Ruleapp Names found in catalog.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If rule application having same guid as ruleapp exists in target catalog and any part of it is checked-out.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String,System.String)">
            <summary>
            Promotes a rule application into the catalog. This is intended to be used only when the source rule application originated from another catalog.
            </summary>
            <param name="ruleapp">Rule application to create or duplicate.</param>
            <param name="description">Description for newly promoted rule application (use NULL to keep existing, if any).</param>
            <param name="comment">Checkin comment for new rule application revision.</param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="bullet">
            		<item><description>If a rule application with the same guid already exists in the catalog, this app will be checked in as the latest revision of that app.</description></item>
            		<item><description>If no rule application with the same guid already exists in the catalog, this app will be checked in as the first revision.</description></item>
            		<item><description>Managed elements within the rule application are shared ONLY when guid-matched managed element exists in target catalog and is already marked sharable, and the content of the submitted definition matches the content of the latest revision of definition in the target catalog.</description></item>
            	</list> 
            </remarks>
            <returns>The newly promoted rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If Duplicate Ruleapp Names found in catalog.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If rule application having same guid as ruleapp exists in target catalog and any part of it is checked-out.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.OverwriteRuleApplication(System.Guid,InRule.Repository.RuleApplicationDef,System.Boolean,System.String)">
            <summary>
            Creates and checks in new revision of ruleapp; can be used to completely overwrite an existing ruleapp with another one.
             If target ruleapp has any checkouts (including by this user), an exception is thrown as described below.
            </summary>
            <param name="targetRuleAppGuid">Guid for ruleapp to be overwritten in the database. This guid is *always* preserved regardless of newRuleApp.Guid value</param>
            <param name="newRuleApp">Rule application to be saved.</param>
            <param name="checkin">True to checkin after overwrite; false to leave the new ruleapp checked out.</param>
            <param name="comment">Checkin comment for new rule application revision. If checkin is false, this is ignored.</param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="bullet">
            		<item><description>New revision of targetRuleAppGuid is created - if checkin=true this is a new public revision, otherwise only a new internal revision</description></item>
            		<item><description>When newRuleApp.Guid matches targetRuleAppGuid, managed elements corresponding to guid-matched shared managed elements in the catalog are always preserved as shared.</description></item>
            		<item><description>When newRuleApp.Guid does not match targetRuleAppGuid, managed elements matching shared managed elements are preserved as shared only when the content of the newRuleApp managed element matches that of the latest revision of a guid-matched shared managed element in the catalog.</description></item>
            		<item><description>The returned <see cref="T:InRule.Repository.RuleApplicationDef"/>.Guid is set to targetRuleAppGuid</description></item>
            	</list> 
            </remarks>
            <returns>The newly created rule application revision.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If any exclusive checkouts exist for app specified by targetRuleAppGuid</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If any shared managed elements have a different app specified as master rule application</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.Save(InRule.Repository.RuleApplicationDef)">
            <summary>
            Saves changes made in a checked-out rule application to the catalog, without checking them in.
            </summary>
            <param name="ruleapp">Rule application to be saved.</param>
            <returns>The saved state of the rule application, including new guids for defs that become part of (or are separated from) the ruleapp schema.</returns>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If a def with same name is already present.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">When creating new def without ruleapp checkout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.Checkin(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checks in all outstanding changes to this rule application, and any associated checked-out defs. Public revision numbers are updated upon return.
            </summary>
            <param name="ruleapp">Rule application to be checked in.</param>
            <param name="comment">An optional checkin comment.</param>
            <returns>The checked in rule application.</returns>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CheckoutRuleApplication(InRule.Repository.RuleApplicationDef,System.Boolean,System.String)">
            <summary>
            Checks out a rule application, optionally checking out all subordinate defs.
            </summary>
            <param name="ruleapp">The rule application to be checked out.</param>
            <param name="recursive">Flag to indicate whether all subordinate defs should also be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.DefCheckedOutByOtherUserException">If any def is checked out by other user.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If any shared managed elements have a different app specified as master rule application</exception>
            <remarks>If the checked out revision of any def is not the latest, stale refresh should be performed before checkout.</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CheckoutRuleApplicationAndSchema(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checks out the ruleappdef (non-recursive) and schema for a given rule application.
            </summary>
            <param name="ruleapp">The rule application whose schema will be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.DefCheckedOutByOtherUserException">If the def is checked out by other user.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If the schema managed element has a different app specified as master rule application</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CheckoutDef(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.String)">
            <summary>
            Checks out a single def inside the given rule application.
            </summary>
            <param name="ruleapp">The rule application containing the defs to be checked out.</param>
            <param name="def">The def to be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If the same user tries to check out def twice.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If the def is shared and has a different app specified as master rule application</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CheckoutDefs(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.RuleRepositoryDefBase},System.String)">
            <summary>
            Checks out listed defs inside the given rule application.
            </summary>
            <param name="ruleapp">The rule application containing the defs to be checked out.</param>
            <param name="defs">The defs to be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">If any shared managed elements have a different app specified as master rule application</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoRuleAppCheckout(InRule.Repository.RuleApplicationDef)">
            <summary>
            Reverts checkout of a checked-out rule application and any contained, checked-out defs.
            </summary>
            <param name="ruleapp">Rule application to be reverted.</param>
            <returns>Rule application in its prior, non-checked-out state.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoRuleAppCheckout(InRule.Repository.Service.Data.Def,System.Boolean)">
            <summary>
            Reverts checkout of a checked-out rule application and any contained, checked-out defs. This is intended as an administrative function.
            </summary>
            <param name="app">Reference to the rule application to be reverted.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>Rule application in its prior, non-checked-out state.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoRuleAppSchemaCheckout(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Reverts checkout of the rule application schema for a given rule application; not intended for use with rule application itself.
             Note that upon return from this method, the rule application schema is updated to the reverted def revision.
            </summary>
            <param name="ruleapp">The rule application in which the schema exists.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoDefCheckout(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Reverts checkout of one def inside a given rule application; not intended for use with rule application itself.
             Note that upon return from this method, the rule application is updated to the reverted def revisions.
            </summary>
            <param name="ruleapp">Rule application in which def exists.</param>
            <param name="def">Def to be reverted.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoDefCheckouts(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.RuleRepositoryDefBase},System.Boolean)">
            <summary>
            Reverts checkout of one or more defs inside a given rule application; not intended for use with rule application itself.
             Note that upon return from this method, the rule application is updated to the reverted def revisions.
            </summary>
            <param name="ruleapp">Rule application in which defs exist.</param>
            <param name="defs">Defs to be reverted.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the def is checked in and user tries to UndoCheckout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UndoCheckoutSet(InRule.Repository.RuleApplicationDef,InRule.Repository.Service.Data.CheckoutInfo,System.Boolean)">
            <summary>
            Reverts all checkouts related to a single checkout set.  Can be used with rule application.
             Note that upon return from this method, the rule application is updated to the reverted def revisions.
            </summary>
            <param name="ruleapp">Rule application in which checkouts will be undone.</param>
            <param name="info">Checkout info obtained from GetCheckoutSets().</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteLatestRuleAppRevision(System.Guid)">
            <summary>
            Deletes the latest revision of a rule application, and any associated defs. Public revision numbers are updated upon return.
            </summary>
            <param name="appGuid">The rule application guid to be deleted.</param>
            <returns>A new revision of the rule application, prior to the deleted one.</returns>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If appGuid is empty.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteLatestRuleAppRevision(InRule.Repository.RuleApplicationDef)">
            <summary>
            Deletes the latest revision of a rule application, and any associated defs. Public revision numbers are updated upon return.
            </summary>
            <param name="ruleAppDef">The rule application revision to be deleted.</param>
            <returns>A new revision of the rule application, prior to the deleted one.</returns>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentNullException">If ruleAppDef is null.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If service encounters exception.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteLatestRuleAppRevision(System.String)">
            <summary>
            Deletes the latest revision of a rule application, and any associated defs. Public revision numbers are updated upon return.
            </summary>
            <param name="ruleAppName">The name of the rule application whose latest revision is to be deleted.</param>
            <returns>A new revision of the rule application, prior to the deleted one.</returns>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentException">If ruleAppName is null or empty.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If service encounters exception.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeletePreviousRuleAppRevisions(System.Guid,System.Int32)">
            <summary>
            Deletes all previous revisions up to a specified rule application revision.  
            </summary>
            <param name="appGuid">Guid for rule application to be deleted from.</param>
            <param name="maxRevisionToKeep">The maximum rule application revision to keep.  All previous revisions will be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If maxRevisionToKeep for rule application has no prior revisions.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeletePreviousRuleAppRevisions(InRule.Repository.RuleApplicationDef,System.Int32)">
            <summary>
            Deletes all previous revisions up to a specified rule application revision.  
            </summary>
            <param name="ruleAppDef">The rule application to be deleted from.</param>
            <param name="maxRevisionToKeep">The maximum rule application revision to keep.  All previous revisions will be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentNullException">If ruleAppDef is null.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If maxRevisionToKeep for rule application has no prior revisions.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeletePreviousRuleAppRevisions(System.String,System.Int32)">
            <summary>
            Deletes all previous revisions up to a specified rule application revision.  
            </summary>
            <param name="ruleAppName">The name for rule application to be delete from.</param>
            <param name="maxRevisionToKeep">The maximum rule application revision to keep.  All previous revisions will be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">If the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentException">If ruleAppName is null or empty.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If maxRevisionToKeep for rule application has no prior revisions.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteWorkspaceRevision(System.Guid,System.Int32)">
            <summary>
            Deletes the private workspace revision stored for a given rule application and user
            </summary>
            <param name="appGuid">The rule application guid to be deleted that is associated with the workspace revision.</param>
            <param name="userId">The user who is associated with this workspace.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteAllRuleAppRevisions(System.Guid)">
            <summary>
            Deletes a rule application, all revisions, and any associated defs, passing <see cref="T:System.Guid"/>.
            </summary>
            <param name="appGuid">The rule application guid to be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permissions.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If appGuid is null.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteAllRuleAppRevisions(InRule.Repository.RuleApplicationDef)">
            <summary>
            Deletes a rule application, all revisions, and any associated defs, passing <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
            <param name="ruleAppDef">The rule application to be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentNullException">If ruleAppDef is null.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If service encounters exception.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DeleteAllRuleAppRevisions(System.String)">
            <summary>
            Deletes a rule application, all revisions and any associated defs, given the rule application name
            </summary>
            <param name="ruleAppName">The name of the rule application to be deleted.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permissions.</exception>
            <exception cref="T:System.ArgumentException">If ruleAppName is null or empty.</exception>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">If service encounters exception.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.CreateLabel(System.String,System.String)">
            <summary>
            Creates a label in the catalog without associating it with a def or rule application.
            </summary>
            <param name="label">The label to create.</param>
            <param name="comment">An optional comment that further describes the intent of the label.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.RenameLabel(System.String,System.String)">
            <summary>
            Creates a label in the catalog without associating it with a def or rule application.
            </summary>
            <param name="oldLabel">The label to overwrite.</param>
            <param name="newLabel">The label to overwrite with.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.ApplyLabel(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Creates a label in the catalog and associates it with a specific rule application revision.
             If the label already exists (determined via case-insensitive compare), the existing label is used.
             If another version of this ruleapp is already associated with this label, the label will be promoted to this version.
            </summary>
            <param name="ruleapp">The rule application to associate with the label.</param>
            <param name="label">The label to create; if, using a lower-case compare, the label already exists then the existing label will be used.</param>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the ruleapp is checked out and user tries assign label.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.ApplyLabel(InRule.Repository.Service.Data.Def,System.String)">
            <summary>
            Creates a label in the catalog and associates it with a specific rule application revision.
             If the label already exists (determined via case-insensitive compare), the existing label is used.
             If another version of this ruleapp is already associated with this label, the label will be promoted to this version.
            </summary>
            <param name="app">Reference to the rule application to associate with the label.</param>
            <param name="label">The label to create; if, using a lower-case compare, the label already exists then the existing label will be used.</param>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the def is checked out and user tries assign label.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetDeprecatedFlagForDef(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Sets the Deprecated flag for a given def.
            </summary>
            <param name="def">The def whose flag will be set.</param>
            <param name="isDeprecated">The value to use for the def's Deprecated flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetDeprecatedFlagForDef(System.Guid,System.Boolean)">
            <summary>
            Sets the Deprecated flag for a given def.
            </summary>
            <param name="defGuid">Guid of the def whose flag will be set.</param>
            <param name="isDeprecated">The value to use for the def's Deprecated flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetShareableFlagForDef(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Sets the Shareable flag for a given def.
            </summary>
            <param name="def">The def whose flag will be set.</param>
            <param name="isShareable">The value to use for the def's Shareable flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetShareableFlagForDef(System.Guid,System.Boolean)">
            <summary>
            Sets the Shareable flag for a given def.
            </summary>
            <param name="defGuid">Guid for the def whose flag will be set.</param>
            <param name="isShareable">The value to use for the def's Shareable flag.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permission to modify shared elements</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetNewDefsShareableFlagForRuleApp(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Sets the NewDefsShareable flag for a given rule application.
            </summary>
            <param name="ruleapp">The rule application whose flag will be set.</param>
            <param name="newDefsShareable">The value to use for the rule application's NewDefsShareable flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetNewDefsShareableFlagForRuleApp(System.Guid,System.Boolean)">
            <summary>
            Sets the NewDefsShareable flag for a given rule application.
            </summary>
            <param name="appGuid">Guid of the rule application whose flag will be set.</param>
            <param name="newDefsShareable">The value to use for the rule application's NewDefsShareable flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetMasterRuleAppForDef(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Sets the master ruleapp for a given def.
            </summary>
            <param name="defGuid">Guid of the def.</param>
            <param name="masterRuleApp">The master ruleapp guid; pass null or Guid.Empty to clear master ruleapp value for this def.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetMasterRuleAppForDef(InRule.Repository.RuleRepositoryDefBase,System.Nullable{System.Guid})">
            <summary>
            Sets the master ruleapp for a given def.
            </summary>
            <param name="def">The def.</param>
            <param name="masterRuleApp">The master ruleapp guid; pass null or Guid.Empty to clear master ruleapp value for this def.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetIsActiveFlagForRuleApp(System.Guid,System.Boolean)">
            <summary>
            Sets a flag indicating whether the ruleapp is available for catalog operations.
            </summary>
            <param name="appGuid">Guid of the ruleapp.</param>
            <param name="isActive">The active flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.SetIsActiveFlagForRuleApp(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Sets a flag indicating whether the ruleapp is available for catalog operations.
            </summary>
            <param name="app">The ruleapp.</param>
            <param name="isActive">The active flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetStaleDefsForRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a list of defs associated with this ruleapp that are currently out-of-date, along with associated latest public revision for each.
            </summary>
            <param name="ruleapp">The rule application for which to find stale defs.</param>
            <returns>Information about stale defs in the ruleapp.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UpdateStaleDefsInRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Replaces all stale defs in the ruleapp with the latest revisions from the server; ruleapp must be checked in to permanently associate latest defs.
             If passed-in ruleapp has no stale defs, the app is returned and no further checkin operation is necessary.
             Note that any existing ruleapp mods are saved to the server during this operation.
            </summary>
            <param name="ruleapp">The ruleapp to use during the update operation.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UpdateStaleDefsInRuleApp(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            Replaces a subset of all stale defs in the ruleapp with the latest revisions from the server; ruleapp must be checked in to permanently associate latest defs.
             If passed-in ruleapp has no stale defs, the app is returned and no further checkin operation is necessary.
             Note that any existing ruleapp mods are saved to the server during this operation.
            </summary>
            <param name="ruleapp">The ruleapp to use during the update operation.</param>
            <param name="defsToRefresh">The stale defs to refresh in the ruleapp.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UpdateStaleDefsInRuleApp(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.Service.Data.Def})">
            <summary>
            Replaces a subset of all stale defs in the ruleapp with the latest revisions from the server; ruleapp must be checked in to permanently associate latest defs.
             If passed-in ruleapp has no stale defs, the app is returned and no further checkin operation is necessary.
             Note that any existing ruleapp mods are saved to the server during this operation.
            </summary>
            <param name="ruleapp">The ruleapp to use during the update operation.</param>
            <param name="defsToRefresh">References to the stale defs to refresh in the ruleapp.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleApp(InRule.Repository.Service.Data.Def)">
            <summary>
            Retrieves a rule application from the catalog, using the exact guid and internal revision specified.
            </summary>
            <param name="app">A reference to an existing rule application revision.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetLatestRuleAppRevision(System.String)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog, using the rule application name.
            </summary>
            <param name="ruleappName">Name of ruleapp to retrieve.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetLatestRuleAppRevision(System.String,InRule.Repository.Client.DefRefreshBehavior)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog, using the rule application name.
            </summary>
            <param name="ruleappName">Name of ruleapp to retrieve.</param>
            <param name="refreshBehavior">Which stale defs to refresh during ruleapp retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetLatestRuleAppRevision(System.Guid)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <returns>The rule application requested.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if ruleapp is not in catalog</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetLatestRuleAppRevision(System.Guid,InRule.Repository.Client.DefRefreshBehavior)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <param name="refreshBehavior">Which stale defs to refresh during ruleapp retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetSpecificRuleAppRevision(System.Guid,System.Int32)">
            <summary>
            Retrieves a rule application from the catalog, using the indicated public revision number.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <param name="publicRevision">The public revision number to use during retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppByLabel(System.Guid,System.String)">
            <summary>
            Retrieves a rule application from the catalog, using the indicated label.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <param name="label">The label to use during retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.ReplaceRuleAppSchema(InRule.Repository.RuleApplicationDef,InRule.Repository.Service.Data.Def)">
            <summary>
            Swaps the existing schema in 'ruleapp' with the new schema. Use Def.FromRuleAppSchema() to obtain a Def for a schema.
            </summary>
            <param name="ruleapp">Rule application that will have the new schema.</param>
            <param name="newSchema">Reference to the new schema.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.ReplaceRuleAppSchema(InRule.Repository.RuleApplicationDef,InRule.Repository.Service.Data.Def,System.Collections.Generic.IEnumerable{InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            Swaps the existing schema in 'ruleapp' with the new schema and associated DataElements.
            Use Def.FromRuleAppSchema() to obtain a Def for a schema.
            </summary>
            <param name="ruleapp">Rule application that will have the new schema.</param>
            <param name="newSchema">Reference to the new schema.</param>
            <param name="implicitElements">Collection of implicit elements to save with the new schema.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDefsForRuleAppSchema(InRule.Repository.Service.Data.Def)">
            <summary>
            Gets the set of defs associated with a given schema. Use Def.FromRuleAppSchema() to obtain a Def for a schema.
             Note that entity rulesets are not available from the results of this call, as they are distinctly managed and are not considered part of the app schema.
            </summary>
            <param name="schema">Reference to the schema.</param>
            <returns>An ordered list of defs in the schema.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDef(InRule.Repository.Service.Data.Def)">
            <summary>
            Retrieves a def from the catalog, using the exact guid and internal revision specified.
             Not for use with ruleapp defs or schema elements.
            </summary>
            <param name="def">A reference to the def to be retrieved.</param>
            <returns>The requested def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetSpecificDefRevision(System.Guid,System.Int32)">
            <summary>
            Retrieves a def from the catalog, using the indicated public revision number.  Not for use with ruleapp defs or schema elements.
            </summary>
            <param name="defGuid">The def guid to use during retrieval.</param>
            <param name="publicRevision">The public revision number to use during retrieval.</param>
            <returns>The requested def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppSummary(System.Boolean)">
            <summary>
            Retrieves a list of all rule applications in the catalog, and associated information.
            </summary>
            <param name="includeCheckoutsForAllUsers">A flag indicating whether to include all users' ruleapp checkouts in the results, or only this user's checkouts.</param>
            <returns>The rule application list.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetAllRuleApps">
            <summary>
            Retrieves a list of all rule applications in the catalog.
            </summary>
            <returns>The rule application list, mapped to extra information about each ruleapp.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDefsForRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves information about all defs for the indicated rule application revision.
            </summary>
            <param name="ruleapp">The rule application to use during request processing.</param>
            <returns>The requested def information.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDefInfos(System.Collections.Generic.ICollection{InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            Returns additional state information about a set of server-managed defs.
             Does not return information for schema child defs.
            </summary>
            <param name="defs">A set of defs for which to return state information.</param>
            <returns>State information for each incoming def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDefInfos(System.Collections.Generic.ICollection{InRule.Repository.Service.Data.Def})">
            <summary>
            Returns additional state information about a set of server-managed defs.
             Does not return information for schema child defs.
            </summary>
            <param name="defs">A set of def references for which to return state information.</param>
            <returns>State information for each incoming def reference.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetAllShareableDefs">
            <summary>
            Retrieves a list of all shareable definitions in the catalog. In addition, each definition is associated with a list of rule application revisions where it is being consumed.
            </summary>
            <returns>Map of all shareable defs.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckoutSets(System.Boolean)">
            <summary>
            Retrieves a list of all current checkout sets in the catalog.
            </summary>
            <param name="forAllUsers">A flag indicating whether to retrieve checkout sets for current user, or all users.</param>
            <returns>A list of checkout sets.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckoutSets(System.Guid)">
            <summary>
            Retrieves a list of all current checkout sets for the indicated rule application
            </summary>
            <param name="appGuid">Guid of the rule application.</param>
            <returns>A list of checkout sets.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckoutSets(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a list of all current checkout sets for the indicated rule application
            </summary>
            <param name="ruleapp">The rule application.</param>
            <returns>A list of checkout sets.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckedoutDefsForRuleApp(System.Guid)">
            <summary>
            Retrieves a map of all defs checked out to the current user in the specified rule application.
            </summary>
            <param name="appGuid">Guid of the rule application.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckedoutDefsForRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a map of all defs checked out to the current user in the specified rule application.
            </summary>
            <param name="ruleapp">The rule application.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckedoutDefsForRuleApp(System.Guid,System.Boolean)">
            <summary>
            Retrieves a map of all defs checked out in the specified rule application.
            </summary>
            <param name="appGuid">Guid of the rule application.</param>
            <param name="forAllUsers">A flag indicating whether def checkouts for all users should be returned, or only checkouts for the current user.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckedoutDefsForRuleApp(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Retrieves a map of all defs checked out in the specified rule application.
            </summary>
            <param name="ruleapp">The rule application.</param>
            <param name="forAllUsers">A flag indicating whether def checkouts for all users should be returned, or only checkouts for the current user.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetCheckinHistoryForDef(System.Guid)">
            <summary>
            Retrieves checkin history for a given def.
            </summary>
            <param name="defGuid">Def guid to retrieve history for.</param>
            <returns>A list of checkin records for this def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetLabelsForDef(System.Guid)">
            <summary>
            Retrieves a list of def revisions mapped to a list of labels for each def revision.
            </summary>
            <param name="defGuid">Def guid to retrieve labels for.</param>
            <returns>Mapping of def revisions to lists of labels.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetDefsForLabel(System.String)">
            <summary>
            Retrieves a list of defs associated with a given label.
            </summary>
            <param name="label">Label to retrieve defs for.</param>
            <returns>List of defs.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetAllLabels">
            <summary>
            Retrieves a list of all labels in the catalog, mapped to a list of defs associated with each label.
            </summary>
            <returns>Mapping of labels to lists of defs.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesLabelExist(System.String)">
            <summary>
            Determine if specified Label exists by Name.
            </summary>
            <param name="labelName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UnshareDef(InRule.Repository.RuleApplicationDef,InRule.Repository.Service.Data.Def)">
            <summary>
            Breaks the def sharing link in the catalog and keeps a copy in the current rule application.
             Note that this is a client-side only operation, changes must be commited to the catalog to be durable.
             A check is made with the server to ensure the def has been marked as shared. Otherwise an invalid operation is thrown.
            </summary>
            <param name="ruleapp">The rule application that will contain the unshared def copy.</param>
            <param name="def">The def to unshare. If this def is not part of ruleapp, this operation fails.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.String)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.String,System.Int32)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="publicRevision">The public revision.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.String,System.String)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.Guid)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.Guid,System.Int32)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="guid">The GUID.</param>
            <param name="publicRevision">The public revision.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.GetRuleAppRef(System.Guid,System.String)">
            <summary>
            Gets the <see cref="T:InRule.Repository.Service.Data.RuleAppRef"/>.
            </summary>
            <param name="guid">The GUID.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.String,System.Int32)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by name and revision
            </summary>
            <param name="name">The name</param>
            <param name="publicRevision">The public revision</param>
            <returns><see langword="true"/> if the rule application exists otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.String)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by name
            </summary>
            <param name="name">The name</param>
            <returns><see langword="true"/> if the rule application exists otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.String,System.String)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by name and label
            </summary>
            <param name="name">The name</param>
            <param name="label">The label</param>
            <returns><see langword="true"/> if the rule application exists otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.Guid)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by <see cref="T:System.Guid"/>
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/></param>
            <returns><see langword="true"/> if the rule application exists
            otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.Guid,System.Int32)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by <see cref="T:System.Guid"/> and
            revision
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/></param>
            <param name="publicRevision">The public revision</param>
            <returns><see langword="true"/> if the rule application exists
            otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.DoesRuleAppExist(System.Guid,System.String)">
            <overloads>Checks if the rule application exists</overloads>
            <summary>
            Checks if the rule application exists by <see cref="T:System.Guid"/> and label
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/></param>
            <param name="label">The label</param>
            <returns><see langword="true"/> if the rule application exists otherwise <see langword="false"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.UpgradeRuleAppSchemaVersion">
            <summary>
            Upgrades the Rule Application schema in the catalog database.
            </summary>
            <returns>A <see cref="T:InRule.Repository.Client.UpgradeInfo"/> detailing the outcome of the upgrade process.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.RunDiagnostics">
            <summary>
            Performs a diagnostic check on the catalog database.
            </summary>
            <returns>A <see cref="T:InRule.Repository.Client.DiagnosticInfo"/> indicating whether any errors were found and details of validation rules.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogConnection.RepairCatalog">
            <summary>
            Performs a repair operation on the catalog database.
            </summary>
            <returns>A <see cref="T:InRule.Repository.Client.DiagnosticInfo"/> indicating whether any unresolved errors were found and details of validation rules.</returns>
        </member>
        <member name="T:InRule.Repository.Client.RuleCatalogController">
            <summary>
            Controller class handles all the catalog related operations. 
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.#ctor(InRule.Repository.Client.RuleCatalogConnection,InRule.Repository.Client.RuleCatalogControllerMode)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Client.RuleCatalogController"/> class.
            </summary>
            <param name="connection">RuleCatalog Connection</param>
            <param name="controllerMode">Controller mode</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOut(InRule.Repository.Client.RuleAppCheckOutMode,InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.String)">
            <summary>
            Checkout the ruleapp based on user selected checkout options..
            </summary>
            <param name="userSelectedCheckoutOptions">User selected checkout options.</param>
            <param name="ruleapp">The ruleapp.</param>
            <param name="defToCheckOut">The def to check out.</param>
            <param name="comments">The comments.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutDef(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.String)">
            <summary>
            Checks out a def from a given rule application.
            </summary>
            <param name="mainRuleApp">The RuleApplication containing the def to be checked out.</param>
            <param name="defToCheckout">The def to be checked out.</param>
            <param name="comments">An optional checkout comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutDefs(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.RuleRepositoryDefBase},System.String)">
            <summary>
            Checks out listed defs inside the given rule application.
            </summary>
            <param name="ruleapp">The rule application containing the defs to be checked out.</param>
            <param name="defs">The defs to be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckIn(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checks in all outstanding changes to this rule application, and any associated checked-out defs.
            </summary>
            <param name="ruleapp">Rule application to be checked in.</param>
            <param name="comment">An optional checkin comment.</param>
            <returns>The checked-in rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DeleteLatestRuleAppRevision(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Delete the latest revision of this rule application, and any associated defs.
            </summary>
            <param name="ruleapp">The latest revision of the rule application to be deleted.</param>
            <param name="resetMasterRuleApp">If one or more child elements have this rule application as a master, upon deletion the master designation for these elements will be cleared.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DeleteLatestRuleAppRevision(InRule.Repository.RuleApplicationDef)">
            <summary>
            Delete the latest revision of this rule application, and any associated defs.
            </summary>
            <param name="ruleapp">The latest revision of the rule application to be deleted.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DeleteWorkspace(InRule.Repository.Service.Data.RuleAppInfo,InRule.Security.RuleServiceUser)">
            <summary>
            Deletes workspace.
            </summary>
            <param name="ruleAppInfo"></param>
            <param name="user"></param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DeleteLatestRuleAppRevision(System.Guid,System.Int32)">
            <summary>
            Delete the latest revision of this rule application, and any associated defs.
            </summary>
            <param name="appGuid">The rule application guid to be deleted.</param>
            <param name="publicRevision"></param>       
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DeleteAllRuleAppRevisions(InRule.Repository.RuleApplicationDef)">
            <summary>
            Delete the rule application, all revisions, and any associated defs.
            </summary>
            <param name="ruleapp">Rule application to be deleted.</param>        
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.HasPermission(InRule.Security.RuleUserRolePermissions,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Checks if a the currently logged in user has a permission at a given node.
            </summary>
            <param name="permissionToCheck">The permission to check for</param>
            <param name="def">The def at a given node in the rule application</param>
            <returns>returns true if the user has the given permission</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.HasPermission(InRule.Security.RuleUserRolePermissions)">
            <summary>
            Checks if a the currently logged in user has a permission at the Repository level.
            </summary>
            <param name="permissionToCheck">The permission to check for</param>
            <returns>returns true if the user has the given permission</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetShareableFlagForSchema(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Sets the Shareable flag for RuleApplication schema.
            </summary>
            <param name="ruleAppDef">The RuleApplication containing the schema.</param>
            <param name="isShareable">The value to use for the def's Shareable flag.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permission to modify shared elements</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UnshareDef(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Sets the shareable flag for def.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="def">The def.</param>
            <remarks>When the def is marked unshare, the def becomes local to the app but still remains consumable by other apps.</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetShareableFlagForDef(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Sets the shareable flag for def. 
            </summary>
            <param name="defToShare">The def to share.</param>
            <param name="isShareable">if set to <c>true</c> [is shareable]. if set to false, the def is made local to the app.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetMasterRuleAppForDef(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Associates or disassociates the master rule app for def. Can be used for setting all defs including schema defs.
            </summary>
            <param name="ruleApplicationDef">The rule application def.</param>
            <param name="defToBind">The def to bind.</param>
            <param name="assign">if set to <c>true</c> [assign].</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetStaleDefsForRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a list of defs associated with this ruleapp that are currently out-of-date, along with associated latest public revision for each.
            </summary>
            <param name="ruleApplicationDef">The rule application for which to find stale defs.</param>
            <returns>Information about stale defs in the ruleapp.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateStaleDefInRuleApp(InRule.Repository.RuleApplicationDef,System.Collections.Generic.List{InRule.Repository.Service.Data.Def})">
            <summary>
            Replaces a subset of all stale defs in the ruleapp with the latest revisions from the server; ruleapp must be checked in to permanently associate latest defs.
             If passed-in ruleapp has no stale defs, the app is returned and no further checkin operation is necessary.
             Note that any existing ruleapp mods are saved to the server during this operation.
            </summary>
            <param name="ruleAppDef">The ruleapp to use during the update operation.</param>
            <param name="updates">References to the stale defs to refresh in the ruleapp.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateStaleDefInRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Replaces all stale defs in the ruleapp with the latest revisions from the server; ruleapp must be checked in to permanently associate latest defs.
             If passed-in ruleapp has no stale defs, the app is returned and no further checkin operation is necessary.
             Note that any existing ruleapp mods are saved to the server during this operation.
            </summary>
            <param name="ruleAppDef">The ruleapp to use during the update operation.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppsFromCatalog">
            <summary>
            Gets a list of all rule applications in the catalog, and associated information.
            </summary>
            <returns>The rule application list.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetAllCurrentCheckOuts(InRule.Repository.RuleApplicationDef)">
            <summary>
            Gets a list of all current checkout sets for the indicated rule application
            </summary>
            <param name="ruleApp">The rule application.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetLatestRuleAppRevision(System.Guid)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog, optionally including any checkouts in that application for the current user. Honors revision pull settings for shared defs.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetLatestRuleAppRevision(System.String)">
            <summary>
            Retrieves the latest revision of a rule application from the catalog, using the rule application name.
            </summary>
            <param name="ruleAppName">Name of ruleapp to retrieve.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetAllLabels">
            <summary>
            Gets all labels.
            </summary>
            <returns>List of LabelInfos</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.ApplyLabel(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Creates a label in the catalog and associates it with a specific rule application revision, and the defs contained within.
            </summary>
            <param name="ruleapp">The rule application to associate with the label.</param>
            <param name="label">The label to create; if, using a lower-case compare, the label already exists then the existing label will be used.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CreateLabel(System.String,System.String)">
            <summary>
            Creates a label in the catalog without associating it with a def or rule application.
            </summary>
            <param name="label">The label to create.</param>
            <param name="comment">An optional comment that further describes the intent of the label.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RenameLabel(System.String,System.String)">
            <summary>
            Renames the label.
            </summary>
            <param name="oldLabel">The old label.</param>
            <param name="newLabel">The new label.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetLabelInformationForDefByGuid(System.Guid)">
            <summary>
            Gets the label information for def by ruleapp GUID.
            </summary>
            <param name="ruleappGuid">The ruleapp GUID.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetLabelInformationForDefByGuidAndRevision(System.Guid,System.Int32)">
            <summary>
            Gets the label information for def by ruleapp GUID and revision.
            </summary>
            <param name="ruleappGuid">The ruleapp GUID.</param>
            <param name="revisionNumber">The revision number.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetLastCreatedLabelInfo(System.Guid)">
            <summary>
            Retrieves the last created label information for the def specified.
            </summary>
            <param name="defGuid">>Def guid to retrieve label info for.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CreateRuleApplication(InRule.Repository.RuleApplicationDef,System.String,InRule.Repository.Client.DefSharingBehavior)">
            <summary>
            Creates a new rule application in the catalog. New rule application will be checked in upon return.
            </summary>
            <param name="ruleapp">Rule application to create.</param>
            <param name="description">A description of the rule application.</param>
            <param name="shareExistingDefs">If equal to DefSharingBehavior.Share, all ruleapp managed elements that match the content of the latest revision of existing sharable server managed elements will be shared from the server; otherwise, no share relationships will be established - all ruleapp managed elements will be created as revision 1.</param>
            <returns>The newly created rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if Duplicate Ruleapp Names found in catalog.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppSummary(System.Boolean)">
            <summary>
            Retrieves a list of all rule applications in the catalog, and associated information.
            </summary>
            <returns>The rule application list.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppFromCatalogByGuid(System.Guid,System.Boolean)">
            <summary>
            Gets the rule app from catalog by RuleApplication GUID.
            </summary>
            <param name="ruleAppGuid">The rule app GUID.</param>
            <param name="includeCheckouts">if set to <c>true</c> [include checkouts].</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppInfoByGuid(System.Guid)">
            <summary>
            Gets the rule app info by RuleApplication GUID.
            </summary>
            <param name="ruleAppGuid">The rule app GUID.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppInfoByRuleAppName(System.String)">
            <summary>
            Gets the RuleApplication info by name.
            </summary>
            <param name="ruleAppName">The rule app name.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetShareableDefsByDefType(System.Type,InRule.Repository.RuleApplicationDef)">
            <summary>
            Gets the type of the shareable defs by def.
            </summary>
            <param name="defType">Type of the def to get.</param>
            <param name="mainRuleapp">The ruleapp.</param>
            <returns>A list of shareable defs for the specified type if not present in the current ruleapp thats consuming.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetSpecificDefRevision(System.Guid,System.Int32)">
            <summary>
            Retrieves a def from the catalog, using the indicated public revision number.  Not for use with ruleapp defs or schema elements.
            </summary>
            <param name="defGuid">The def guid to use during retrieval.</param>
            <param name="publicRevision">The public revision number to use during retrieval.</param>
            <returns>The requested def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.ShareDefFromAnotherRuleApp(System.Collections.Generic.List{InRule.Repository.Service.Data.DefInfo},InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Shares the def from another rule app.
            </summary>
            <param name="sharedDefInfos">The list of shared def infos.</param>
            <param name="ruleApp">The rule app.</param>
            <param name="context"></param>
            <param name="collectionBase"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.OverwriteRuleApplication(System.Guid,InRule.Repository.RuleApplicationDef,System.Boolean,System.String)">
            <summary>
            Creates and checks in new revision of ruleapp; can be used to completely overwrite an existing ruleapp with another one.
            If target ruleapp has any checkouts, they will be undone prior to overwriting.
            </summary>
            <param name="targetRuleAppGuid">Guid for ruleapp to be overwritten in the database.</param>
            <param name="newRuleApp">Rule application to be saved.</param>
            <param name="checkin">True to checkin the new ruleapp; false to leave it checked out.</param>
            <param name="comment">Checkin comment for new rule application revision. If checkin is false, this is ignored.</param>
            <returns>The newly created rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckinHistoryForDef(System.Guid)">
            <summary>
            Returns a list of checkin history for a given def
            </summary>
            <param name="defGuid">The def guid for which checkin history to be retrieved.</param>
            <returns>Listof CheckInHistory types</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDisplayCheckinHistoryForRuleapp(System.Guid)">
            <summary>
            Returns a list of checkin history for a given def. Used in Catalog Manager and MaintainCatalogForm
            </summary>
            <param name="defGuid">The def guid for which checkin history to be retrieved.</param>
            <returns>List of CheckInHistory</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDisplayCheckinHistoryForDef(InRule.Repository.RuleApplicationDef,System.Guid)">
            <summary>
            Gets the display checkin history for def. This method is used in Catalog Manager.
            </summary>
            <param name="mainRuleapp">The main ruleapp.</param>
            <param name="defGuid">The def GUID.</param>
            <returns>List of CheckInHistory</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDisplayCheckinHistoryForRuleappSchema(System.Guid)">
            <summary>
            Gets the display checkin history for def. This method is used in Catalog Manager.
            </summary>
            <param name="mainRuleappGuid">The main ruleapp GUID.</param>
            <returns>List of CheckInHistory</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetSpecificRuleAppRevision(System.Guid,System.Int32)">
            <summary>
            Retrieves a rule application from the catalog, using the indicated public revision number.
            </summary>
            <param name="ruleappGuid">The guid of the rule application to be retrieved.</param>
            <param name="publicRevision">The public revision number to use during retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRoleByName(System.String)">
            <summary>
            Gets the name of the role by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemoveRole(InRule.Security.RuleUserRole)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleUserRole"/> 
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRoles">
            <summary>
            Gets roles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateRole(InRule.Security.RuleUserRole)">
            <summary>
            Updates the role.
            </summary>
            <param name="ruleUserRole">The rule user role.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetPermissionsForRole(InRule.Security.RuleUserRole)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRolePermissions"/> associated with a <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRole"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetPermissions">
            <summary>
            Get list of all <see cref="T:InRule.Security.RuleUserRolePermissions"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddPermissionsToRole(InRule.Security.RuleUserRolePermissions[],InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleUserRolePermissions"/> to <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRolePermissions"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRolePermissions"/> have been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemovePermissionsFromRole(InRule.Security.RuleUserRolePermissions[],InRule.Security.RuleUserRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleUserRolePermissions"/> from a <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="ruleUserRolePermissions"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRolePermissions"/> have been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddRole(System.String)">
            <summary>
            Add a new <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUserRole"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetGroups(System.Boolean)">
            <overloads>
            Get <see cref="T:InRule.Security.RuleGroup"/>s, by InActive filter or specified Ids.
            </overloads>
            <summary>
            Get all <see cref="T:InRule.Security.RuleGroup"/>s, including InActive if specified.
            </summary>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetUsers(System.Boolean)">
            <overloads>
            Get <see cref="T:InRule.Security.RuleUser"/>s, by InActive filter or specified Ids.
            </overloads>
            <summary>
            Get all <see cref="T:InRule.Security.RuleUser"/>s, including InActive if specified.
            </summary>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetUserByName(System.String)">
            <summary>
            Get <see cref="T:InRule.Security.RuleUser"/> meta-info by Name
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetGroupByName(System.String)">
            <summary>
            Get <see cref="T:InRule.Security.RuleGroup"/> meta-info by Name
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRolesForUser(InRule.Security.RuleUser)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRole"/>s a <see cref="T:InRule.Security.RuleUser"/> belongs to.
            Note: Roles returned will be a complete set of the user roles and group roles if any.
            </summary>
            Use <remarks cref="M:InRule.Repository.Client.RuleCatalogController.GetExplicitRolesForUser(InRule.Security.RuleUser)"> to get only user roles.</remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetExplicitRolesForUser(InRule.Security.RuleUser)">
            <summary>
            Get list of <see cref="T:InRule.Security.RuleUserRole"/>s a <see cref="T:InRule.Security.RuleUser"/> belongs to. Note: Roles returned will not be a complete set of the user roles and group roles.
            </summary>
            Use <remarks cref="M:InRule.Repository.Client.RuleCatalogController.GetRolesForUser(InRule.Security.RuleUser)"> to get complete user roles.</remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DoesProviderSupportSetPassword">
            <summary>
            Determine if configured authentication provider supports setting password via <see cref="T:InRule.Repository.Client.RuleCatalogConnection"/>.
            </summary>
            <remarks>Internal database provider does support setting password, external LDAP provider does not.</remarks>
            <returns>true if configured provider supports setting password via <see cref="T:InRule.Repository.Client.RuleCatalogConnection"/></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddUserToRole(InRule.Security.RuleUser,InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleUser"/> to <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddGroupToRole(InRule.Security.RuleGroup,InRule.Security.RuleUserRole)">
            <summary>
            Add <see cref="T:InRule.Security.RuleGroup"/> to <see cref="T:InRule.Security.RuleGroupRole"/>.
            </summary>
            <param name="group"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleGroup"/> has been added to the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemoveUserFromRole(InRule.Security.RuleUser,InRule.Security.RuleUserRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleUser"/> from <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemoveGroupFromRole(InRule.Security.RuleGroup,InRule.Security.RuleGroupRole)">
            <summary>
            Remove <see cref="T:InRule.Security.RuleGroup"/> from <see cref="T:InRule.Security.RuleGroupRole"/>.
            </summary>
            <param name="group"></param>
            <param name="role"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleGroup"/> has been removed from the specified <see cref="T:InRule.Security.RuleUserRole"/>.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateUser(InRule.Security.RuleUser)">
            <summary>
            Update <see cref="T:InRule.Security.RuleUser"/> meta-info including <see cref="P:InRule.Security.RuleUser.Name"/>, <see cref="P:InRule.Security.RuleUser.IsActive"/>.
            </summary>
            <param name="user"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>Meta-info for the <see cref="T:InRule.Security.RuleUser"/> has been set.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetUserPassword(InRule.Security.RuleUser,System.String)">
            <summary>
            Set <see cref="T:InRule.Security.RuleUser"/> password by Id specified in a <see cref="T:InRule.Security.RuleUser"/>.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <remarks>
            	<para>PreConditions:</para>
            	<list type="number">
            		<item>
                    <description>The configured authentication provider must support setting the password, which
            		may be determined using <see cref="M:InRule.Repository.Client.RuleCatalogController.DoesProviderSupportSetPassword"/>.</description>
            		</item>
            	</list>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The password for the specified <see cref="T:InRule.Security.RuleUser"/> has been changed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddUser(System.String,System.String)">
            <summary>
            Add new <see cref="T:InRule.Security.RuleUser"/>.
            </summary>
            <param name="username"></param>
            <param name="password">Note that this parameter is ignored if provider does not support setting password.</param>
            <returns></returns>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description>The <see cref="T:InRule.Security.RuleUser"/> has been added.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.AddGroup(System.String)">
            <summary>
            Adds a group into catalog.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>newly added group</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemoveUser(InRule.Security.RuleUser)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleUser"/>
            </summary>
            <param name="user"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="T:InRule.Security.RuleUser"/> has been removed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.RemoveGroup(InRule.Security.RuleGroup)">
            <summary>
            Remove a <see cref="T:InRule.Security.RuleGroup"/>
            </summary>
            <param name="group"></param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="T:InRule.Security.RuleGroup"/> has been removed.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetIsActiveFlagForRuleApp(System.Guid,System.Boolean)">
            <summary>
            Sets the is active flag for rule app.
            </summary>
            <param name="appGuid">The app GUID.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDefsForRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves information about all defs for the indicated rule application revision.
            </summary>
            <param name="ruleAppDef">The rule application to use during request processing.</param>
            <returns>The requested def information.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutAllManagedElementsOnly(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checksout all the defs in ruleapp only. Excludes the ruleapp container and schema checkout.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutRuleAppSchemaOnly(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checks out rule app schema only.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutRuleAppAndSchema(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Checkout only ruleapp container and schema.
            </summary>
            <param name="ruleAppDef">The rule app def.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.Save(InRule.Repository.RuleApplicationDef)">
            <summary>
            Saves changes made in a checked-out rule application to the catalog, without checking them in.
            </summary>
            <param name="ruleAppDef">RuleApplication to be saved.</param>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">Throws RepositoryServiceException if the def with same name is already present.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException when creating new def without ruleapp checkout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.Save(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Saves changes made in a checked-out rule application to the catalog, without checking them in.
            </summary>
            <param name="ruleAppDef">RuleApplication to be saved.</param>
            <param name="forceOverwrite">Forces overwrite.</param>
            <exception cref="T:InRule.Repository.Service.RepositoryServiceException">Throws RepositoryServiceException if the def with same name is already present.</exception>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException when creating new def without ruleapp checkout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SetDeprecatedFlagForDef(System.Guid,System.Boolean)">
            <summary>
            Sets the Deprecated flag for a given def.
            </summary>
            <param name="defGuid">Guid of the def whose flag will be set.</param>
            <param name="isDeprecated">The value to use for the def's Deprecated flag.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoRuleAppCheckOut(InRule.Repository.Service.Data.Def,System.Boolean)">
            <summary>
            Reverts checkout of a checked-out rule application and any contained, checked-out defs. This is intended as an administrative function.
            </summary>
            <param name="app">Reference to the rule application to be reverted.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>Rule application in its prior, non-checked-out state.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleApp(InRule.Repository.Service.Data.Def)">
            <summary>
            Retrieves a rule application from the catalog, using the exact guid and internal revision specified.
            </summary>
            <param name="app">A reference to an existing rule application revision.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckoutSets(System.Boolean)">
            <summary>
            Retrieves a list of all current checkout sets in the catalog.
            </summary>
            <param name="forAllUsers">A flag indicating whether to retrieve checkout sets for current user, or all users.</param>
            <returns>A list of checkout sets.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckoutSets(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a list of all current checkout sets for the indicated rule application
            </summary>
            <param name="ruleapp">The rule application.</param>
            <returns>A list of checkout sets.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoCheckOut(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Reverts checkout of the ruleapplication based on user selected options.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="defToUndoCheckOut">The def to undo check out.</param>
            <returns>Reverted RuleApplicationDef</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoRuleAppCheckOut(InRule.Repository.RuleApplicationDef)">
            <summary>
            Reverts checkout of a checked-out rule application and any contained, checked-out defs.
            </summary>
            <param name="ruleAppDef">The rule app def.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoDefCheckOut(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Reverts checkout of one def inside a given rule application; not intended for use with rule application itself.
            </summary>
            <param name="ruleapp">Rule application in which def exists.</param>
            <param name="defToUndoCheckOut">Def to be reverted.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoRuleAppSchemaCheckout(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Reverts checkout of the rule application schema for a given rule application; not intended for use with rule application itself.
            Note that upon return from this method, the rule application schema is updated to the reverted def revision.
            </summary>
            <param name="ruleAppDef">The rule app def.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
            <remarks>Ruleapplication container is not undone.</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoDefCheckOuts(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Reverts checkout of one or more defs inside a given rule application; not intended for use with rule application itself.
            Note that upon return from this method, the rule application is updated to the reverted def revisions.
            </summary>
            <param name="ruleapp">Rule application in which defs exist.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the def is checked in and user tries to UndoCheckout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoRuleAppContainerAndSchemaCheckOut(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Reverts checkout the rule application and schema only.
            </summary>
            <param name="ruleapp">Rule application in which container and schema exists.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the def is checked in and user tries to UndoCheckout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UndoRuleAppContainerCheckOut(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Reverts checkout the rule application container itself.
            </summary>
            <param name="ruleapp">Rule application.</param>
            <param name="allowAnyUser">Flag to indicate whether user should be able to undo other user's changes, or only their own.</param>
            <returns>The updated rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if the def is checked in and user tries to UndoCheckout.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCatalogInformation">
            <summary>
            Gets the <see cref="T:InRule.Repository.Client.CatalogInfo"/> for this repository connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckedOutDefsForRuleApp(System.Guid)">
            <summary>
            Retrieves a map of all defs checked out to the current user in the specified rule application.
            </summary>
            <param name="ruleAppGuid">Guid of the rule application.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckedOutDefsForRuleApp(System.Guid,System.Boolean)">
            <summary>
            Retrieves a map of all defs checked out in the specified rule application.
            </summary>
            <param name="ruleAppGuid">The rule application GUID.</param>
            <param name="forAllUsers">A flag indicating whether def checkouts for all users should be returned, or only checkouts for the current user.</param>
            <returns>A map of def guids to def info objects.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Promotes a rule application into the catalog.
             If a rule application with the same guid already exists in the catalog, this app will be checked in as the latest revision of that app.
             If no rule application with the same guid already exists in the catalog, this app will be checked in as the first revision.
             If a rule application with a different guid but same name already exists in the catalog, the entire promotion operation will fail.
             Child defs are shared ONLY when existing guid/revision exists in target catalog (and is shareable), and rule application already exists in target catalog.
             If any def/app in the catalog with guid matching a def/app from this rule application is currently checked out, the entire promotion operation will fail.
            </summary>
            <param name="ruleapp">Rule application to create or duplicate.</param>
            <param name="comment">Checkin comment for new rule application revision.</param>
            <returns>The newly promoted rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if Duplicate Ruleapp Names found in catalog.</exception>
            <overloads cref="M:InRule.Repository.Client.RuleCatalogController.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String,System.String)">PromoteRuleApplication without description.</overloads>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.PromoteRuleApplication(InRule.Repository.RuleApplicationDef,System.String,System.String)">
            <summary>
            Promotes a rule application into the catalog.
             If a rule application with the same guid already exists in the catalog, this app will be checked in as the latest revision of that app.
             If a rule application with a different guid but same name already exists in the catalog, the entire promotion operation will fail.
             If a def with the same guid as any child def of this ruleapp already exists in the catalog, the corresponding child of the rule application will be checked in as the latest revision of that def.
             If any def/app in the catalog with guid matching a def/app from this rule application is currently checked out, the entire promotion operation will fail.
            </summary>
            <param name="ruleAppDef">Rule application to create or duplicate.</param>
            <param name="description">Description for newly promoted rule application (use NULL to keep existing, if any).</param>
            <param name="comment">Checkin comment for new rule application revision.</param>
            <returns>The newly promoted rule application.</returns>
            <exception cref="T:InRule.Repository.Service.InRuleCatalogException">Throws InRuleCatalogException if Duplicate Ruleapp Names found in catalog.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutRuleApplication(InRule.Repository.RuleApplicationDef,System.Boolean,System.String)">
            <summary>
            Checksout the ruleapplication recursively if set to true.
            </summary>
            <param name="ruleAppDef">The rule app def.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetRuleAppByLabel(System.Guid,System.String)">
            <summary>
            Retrieves a rule application from the catalog, using the indicated label.
            </summary>
            <param name="ruleAppGuid">The guid of the rule application to be retrieved.</param>
            <param name="label">The label to use during retrieval.</param>
            <returns>The rule application requested.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDef(InRule.Repository.Service.Data.Def)">
            <summary>
            Retrieves a def from the catalog, using the exact guid and internal revision specified.
             Not for use with ruleapp defs or schema elements.
            </summary>
            <param name="def">A reference to the def to be retrieved.</param>
            <returns>The requested def.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetDefInfos(System.Collections.Generic.ICollection{InRule.Repository.Service.Data.Def})">
            <summary>
            Returns additional state information about a set of server-managed defs.
             Does not return information for schema child defs.
            </summary>
            <param name="defs">A set of def references for which to return state information.</param>
            <returns>State information for each incoming def reference.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckedOutDefsOnClientSide(InRule.Repository.RuleApplicationDef,System.Boolean@,System.Boolean)">
            <summary>
            Gets the checked out defs on client side.
            </summary>
            <param name="ruleappDef">The ruleapp def.</param>
            <param name="isSchemaCheckedOut">is schema checked out.</param>
            <param name="includeNewlyAdded">include newly added.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.IsRuleAppActive(System.Guid)">
            <summary>
            Determines whether the ruleapp is active..
            </summary>
            <param name="ruleappGuid">The ruleapplication GUID.</param>
            <returns>
            	<c>true</c> if ruleapp active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.Search(System.Collections.Generic.ICollection{InRule.Repository.Service.Data.SearchParameters},InRule.Repository.Service.Data.SearchChaining,System.Boolean,InRule.Repository.Service.Data.ManagedElementFilterType,System.Int32)">
            <summary>
            Search the catalog for defs matching the input criteria.
            </summary>
            <param name="parms">A collection of match information.</param>
            <param name="chaining">Indicates whether to match any or all criteria.</param>
            <param name="caseSensitive">Indicates whether searching is case-sensitive or not (not applicable to guid search).</param>
            <param name="filter">Indicates which managed element types to search for.</param>
            <param name="resultLimit">Indicates how many results to return. Use int.MaxValue to return all matches.</param>
            <returns>The set of matched search results.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateCatalogStatusInTheRuleApplication(InRule.Repository.RuleApplicationDef,System.Boolean)">
            <summary>
            Updates the catalog status in the rule app.
            </summary>
            <param name="ruleAppDef">The rule app.</param>
            <param name="forAllUsers">if set to <c>true</c> [for all users].</param>
            <remarks>This method is also used in catalog manager</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.UpdateCatalogStatusInTheRuleApplication(InRule.Repository.RuleApplicationDef)">
            <summary>
            Updates the catalog status in the rule app.
            </summary>
            <param name="ruleApp">The rule app.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetUserActiveDirectoryGroups(System.String)">
            <summary>
            Searchs the Active Directory for usergroups matching the input criteria.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns>The set of matched search results.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.SearchActiveDirectory(InRule.Repository.Service.Data.ADSearchCriteria)">
            <summary>
            Search the Active Directory for users/groups/usergroups matching the input criteria.
            </summary>
            <param name="criteria">A collection of match information.</param>
            <returns>The set of matched search results.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DoesMasterRuleAppExistForSchema(InRule.Repository.RuleApplicationDef)">
            <summary>
            Does the master ruleapp exists for schema in the given ruleapplication.
            </summary>
            <param name="ruleapp">The ruleapp containing schema.</param>
            <returns>true if a master ruleapp is associated with the schema</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCatalogDefsFromRuleapp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Retrieves a list of catalog defs for the given ruleapp.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.DoesMasterRuleAppExistForDefs(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Does the master ruleapp exists for selected def in the ruleapplication.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="selectedDef">The selected def.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.MarkRuleappDisconnected(InRule.Repository.RuleApplicationDef)">
            <summary>
            Reverts the ruleapp into disconnected state from catalog.
            </summary>
            <remarks>marks all the catalog state of the defs in the ruleapp to None.</remarks>
            <param name="ruleAppDef">The rule app def.</param>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetCheckedOutUserName(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Gets the checkedout username for the selected def in the ruleapp.
            </summary>
            <param name="ruleapp">The rule application def .</param>
            <param name="selectedDef">The selected def.</param>
            <returns>string</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CheckOutDefs(InRule.Repository.RuleApplicationDef,System.Collections.Generic.ICollection{InRule.Repository.Service.Data.Def},System.String)">
            <summary>
            Checks out listed defs inside the given rule application.
            </summary>
            <param name="ruleapp">The rule application containing the defs to be checked out.</param>
            <param name="defs">The defs to be checked out.</param>
            <param name="comment">An optional checkout comment.</param>
            <exception cref="T:InRule.Repository.Service.AuthorizationException">Throws AuthorizationException if the user does not have permissions.</exception>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.IsEntityBasedRulesetCheckedOut(InRule.Repository.RuleApplicationDef)">
            <summary>
            Determines whether an entity based ruleset is checked out in the specified ruleapp.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <returns>
            	<c>true</c> if [is entity based ruleset checked out] [the specified ruleapp]; otherwise, <c>false</c>.
            </returns>
            <remarks> Does not consider def with CatalogState of Added</remarks>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetMatchingEntityRulesetCollection(InRule.Repository.RuleApplicationDef,InRule.Repository.Service.Data.Def)">
            <summary>
            Gets matching entity based rulesets(includes contextbasedruleset also) for the ruleapp. Needs shared schema def which will be used
            as matching source. 
             </summary>
            <param name="sourceRuleapp">The source ruleapp.</param>
            <param name="schemaDef">The schema def.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.GetMatchingDataElementCollection(InRule.Repository.Service.Data.DefInfo)">
            <summary>
            Gets matching data element for the ruleapp. Needs shared schema def which will be used as matching source. 
             </summary>
            <returns>List of matching data elements.</returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.IntegrateMatchingEntityRuleset(InRule.Repository.RuleApplicationDef,System.Collections.Generic.Dictionary{InRule.Repository.RuleElements.IContainsRuleElements,InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            If consuming ruleapp has rulesets and vocabularys with a matching entity/field name and datatype, the consuming ruleapp's rulesets
            will be preserved.
            </summary>
            <param name="ruleapp">The new ruleapp after schema is replaced.</param>
            <param name="rulesetCollection">The ruleset collection containing the rulesets and entitydefs to be integrated into the ruleapp.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.IntegrateMatchingEntityDataElement(InRule.Repository.RuleApplicationDef,System.Collections.Generic.IEnumerable{InRule.Repository.RuleRepositoryDefBase})">
            <summary>
            If consuming ruleapp has data elements independent from schema entity defs, the consuming ruleapp's data elements
            will be integrated.
            </summary>
            <param name="ruleapp">The new ruleapp after schema is replaced.</param>
            <param name="dataElementCollection">The dataelement collection containing the data elements to be integrated into the ruleapp.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CanEditPermissions(InRule.Repository.RuleApplicationDef,InRule.Repository.RuleRepositoryDefBase,System.String@)">
            <summary>
            Determines whether ruleapp or def is in correct catalog status to edit permissions.
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="def">The def.</param>
            <param name="message">error message is returned if false.otherwise empty</param>
            <returns>
            	<c>true</c> if this instance [can edit permissions] the specified ruleapp; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.CanEditSchemaPermissions(InRule.Repository.RuleApplicationDef,System.String@)">
            <summary>
            Determines whether ruleapp  schema is in correct catalog status to edit permissions. 
            </summary>
            <param name="ruleapp">The ruleapp.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if this instance [can edit schema permissions] the specified ruleapp; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InRule.Repository.Client.RuleCatalogController.IsInsertOperationAllowed(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Client.CallMetaData,System.Boolean)">
            <summary>
            Returns callmetadata indicating whether inserting an def in ruleapp via irAuthor is allowed or not
            </summary>
            <param name="mainRuleAppDef">Main RuleApp</param>
            <param name="defToInsert">def on which insert operation is performed</param>
            <param name="parentNodeModel">The parent node model.</param>
            <param name="metaData">metadata</param>
            <param name="isSchema">if set to <c>true</c> [is schema].</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Client.RuleCatalogController.Connection">
            <summary>
            Get underlying <see cref="T:InRule.Repository.Client.RuleCatalogConnection"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleCatalogController.Timeout">
            <summary>
            Gets or sets the client-side timeout for communications with the repository service. Default is 30sec.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleCatalogController.User">
            <summary>
            Get authenticated-user info associated with this connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleCatalogController.UseIntegratedSecurity">
            <summary>
            Specifies if single-signon was used while creating repository connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.RuleCatalogController.ServiceUri">
            <summary>
            Gets repository service uri used by this connection.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.RuleCatalogControllerMode">
            <summary>
            Indicator to specify which mode the RuleCatalogController should run.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.RuleCatalogControllerMode.irAuthor">
            <summary>
            irAuthor specific
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.RuleCatalogControllerMode.CatalogManager">
            <summary>
            Catalog Manager specific
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.DefReGuidEventArgs">
            <summary>
            Used to inform listeners of defs re-guided during catalog Save or Checkin
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.CatalogOutputMessages.GenericCatalogError">
            <summary>
            Error occurred. Please try again
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.CatalogOutputMessages.ExclusiveRuleAppAccessNeeded">
            <summary>
            Exclusive Ruleapp access is needed to perform this operation
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.CatalogOutputMessages.CheckOutSuccess">
            <summary>
            CheckOut was successfull.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.CatalogOutputMessages.GetMessage(System.Exception)">
            <summary>
            Gets the message.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Client.DiagnosticInfo">
            <summary>
            Provides information detailing the outcome of a diagnostic check on the catalog database.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticInfo.IsValid">
            <summary>
            Whether the diagnostic check found any problems.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticInfo.DiagnosticResults">
            <summary>
            A list of results from the validation tests performed on the catalog database.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.DiagnosticResult">
            <summary>
            Represents the result of a diagnostic test performed on the catalog database.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.DiagnosticResult.ConvertToRuleAppDiagnosticResults(InRule.Repository.Client.DiagnosticResult[])">
            <summary>
            Converts a list of diagnostic test results to a list of Rule Application oriented diagnostic results.
            </summary>
            <param name="results">A list of diagnostic test results.</param>
            <returns>A Rule Application oriented list of results.</returns>
        </member>
        <member name="M:InRule.Repository.Client.DiagnosticResult.GetDiagnosticRuleReport(InRule.Repository.Client.DiagnosticResult[])">
            <summary>
            Formats the list of diagnostic test results as a report.
            </summary>
            <param name="results">A list of diagnostic test results.</param>
            <returns>A report of diagnostic test results.</returns>
        </member>
        <member name="M:InRule.Repository.Client.DiagnosticResult.GetDiagnosticRuleReport(InRule.Repository.Client.DiagnosticResult)">
            <summary>
            Formats a diagnostic test results as a report.
            </summary>
            <param name="result">a diagnostic test result.</param>
            <returns>A report of the diagnostic test result.</returns>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.Type">
            <summary>
            Indicates the severity of the diagnostic test result.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.ValidationRuleName">
            <summary>
            The name of the diagnostic test performed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.ValidationRuleNumber">
            <summary>
            The number of the diagnostic test performed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.IsValid">
            <summary>
            Indicates whether the diagnostic test passed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RepairWillDeleteRevisions">
            <summary>
            Indicates that the repair process must delete revisions to remedy this problem.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RepairWillUndoLatest">
            <summary>
            Indicates that the repair process must undo checked out elements to remedy this problem.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.TotalRecordCount">
            <summary>
            The total number of records checked in this diagnostic test.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.InvalidRecordCount">
            <summary>
            The number of invalid records identified in this diagnostic test.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppsAffected">
            <summary>
            A list of Rule Applications affected if this diagnostic test failed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.ValidationMessage">
            <summary>
            A summary of the diagnostic problem found.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.DiagnosticResult.ResultType">
            <summary>
            Represents the severity of a diagnostic test result.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.DiagnosticResult.ResultType.Corruption">
            <summary>
            Possible data loss may result during repair.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.DiagnosticResult.ResultType.Warning">
            <summary>
            Orphaned rule elements found which will be deleted during repair.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.DiagnosticResult.ResultType.Information">
            <summary>
            General information.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult">
            <summary>
            Represents a Rule Application oriented diagnostic result.
            </summary>
        </member>
        <member name="M:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.#ctor(InRule.Repository.Client.DiagnosticResult.ResultType,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult"/>.
            </summary>
            <param name="type">The severity of the diagnostic test result.</param>
            <param name="ruleAppName">The name of the Rule Application affected by the diagnostic test.</param>
            <param name="message">A summary of diagnostic problems found on this Rule Application.</param>
            <param name="repairWillDeleteRevisions">Whether the repair process must delete revisions.</param>
            <param name="repairWillUndoCheckout">Whether the repair process must undo checked out elements.</param>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.Type">
            <summary>
            Indicates the severity of the diagnostic test result.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.RuleAppName">
            <summary>
            The name of the Rule Application affected by the diagnostic test.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.Message">
            <summary>
            A summary of diagnostic problems found on this Rule Application.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.RepairWillDeleteRevisions">
            <summary>
            Indicates that the repair process must delete revisions.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.DiagnosticResult.RuleAppDiagnosticResult.RepairWillUndoCheckout">
            <summary>
            Indicates that the repair process must undo checked out elements.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.ICatalogSession">
            <summary>
            Provides an interface to an on-demand catalog connection implementation via the controller.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.ICatalogSession.RuleCatalogController">
            <summary>
            On-demand controller instance implementation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.ICatalogSession.IsLoggedIn">
            <summary>
            Catalog connection status implementation.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.UpgradeInfo">
            <summary>
            Provides information on an attempt to upgrade the catalog database.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.UpgradeInfo.UpgradeInProgress">
            <summary>
            Whether the catalog is already performing an upgrade.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.UpgradeInfo.UpgradeSuccessful">
            <summary>
            Whether the catalog database upgraded successfully.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.UpgradeInfo.CorruptionDetected">
            <summary>
            Whether a corruption was detected before upgrade was attempted. This indicates that a diagnostic check should be performed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.UpgradeInfo.UpgradeMessage">
            <summary>
            A message detailing the outcome of the request.
            </summary>
        </member>
        <member name="P:InRule.Repository.Client.UpgradeInfo.CorruptionDetailText">
            <summary>
            A message detailing any corruptions found before attempting an upgrade.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.Requests.RepositoryWebRequest">
            <summary>
            The base class for all requests.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.Responses.RepositoryWebResponse">
            <summary>
            The base class for all requests.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.ADSearchResults.Criteria">
            <summary>
            The search criteria from which these results were generated.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetStringSafe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns string value representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetStringSafeWithTrim(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns string value representing the <paramref name="value"/> trimmed.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetUtcDateTimeSafe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns DateTime in UTC representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetInt32Safe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns int representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetInt64Safe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns int representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetGuidSafe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns int representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.ServiceUtil.GetBooleanSafe(System.Object)">
            <summary>
            Checks if the <paramref name="value"/> is DBNull.Value, then returns null, otherwise returns int representing the <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>Null, if equal to DBNull.Value or the actual value.</returns>
        </member>
        <member name="M:InRule.Repository.Service.Data.Def.#ctor(System.Guid,System.Int32,System.Boolean,System.Type)">
            <summary>
            Constructor for Def; takes public or internal revision.
            </summary>
            <param name="guid">Guid of def.</param>
            <param name="revision">Public or Internal revision number for def.</param>
            <param name="isPublicRevision">Whether this is an internal or public revision number.</param>
            <param name="type">.NET type of def.</param>
        </member>
        <member name="M:InRule.Repository.Service.Data.RuleAppSchema.BuildDefLookupDictionary(InRule.Repository.RuleApplicationDef)">
            <summary>
            Creates a temporary dictionary of all the defs in a rule application, keyed by def guid
            </summary>
            <param name="ruleapp"></param>
            <returns></returns>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.DefName">
            <summary>
            Match display name
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.DefGuid">
            <summary>
            Match guid
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.XmlBlob">
            <summary>
            Match raw XML
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.Comments">
            <summary>
            Match comments
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.DisplayName">
            <summary>
            Match name
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.Attributes">
            <summary>
            Match attributes
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.RuleExpressions">
            <summary>
            Match rule expressions"
            </summary>
        </member>
        <member name="F:InRule.Repository.Service.Data.DefSearchType.EntityName">
            <summary>
            Match entity name
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.SearchResult.Criteria">
            <summary>
            The search criteria from which these results were generated.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.SearchResult.MatchingDefs">
            <summary>
            A map of matching defs, to containing ruleapps.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.SearchResult.RuleAppActivationFlags">
            <summary>
            A map of matching ruleapps, to active/inactive flag.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.Data.StaleDefInfo.IsCorrelated(System.Guid)">
            <summary>
            Returns if the def guid is correlated. Def is stale if there is a discrepancy between the latest rule application revision and incoming.
            </summary>
            <param name="defGuid">The def guid.</param>
            <returns>True if correlated, otherwise False.</returns>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.Count">
            <summary>
            Returns the number of def infos which are considered stale.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.Defs">
            <summary>
            Returns the list of def infos which are considered stale.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.Item(System.Guid)">
            <summary>
            Returns the <typeref name="CheckinInfo"/> for the specified def guid.
            </summary>
            <param name="defGuid">The def guid whose <typeref name="CheckinInfo"/> to lookup.</param>
            <returns>The <typeref name="CheckinInfo"/> for the specified definfo.</returns>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.Item(InRule.Repository.Service.Data.DefInfo)">
            <summary>
            Returns the <typeref name="CheckinInfo"/> for the specified definfo.
            </summary>
            <param name="defInfo">The definfo whose <typeref name="CheckinInfo"/> to lookup.</param>
            <returns>The <typeref name="CheckinInfo"/> for the specified definfo.</returns>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.CorrelatedDefs">
            <summary>
            Returns the list of defs whose counterparts with the same guid and latest public revision exist in the database for the latest public revision of the rule app.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.Data.StaleDefInfo.NonCorrelatedDefs">
            <summary>
            Returns the list of defs whose counterparts with the same guid and latest public revision does not exist in the database for the latest public revision of the rule app.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.RepositoryServiceException">
            <summary>
            Base class for all InRule.Repository.Service exceptions.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.DataCorruptionCheckException">
            <summary>
            The exception thrown when data corruption would have occurred from the selected operation.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.DataCorruptionCheckException.#ctor(System.String)">
            <summary>
            Creates a CheckInException object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:InRule.Repository.Service.InvalidDataException">
            <summary>
            The exception that is thrown when invalid data is encountered, suggesting either corruption or a logic error
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.InvalidDataException.#ctor(System.String)">
            <summary>
            Creates an instance of the InvalidDataException class and creates the message from the parameter info.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:InRule.Repository.Service.InvalidDataException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the InvalidDataException class and creates the message from the parameter info.
            </summary>
            <param name="message"></param>
            <param name="innerEx"></param>
        </member>
        <member name="T:InRule.Repository.Service.Requests.GetGroupByNameRequest">
            <summary>
            The request sent to the GetGroupByName web service endpoint.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.Requests.GetRoleByNameRequest">
            <summary>
            The request sent to the GetRoleByNameRequest web service endpoint.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.Requests.GetServiceUserRequest">
            <summary>
            The request sent to the GetUserByNameAndPassword web service endpoint.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.Requests.GetUserByNameRequest">
            <summary>
            The request sent to the GetUserByName web service endpoint.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.AuthenticationProviderProperties">
            <summary>
            Contains settings specific to an authentication provider.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.AuthenticationProviderProperties.Name">
            <summary>
            The name of the provider
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.DefRevisionInfo">
            <summary>
            Info describing a def revision (Id, Revision, CheckIn info)
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.DefRevisionLabelInfo">
            <summary>
            Info describing a def revision, including label(s)
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.ExceptionInfo">
            <summary>
            Information about a server-side exception.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.ExceptionInfo.GetException">
            <summary>
            Returns the exception that was 
            </summary>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Service.Label">
            <summary>
            Info about a label (Id, Name, etc.)
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.RepositoryProviderProperties">
            <summary>
            Contains settings specific to an repository data provider.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryProviderProperties.Name">
            <summary>
            The name of the provider
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.RepositoryServiceClientAggExecStats">
            <summary>
            Aggregate stats for client-side repository service calls.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.RepositoryServiceClientAggExecStats.GetRunningTotalAllReport">
            <summary>
            Get simple client-side repository service newline-delimited ASCII performance stats report
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.StartTimeStamp">
            <summary>
            Start time when measurements first begun (typically time when first web service call is invoked client-side)
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.CacheGetTime">
            <summary>
            Measurement of total client side exec time / # of client-side cached def / info retrievals
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.DefSerializationTime">
            <summary>
            Measurement of total client side exec time / # of client-side cached def / info retrievals
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.GetTime">
            <summary>
            Measurement of total client side round-trip (webservice call) def retrieval times
            </summary>
            <remarks>
            Measured from request submit to response received - excludes subsequent client-side processing such as deserialization
            </remarks>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.GetInfoTime">
            <summary>
            Measurement of total client side round-trip (webservice call) definfo retrieval times
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.OtherServiceCallTime">
            <summary>
            Measurement of total client side round-trip (webservice call) times other than GetTime, GetInfoTime
            </summary>
            <remarks>
            Measured from request submit to response received - excludes subsequent client-side processing such as deserialization
            </remarks>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.WebServiceCallTime">
            <summary>
            Measurement of total client side exec time / # of webservice calls
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceClientAggExecStats.EncryptionTime">
            <summary>
            Measurement of total client side exec time / # of client-side encryption calls
            </summary>
        </member>
        <member name="T:InRule.Repository.Data.AnyDbCommand">
            <summary>
            Encapsulates any IDbCommand, including appropriate instantiation. Also takes into account IDbTransaction if present, otherwise just uses IDbConnection.
            </summary>
        </member>
        <member name="T:InRule.Repository.Data.AnyDbConnection">
            <summary>
            Encapsulates any IDbConnection / IDbTransaction, including appropriate instantiation.
            </summary>
        </member>
        <member name="T:InRule.Repository.Data.AnyDbDataAdapter">
            <summary>
            Encapsulates any IDataAdapter, including appropriate instantiation.
            </summary>
        </member>
        <member name="M:InRule.Repository.Logging.Configuration.LoggingSectionHandler.GetLoggersFromXml(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Gets child "logger" elements from the given parent node.
            </summary>
            <param name="parentNode">The node whose children will be used.</param>
            <param name="isInGroup"></param>
            <returns>Collection of LoggerConfigs</returns>
        </member>
        <member name="M:InRule.Repository.Logging.Configuration.LoggingSectionHandler.PopulateLoggerConfig(InRule.Repository.Logging.Configuration.LoggerConfigBase,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Populates an object derived from LoggerConfigBase with the values in the attributs of the loggerNode.
            </summary>
            <param name="loggerConfig">The object to populate.</param>
            <param name="loggerNode">The node whose attributes will be inspected.</param>
            <param name="isInGroup"></param>
        </member>
        <member name="T:InRule.Repository.Logging.LogEntries.SimpleLogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Logging.LogEntries.SimpleLogEntry.Text">
            <summary>
            Simple text.
            </summary>
        </member>
        <member name="T:InRule.Repository.Logging.Loggers.ConsoleLogger">
            <summary>
            Writes log information to the Console window. 
            </summary>
        </member>
        <member name="T:InRule.Repository.Logging.Loggers.DebugLogger">
            <summary>
            Writes log information to the Debug window. 
            </summary>
        </member>
        <member name="M:InRule.Repository.Logging.Loggers.SmtpLogger.Initialize(System.Collections.IDictionary)">
            <summary>
            Initializes the logger.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="T:InRule.Repository.Logging.Loggers.XmlLogger">
            <summary>
            Writes the field and property values of a log entry to an XML file.
            </summary>
            <remarks>
            Currently writes xml fragments, no root tag.
            <p/>
            The following options are supported by the XmlLogger:  
            <list type="table">
            	<listheader>
            		<term>Option</term>
            		<term>Description</term>
            	</listheader>
            	<item>
            		<term>filename</term>
            		<description>Required.  Indicates the name of the file to write to.</description>
            	</item>
            	<item>
            		<term>writeAsAttributes</term>
            		<term>
            			Optional.  Indicates if the values should be written as attributes instead of elements.  
            			Valid values are True and False.  The default is True.
            		</term>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.Logging.Loggers.XmlLogger.OnWrite(InRule.Repository.Logging.LogEntries.ILogEntry)">
            <summary>
            Writes to the file.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:InRule.Repository.Logging.Loggers.XmlLogger.Initialize(System.Collections.IDictionary)">
            <summary>
            Initializes the logger.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="T:InRule.Repository.Regression.DirectoryTestSuitePersistenceProvider">
            <summary>
            Directory based XML TestSuite persistence provider implementation.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.XmlTestSuitePersistenceProvider">
            <summary>
            An abstract base class for XML based TestSuite persistence implementations
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestSuitePersistenceProvider">
            <summary>
            An abstract base class for TestSuite persistence implementations.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.CreateNewTestSuite">
            <summary>
            Create new TestSuite by removing or archiving any previous instances at the provider's location.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.SaveTestSuiteSettingsDef(InRule.Repository.Regression.TestSuiteSettingsDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> with the provider implementation.
            </summary>
            <param name="settingsDef">The settings to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetTestSuiteSettingsDef(System.Boolean)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> from the provider implementation.
            </summary>
            <returns>Settings retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.SaveFolderDef(InRule.Repository.Regression.FolderDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.FolderDef"/> with the provider implementation.
            </summary>
            <param name="folderDef">The folder to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetFolderDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.FolderDef"/> from the provider implementation.
            </summary>
            <param name="id">Identifier of <see cref="T:InRule.Repository.Regression.FolderDef"/> in the provider implementation.</param>
            <returns>Folder retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetAllFolderDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.FolderDef"/> instances from the provider implementation.
            </summary>
            <returns>Folders retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.SaveDataStateDef(InRule.Repository.Regression.DataStateDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.DataStateDef"/> with the provider implementation.
            </summary>
            <param name="dataStateDef">The DataState to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetDataStateDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.DataStateDef"/> from the provider implementation.
            </summary>
            <param name="id">Identifier of the <see cref="T:InRule.Repository.Regression.DataStateDef"/> in the provider implementation.</param>
            <returns>DataState retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetAllDataStateDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.DataStateDef"/> instances from the provider implementation.
            </summary>
            <returns>DataStates retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.SaveTestDef(InRule.Repository.Regression.TestDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.TestDef"/> with the provider implementation.
            </summary>
            <param name="testDef">The Test to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetTestDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.TestDef"/> from the provider implementation.
            </summary>
            <param name="id">Identifier of the <see cref="T:InRule.Repository.Regression.TestDef"/> in the provider implementation.</param>
            <returns>Test retrieved from the provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuitePersistenceProvider.GetAllTestDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.TestDef"/> instances from the provider implementation.
            </summary>
            <returns>Tests retrieved from the XML provider implementation.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuitePersistenceProvider.StorageLocation">
            <summary>
            String representation of the provider implementation's storage location.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.SaveTestSuiteSettingsDef(InRule.Repository.Regression.TestSuiteSettingsDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> with the XML provider implementation.
            </summary>
            <param name="settingsDef">The settings to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetTestSuiteSettingsDef(System.Boolean)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> from the XML provider implementation.
            </summary>
            <returns>Settings retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.SaveFolderDef(InRule.Repository.Regression.FolderDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.FolderDef"/> with the XML provider implementation.
            </summary>
            <param name="folderDef">The folder to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetFolderDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.FolderDef"/> from the XML provider implementation.
            </summary>
            <param name="id">Identifier of <see cref="T:InRule.Repository.Regression.FolderDef"/> in the XML provider implementation.</param>
            <returns>Folder retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetAllFolderDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.FolderDef"/> instances from the XML provider implementation.
            </summary>
            <returns>Folders retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.SaveDataStateDef(InRule.Repository.Regression.DataStateDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.DataStateDef"/> with the XML provider implementation.
            </summary>
            <param name="dataStateDef">The DataState to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetDataStateDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.DataStateDef"/> from the XML provider implementation.
            </summary>
            <param name="id">Identifier of the <see cref="T:InRule.Repository.Regression.DataStateDef"/> in the XML provider implementation.</param>
            <returns>DataState retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetAllDataStateDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.DataStateDef"/> instances from the XML provider implementation.
            </summary>
            <returns>DataStates retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.SaveTestDef(InRule.Repository.Regression.TestDef)">
            <summary>
            Save a <see cref="T:InRule.Repository.Regression.TestDef"/> with the XML provider implementation.
            </summary>
            <param name="testDef">The Test to save.</param>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetTestDef(System.Guid)">
            <summary>
            Retrieve a <see cref="T:InRule.Repository.Regression.TestDef"/> from the XML provider implementation.
            </summary>
            <param name="id">Identifier of the <see cref="T:InRule.Repository.Regression.TestDef"/> in the XML provider implementation.</param>
            <returns>Test retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.XmlTestSuitePersistenceProvider.GetAllTestDefs">
            <summary>
            Retrieve all <see cref="T:InRule.Repository.Regression.TestDef"/> instances from the XML provider implementation.
            </summary>
            <returns>Tests retrieved from the XML provider implementation.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.DirectoryTestSuitePersistenceProvider.CreateNewTestSuite">
            <summary>
            Clears the destination directory ready to save a new TestSuite.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DirectoryTestSuitePersistenceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:InRule.Repository.Regression.DirectoryTestSuitePersistenceProvider"/> for load/save operations on a TestSuite directory.
            </summary>
            <param name="rootDirectory">Path to TestSuite root directory.</param>
        </member>
        <member name="P:InRule.Repository.Regression.DirectoryTestSuitePersistenceProvider.StorageLocation">
            <summary>
            String representation of the directory location.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.ZipFileTestSuitePersistenceProvider">
            <summary>
            Zip file based XML TestSuite persistence provider implementation.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.ZipFileTestSuitePersistenceProvider.CreateNewTestSuite">
            <summary>
            Clears all existing data in the file ready to save a new TestSuite.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.ZipFileTestSuitePersistenceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:InRule.Repository.Regression.ZipFileTestSuitePersistenceProvider"/> for load/save operations on a TestSuite zip file.
            </summary>
            <param name="fileName">Path to the TestSuite zip file.</param>
        </member>
        <member name="P:InRule.Repository.Regression.ZipFileTestSuitePersistenceProvider.StorageLocation">
            <summary>
            String representation of the zip file location.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.RepositoryServiceServerAggExecStats">
            <summary>
            Aggregate stats for server-side repository service calls.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.RepositoryServiceServerAggExecStats.GetRunningTotalAllReport">
            <summary>
            Get simple server-side repository service newline-delimited ASCII performance stats report
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.StartTimeStamp">
            <summary>
            Start time when measurements first begun (typically time when web service call first received server-side)
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DbDiagnosticQueryTime">
            <summary>
            Measurement of db select-query time (not including time for retrieving query results over the network).
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DbQueryTime">
            <summary>
            Measurement of db select-query time (not including time for retrieving query results over the network).
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DbReadTime">
            <summary>
            Measurement of db read time (query results retrieved over the network)
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DbWriteTime">
            <summary>
            Measurement of db write time (update / insert / delete queries)
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DbCommitTime">
            <summary>
            Measurement of db transaction commit time
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.DefSerializationTime">
            <summary>
            Measurement of def serialize / deserialize time
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.EncryptionTime">
            <summary>
            Measurement of total time spent encrypting / decrypting passwords etc.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.AuthenticationTime">
            <summary>
            Measurement of time spent authenticating user(s)
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.PermissionCheckTime">
            <summary>
            Measurement of time spent checking permissions
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.ReadRetryCount">
            <summary>
            Measurement for read retry count.
            </summary>
        </member>
        <member name="P:InRule.Repository.Service.RepositoryServiceServerAggExecStats.TotalExecTime">
            <summary>
            Total exec time of over the span of this set of measurements
            </summary>
        </member>
        <member name="T:InRule.Repository.Attributes.EnumTypeEquivalentAttribute">
            <summary>
            Tags an enum field to as equivalent / can be converted to the specified type.
            </summary>
        </member>
        <member name="M:InRule.Repository.Attributes.EnumTypeEquivalentAttribute.#ctor(System.Type)">
            <summary>
            Specify type to which enum field can be tagged equivalent to/ can be coverted to.
            </summary>
            <param name="typeEquivalent"></param>
        </member>
        <member name="T:InRule.Repository.Attributes.ModelPropertyAttribute">
            <summary>
            Designates a repository item property as a "Model Property" (state to be transferred between view and model in model-view-controller controller class).
            </summary>
        </member>
        <member name="T:InRule.Repository.Attributes.ViewOnSaveMethodAttribute">
            <summary>
            Designates a view method as a "View OnSave method" (to be invoked as part of OnSave() in model-view-controller controller class).
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsContextVersionSettings">
            <summary>
            Represents a type specifying ContextVersion Settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.IContainsContextVersionSettings.HasContextVersionSettings">
            <summary>
            Indicates if this type has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.IContainsContextVersionSettings.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the type.
            </summary>
        </member>
        <member name="P:InRule.Repository.IContainsContextVersionSettings.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the type.
            </summary>
        </member>
        <member name="T:InRule.Repository.INameResolver">
            <summary>
            Represents a def that can resolve names (including dotted) to defs.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDataTypeChangedEventArgs">
            <summary>
            Provides data for <see cref="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler"/> event.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefChangeEventArgs">
            <summary>
            Provides the data for the <see cref="T:InRule.Repository.RuleRepositoryDefChangeEventHandler"/> events.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefChangeEventArgs.Def">
            <summary>
            Gets the changed def
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDataTypeChangedEventArgs.OriginalDataType">
            <summary>
            Gets the original Datatype for the Def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDataTypeChangedEventArgs.OriginalDataTypeEntityName">
            <summary>
            Gets the original EntityName for Entity type Def.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefChangeEventHandler">
            <summary>
            Delegate for implementing various events related to Rule Repository Def changes.
            </summary>
            <param name="sender">
            The object raising the event.
            </param>
            <param name="e">
            The <see cref="T:InRule.Repository.RuleRepositoryDefChangeEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefPropertyChangeEventHandler`2">
            <summary>
            Delegate for implementing various events related to Rule Repository Def data type changes.
            </summary>
            <typeparam name="TDef">
            The type of the Rule Repository Def.
            </typeparam>
            <typeparam name="T">
            The type of the property.
            </typeparam>
            <param name="sender">
            The object raising the event.
            </param>
            <param name="e">
            The RuleRepositoryDefPropertyChangeEventArgs instance containing the event data.
            </param>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefChangeEventArgs`1.Def">
            <summary>
            Gets the changed def
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefPropertyChangeEventArgs`2.OldValue">
            <summary>
            Gets the old value for the property
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefPropertyChangeEventArgs`2.NewValue">
            <summary>
            Gets the new value for the property
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefRenameEventArgs">
            <summary>
            Provides data for the <see cref="T:InRule.Repository.RuleRepositoryDefChangeEventHandler"/> events raised when def is renamed.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefRenameEventArgs.OldName">
            <summary>
            Gets the old name for the def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefRenameEventArgs.NewName">
            <summary>
            Gets the new name for the def.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleTextSearchContext">
            <summary>
            Specifies one or more context(s) when searching rules.
            </summary>
        </member>
        <member name="T:InRule.Repository.SecurityPermissionCollectionModifiedDelegate">
            <summary>
            Delegate for implementing various events related to <see cref="T:InRule.Repository.SecurityPermissionCollection"/> changes.
            </summary>
            <param name="sender">
            The object raising the event.
            </param>
            <param name="args">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:InRule.Repository.FormulaParseFormat">
            <summary>
            Possible values for FormulaParseFormat.
            </summary>
        </member>
        <member name="T:InRule.Repository.AuthoringView">
            <summary>
            The authoring view for the calculation formula.
            </summary>
        </member>
        <member name="T:InRule.Repository.CalcDef">
            <summary>
            Calculation repository definition
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleExceptionValue">
            <summary>
            RuleExceptionValue base class
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleExceptionValue.CheckForValidationErrors(InRule.Repository.RuleRepositoryDefBase,System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Checks for validation errors and uses an explicit error owner
            </summary>
            <param name="defErrorOwner"></param>
            <param name="errors"></param>
        </member>
        <member name="M:InRule.Repository.CalcDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CategoryDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.CategoryDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.CalcDef.#ctor(InRule.Repository.FormulaParseFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CalcDef"/> class specifying the formula parsing format.
            </summary>
            <param name="parseFormat">The formula parsing format. See <seealso cref="F:InRule.Repository.CalcDef.FormulaParseFormat"/> for details about available formats.</param>
        </member>
        <member name="M:InRule.Repository.CalcDef.#ctor(InRule.Repository.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CalcDef"/> class specifying the return data type.
            </summary>
            <param name="returnType">The data type for a return value.</param>
        </member>
        <member name="M:InRule.Repository.CalcDef.#ctor(InRule.Repository.DataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CalcDef"/> class specifying the return data type and the calc formula.
            </summary>
            <param name="returnType">The data type for a return value.</param>
            <param name="formula">The formula for this calc.</param>
        </member>
        <member name="M:InRule.Repository.CalcDef.#ctor(System.String,InRule.Repository.FormulaParseFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CalcDef"/> class specifying the formula and parse format.
            </summary>
            <param name="formula">The formula for this calc.</param>
            <param name="parseFormat">The formula parsing format. See <seealso cref="F:InRule.Repository.CalcDef.FormulaParseFormat"/> for details about available formats.</param>
        </member>
        <member name="P:InRule.Repository.CalcDef.FormulaText">
            <summary>
            The formula for a calc definition.
            </summary>
        </member>
        <member name="P:InRule.Repository.CalcDef.FormulaParseFormatSpecified">
            <summary>
            Indicates if the property FormulaParseFormat is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.CalcDef.ReturnTypeSpecified">
            <summary>
            Indicates if the property ReturnType is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.CalcDef.LastAuthoringViewSpecified">
            <summary>
            Indicates if the property LastAuthoringView is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.CalcDef.LastAuthoringView">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.AuthoringView"/> for a calc.
            </summary>
        </member>
        <member name="T:InRule.Repository.CalcDefCollection">
            <summary>
            Collection of CalcDef
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> objects.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.#ctor(System.Collections.ICollection,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/> specifying the initial items in the collection.
            </summary>
            <param name="initialItems">The initial <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> items in the collection.</param>
            <param name="enforceParent">The flag specifing whether the parent is enforced.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/> specifying the initial items in the collection.
            </summary>
            <param name="initialItems">The initial <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> items in the collection.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.#ctor(System.Collections.ICollection,System.Collections.ICollection,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/> specifying the initial items in the collection.
            </summary>
            <param name="lhs">The initial <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> items in the left-hand side collection.</param>
            <param name="rhs">The initial <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> items in the right-hand side collection.</param>
            <param name="enforceParent">The flag specifing whether the parent is enforced.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> specifying its parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.IsLast(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Returns if a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the last item in the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to verify.</param>
            <returns>True if the specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the last item in the collection.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.IsFirst(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Returns if a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the first item in the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to verify.</param>
            <returns>True if the specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the first item in the collection.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.MoveUp(System.Guid)">
            <summary>
            Moves the item with the given <see cref="T:System.Guid"/> identifier in a collection up one item, so that it is before the item that originally preceded it.
            </summary>
            <param name="defId">The <see cref="T:System.Guid"/> identifier of the item to move up.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.MoveUp(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Moves the <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item in a collection up one item, so that it is before the item that originally preceded it.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item to move up.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.MoveDown(System.Guid)">
            <summary>
            Moves the item with the given <see cref="T:System.Guid"/> identifier in a collection up one item, so that it is after the item that originally followed it.
            </summary>
            <param name="defId">The <see cref="T:System.Guid"/> identifier of the item to move down.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.MoveDown(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Moves the <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item in a collection down one item, so that it is after the item that originally followed it.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item to move down.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Insert(System.Int32,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Inserts a new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to the collection at the specified index and returns a reference to it.
            </summary>
            <param name="index">The zero-based index at which <paramref name="newItem"/> should be inserted.</param>
            <param name="newItem">The new <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> to insert.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the items of the specified collection to the end of this collection.
            </summary>
            <param name="value">The collection whose items should be added to the end of this collection.</param>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Reset, Add or Remove.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Move only.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Replace only.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Reset only
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Add(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to the collection.
            </summary>
            <param name="newItem">The new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.AddReturningIndex(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to the collection and returns the zero-based index of the item within the collection.
            </summary>
            <param name="newItem">The new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.IndexOf(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> in the collection.
            </summary>
            <param name="newItem">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Contains(System.String)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="name">The name of the item to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Contains(System.Guid)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="guid">The identifier of the item to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.IndexOf(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of an item with the specified name in the collection.
            </summary>
            <param name="name">The name of the item to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of the item within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.IndexOf(System.Guid)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> in the collection.
            </summary>
            <param name="defId">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Sort">
            <summary>
            Sorts the def collection alphabetically based on the def names
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryDefCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the def collection alphabetically based on the def names
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefCollection.Parent">
            <summary>
            References the container <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> object of the collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefCollection.Item(System.String)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> with the specified name.
            </summary>
            <param name="name">The name of a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefCollection.Item(System.String,System.Boolean)">
            <summary>
            ONLY FOR USE INTERNALLY, ONLY VALID AT RUNTIME!
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleRepositoryDefCollection.Item(System.Guid)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> with the specified unique identifier.
            </summary>
            <param name="defId">The unique identifier of a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.</returns>
        </member>
        <member name="T:InRule.Repository.CascadedReferenceDef">
            <summary>
            Specifies cascades between entities. 
            This enables linked entites to refer the parent entity in its rulesets.
            </summary>
        </member>
        <member name="M:InRule.Repository.CascadedReferenceDef.#ctor(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Create a cascade specifying the parent Entity def and the child Entity def.
            </summary>
            <param name="parentDef"></param>
            <param name="childDef"></param>
        </member>
        <member name="M:InRule.Repository.CascadedReferenceDef.#ctor(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Create a cascade specifying the parent Entity def, child Entity def and Boolean value indicating 
            if the <see cref="P:InRule.Repository.CascadedReferenceDef.IsImplicit"/>.
            </summary>
            <param name="parentType"></param>
            <param name="childDef"></param>
            <param name="isImplicit"></param>
        </member>
        <member name="P:InRule.Repository.CascadedReferenceDef.ParentId">
            <summary>
            Gets/Sets the parent Entity <see cref="P:InRule.Repository.RuleRepositoryDefBase.Guid"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.CascadedReferenceDef.ChildId">
            <summary>
            Gets/Sets the child Entity <see cref="P:InRule.Repository.RuleRepositoryDefBase.Guid"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.CascadedReferenceDef.IsImplicit">
            <summary>
            If true, indicates entire parent context is cascaded else indicates 
            only selected fields/collections are cascaded mapping each to corresponding field/collections on child field.
            </summary>
        </member>
        <member name="T:InRule.Repository.CategoryDef">
            <summary>
            Specifies a category used to group RuleApplication items.
            Currently used only by authoring tools, not by runtime.
            </summary>
        </member>
        <member name="M:InRule.Repository.CategoryDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.CategoryDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.CategoryDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.CategoryDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.CategoryDef"/> specifying its action name.
            </summary>
            <param name="name">The action name of the <see cref="T:InRule.Repository.CategoryDef"/>.</param>
        </member>
        <member name="P:InRule.Repository.CategoryDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Category'.
            </summary>
        </member>
        <member name="T:InRule.Repository.CategoryDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.CategoryDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Configuration.AzureCompatibleConfigurationElement">
            <summary>
            Custom configuration element that, when the Azure SDK is available, uses it to retrieve settings. If it is not, or the 
            Azure setting does not exist, the default <see cref="T:System.Configuration.ConfigurationElement"/> behavior is used.
            </summary>
        </member>
        <member name="M:InRule.Repository.Configuration.AzureCompatibleConfigurationElement.GetValue(System.String)">
            <summary>
            Attempts to get the Azure configuration setting (see <see cref="M:InRule.Repository.Configuration.AzureCompatibleConfigurationElement.GetAzureSdkValue(System.String)"/>); if it doesn't exist,
            it uses the default behavior of <see cref="M:System.Configuration.ConfigurationElement.get_Item(System.Configuration.ConfigurationProperty)"/>.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Configuration.AzureCompatibleConfigurationElement.GetAzureSdkValue(System.String)">
            <summary>
            This method depends on the Microsoft.WindowsAzure.Configuration assembly. If it is not available, the method
            returns null. If it does exist and the application is running in Azure, the value from Azure's configuration settings
            are used. If it exists and is NOT running in an Azure application, the application's AppSettings are checked.
            </summary>
        </member>
        <member name="T:InRule.Repository.DataElementDef">
            <summary>
            Represents the base abstract element that all DataElements(like InlineValueListDef,TableDef etc) must inherit.
            </summary>
        </member>
        <member name="P:InRule.Repository.DataElementDef.NeedsVersionDatesToResolve">
            <summary>
            Indicates whether the def, or one for which it is dependent on, has more than one version.
            </summary>
        </member>
        <member name="T:InRule.Repository.RestOperationInputParameterDefCollection">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.OverrideInfo">
            <summary>
            Represents Override Information for all endpoints. acts as a base class for all other endpoint overrides.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.OverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.OverrideInfo.Create(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Gets the override info type by end point def
            </summary>
            <param name="endPointDef">Def to create an <see cref="T:InRule.Repository.EndPoints.Overrides.OverrideInfo"/> for.</param>
            <returns>The <see cref="T:InRule.Repository.EndPoints.Overrides.OverrideInfo"/> for the specified def</returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.OverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.OverrideInfo.EndPointName">
            <summary>
            Gets or sets the name of the end point.
            </summary>
            <value>The name of the end point.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.OverrideInfo.EndPointGuid">
            <summary>
            Returns the GUID for end point override.
            </summary>
            <value>Returns the GUID for end point override..</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.RestServiceDef">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.IRestServiceDef">
            <summary>
            Represents a type which specifies a RestService endpoint
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.RootUrl">
            <summary>
            Root url of rest service
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.AuthenticationType">
            <summary>
            Get/Sets Rest Authentication Type
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.Username">
            <summary>
            Get/Set username
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.Password">
            <summary>
            Get/Sets password
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.Domain">
            <summary>
            Get/Sets Domain
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IRestServiceDef.X509Certificate">
            <summary>
            Get/Sets X509Certificate
            </summary>
        </member>
        <member name="T:InRule.Repository.RuntimeErrorHandlingPolicy">
            <summary>
            Defines what action the rule engine takes after a runtime error is encountered.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuntimeErrorHandlingPolicy.ContinueWithNextRuleSet">
            <summary>
            Halt current rule and continue execution with the next ruleset scheduled.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuntimeErrorHandlingPolicy.ContinueWithNextRule">
            <summary>
            Halt current rule and continue execution with the next rule in the current ruleset. 
            </summary>
        </member>
        <member name="F:InRule.Repository.RuntimeErrorHandlingPolicy.Halt">
            <summary>
            Halts rule execution immediately. 
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.IRequiresInfoProvider">
            <summary>
            Infos coming out of the infostore require this interface in order to set their info id
            The initialize method called when they are first created
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DataInfo.ReturnDataType">
            <summary>
            The datatype used at runtime to reference this data info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DataInfo.RequiresVersionDatesToResolve">
            <summary>
            Indicates that the value list requires version dates in order to resolve itself
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IValueInfo.LogicalGroupKey">
            <summary>
            Identifier for which named sub group something belongs to, ex:Then or Else
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ValueInfo.GetResolvableNames(InRule.Repository.Infos.InfoHashSet,System.Boolean,System.String)">
            <summary>
            Returns names resolvable from the value of this field
            If matching name is not null, only returns paths matching the name
            Otherwise, returns all resolvable names
            </summary>
            <param name="checkList"></param>
            <param name="localOnly"></param>
            <param name="matchingName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ValueInfo.SupportsAuthoredValueAssignment(InRule.Repository.Infos.ISchemaContext,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Indicates that the author can assign this value from an action in the given calling context
            Variables and Ruleset parameters can only be accessed sibilings and their descendents
            Since no variables allowed for optimized rules, dont have to worry if creating partials and flat rulesets
            </summary>
            <param name="fromCallingContext"></param>
            <param name="reasonForNotSupporting"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ValueInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use from this context
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ValueInfo.BuildAspectWithErrorCheck(InRule.Repository.Infos.Builders.BuildEngine,System.String,System.Action)">
            <summary>
             Invoked the action and if an authoring exception occurs, associates the authroing exception's message with this info and the source aspect
            </summary>
            <param name="engine"></param>
            <param name="sourceAspect"></param>
            <param name="action"></param>
        </member>
        <member name="P:InRule.Repository.Infos.ValueInfo.LogicalGroupKey">
            <summary>
            Identifier for which named sub group something belongs to, ex:Then or Else
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueInfo.PostExecuteAgendaBehavior">
            <summary>
            If not null, indicates that the agenda should be cleared after execution according to the settings
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueInfo.PreExecuteAgendaBehavior">
            <summary>
            If not null, indicates that the agenda should be cleared before execution according to the settings
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueInfo.RelativePathFromContainer">
            <summary>
            Returns the relative rule path to the state container which holds the value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueInfo.ShowInExecutionLog">
            <summary>
            For ValueInfos
             - if the info has a related source def, show it in the execution log
             - use the current FullName and wait for cleanup on naming there
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ILogicInfo.IsDecisionTable">
            <summary>
            Indicates that the original souce of this rule was a decision table
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ILogicInfo.IsDecisionTableRow">
            <summary>
            Indicates that the original souce of this rule was a decision table row
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ILogicInfo.IsLanguageRule">
            <summary>
            Indicates that the original souce of this rule was a language rule
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.LogicInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Set the intraring sequence number and returns the next value for the next sibling
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.LogicInfo.UsesAlternativeConcatSyntaxInArgument(InRule.Repository.Infos.IEvalInfo)">
            <summary>
            Any action that uses &lt;%value%&gt; syntax instead of Concat(value) should return true if the info matches one of its argument properties.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteRestServiceActionInfo.AssignReturnValueTargetEval">
            <summary>
            Evaluation path to where the result is stored
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRestServiceActionInfo.AssignReturnValueTargetSourceExpression">
            <summary>
            Source expression for AssignReturnValueEval
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRestServiceActionInfo.AssignReturnValueTargetEval">
            <summary>
            Evaluation path to where the result is stored
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.EvalInfo.FormatExpressionForDebug(System.String)">
            <summary>
            Formats a function expression with tabs and carriage returns for debug reading
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalInfo.GetEvalToTailContainerContext(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            This method is used to repurpose the context of an expression to reroute to an alternate tail eval.  It returns an eval info to the tail container of this eval.
            For example, getting the is invalid field for another field.  First we need to resolve an expression to the target field, then reuse that context to resolve the expression to the invalid field which is linked to it.
            Used for - Resolving to element reference, invalid field, classifications, Meta Data / User Attributes
            For an eval that results in a ValueEvalInfo, returns an eval to the context of the value eval info
            For an eval that results in a ContainerEvalInfo, returns itself, the container is the tail container
            For an eval that results in a collection member reference, returns the collection member's data type
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalInfo.Union_EvalInfo_GetValuesRead(InRule.Repository.Infos.EvalInfo[])">
            <summary>
            Combines the enumerated returned value infos from the non null eval infos in the params array
            Ex: From CopyCollectionActionInfo.GetValuesRead:  return Union_EvalInfo_GetValuesRead(CopyAction,SortAction)
            </summary>
            <param name="evalInfos"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalInfo.TryReconcileMultiplePotentialResultDataTypes(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.DataTypeInfo,InRule.Repository.Infos.DataTypeInfo,InRule.Repository.Infos.DataTypeInfo@)">
            <summary>
            Determines the result type to use for functions with defaults or if, which might return multiple different data types
            </summary>
            <param name="engine"></param>
            <param name="primaryTypeInfo"></param>
            <param name="secondardTypeInfo"></param>
            <param name="resultTypeToUse"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.EvalInfo.HasAuthoringError">
            <summary>
            Indicates that this eval will raise a runtime error if accessed
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.FunctionEvalInfo.EnsureTargetCollectionSupportsAggregration(InRule.Repository.Infos.EvalInfo,InRule.Repository.Expressions.ExpressionNode)">
            <summary>
            Ensures that the target collection is a valid collection that supports aggregrate functions
            </summary>
            <param name="collectionEvalInfo"></param>
            <param name="collectionArg"></param>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteRestServiceActionInputInfo.InputValueSourceEvalInfo">
            <summary>
            Evaluation path to source expression
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRestServiceActionInputValueInfo.InputValueSourceExpression">
            <summary>
            Source expression for InputValueSourceEvalInfo
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRestServiceActionInputValueInfo.InputValueSourceEvalInfo">
            <summary>
            Evaluation path to source expression
            </summary>
        </member>
        <member name="M:InRule.Repository.InRuleEnvironment.VerifyIsDebug(System.String)">
            <summary>
            Throws an <seealso cref="T:System.InvalidOperationException"/> exception if called from a RELEASE build.
            </summary>
            <param name="invalidOperationMessage">The message to pass to the exception.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the method is called from a RELEASE build.</exception>
        </member>
        <member name="M:InRule.Repository.InRuleEnvironment.AddFeatureFlag(System.String)">
            <summary>
            Adds a feature flag.
            </summary>
            <param name="name">The name of the feature flag.</param>
        </member>
        <member name="M:InRule.Repository.InRuleEnvironment.ContainsFeatureFlag(System.String)">
            <summary>
            Indicates whether a feature flag has been set.
            </summary>
            <param name="name">The name of the feature flag.</param>
            <returns>True if the feature flag has been set or false if it has not.</returns>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection">
            <summary>
            Collection of ExecuteMethodActionParamDef. Contains all method parameters.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodDefExtensions.GetSyncedParameterValuesList(InRule.Repository.RuleElements.IExecuteMethodDef,System.Int32,System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Get <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection"/> which contains parameters list sync'd with latest schema method signature info
            for the selected method.
            </summary>
            <param name="selectedMethodIndex">If &gt;= 0, explicitly specifies a specific method to use (</param>
            <param name="errors">Pass in the List[CompilerError] collection from the calling method so we can add it, if needed. Null value is allowed.</param>
            <returns>Newly created <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection"/>. Is typically assigned to "ParameterValues" by caller.</returns>
            <remarks>
            	<para>Sync behavior with regard to existing "ParameterValues" is as follows:</para>
            	<list type="bullet">
            		<item><description>For any named params (assigned argName), the expression is correlated with the argName.</description></item>
            		<item><description>If all params are un-named, they are assigned in the order they appear.</description></item>
            	</list> 
            </remarks>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteRestServiceActionDef">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleActionDef">
            <summary>
            Base class for repository action definitions like SetValueActionDef etc.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleElementDef">
            <summary>
            Base class for for all repository rules and actions definitions like SimpleRuleDef,SetValueActionDef etc.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDef.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection"/> specifying its parent.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDef.#ctor(InRule.Repository.IParent,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> specifying its parent and action name.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="name">The action name.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> specifying its action name.
            </summary>
            <param name="name">The action name.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDef.ClearLanguageHintTable">
            <summary>
            Clears the Language Hint Table for this rule
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.RuleElementType">
            <summary>
            Gets the type of the RuleElement like Action,SimpleRule,WhileRule,RuleSetFolder etc.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.ThisAuthoringContainer">
            <summary>
            Returns the closest authoring container def from this <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> evaluated recursively.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.IsAuthoringContainer">
            <summary>
            Indicates if a Rule Element is authoring container.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.IsAllowedInParentContext">
            <summary>
            Indicates if a Rule element(Rule/Action) is valid in the context of the RuleSet/Actions folder under which it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.Versions">
            <summary>
            Gets the <see cref="T:InRule.Repository.RuleElements.RuleElementVersionCollection"/> which specifies all authored versions for this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDef.VersionsSpecified">
            <summary>
            Indicates if the Versions parameter is specified.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleActionDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleActionDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleActionDef"/> specifying the action name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.RuleActionDef"/>.</param>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleActionDef.RuleElementType">
            <summary>
            Gets the rule element type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleActionDef.RuleActionType">
            <summary>
            Gets the rule action type (SetValue, ExecuteMethod etc).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleActionDef.IsEntityScope">
            <summary>
            Returns true if this action is authored under an Entity Ruleset or Entity Actions folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleActionDef.ParentCollection">
            <summary>
            Gets the parent collection of ruleelements to which this action belongs if there is one. 
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IExecuteRestServiceActionDef">
            <summary>
            Represents a type which defines a RestService action.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteRestServiceActionDef.Operation">
            <summary>
            Specifies the RestService Template name
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteRestServiceActionDef.AssignReturnValueToField">
            <summary>
            Return value assignment field
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteRestServiceActionDef.InputValues">
            <summary>
            List of available inputs for the Rest Service
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.ExecuteRestServiceActionDef"/>.
            Specifies the values for the used <see cref="T:InRule.Repository.EndPoints.RestServiceDef"/> parameters, if any.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.#ctor(System.String,System.String,InRule.Repository.DataType)">
            <overloads>
            Create sql query param arg
            </overloads>
            <summary>
            Create sql query param arg specifying parameter name, value expression, data type, direction
            </summary>
            <param name="argName"></param>
            <param name="argExpression"></param>
            <param name="inputType"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.#ctor(System.String,System.String)">
            <summary>
            Create sql query param arg specifying parameter name, value expression.
            </summary>
            <param name="argName"></param>
            <param name="argExpression"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.ArgName">
            <summary>
            Gets/Sets the parameter name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.InputType">
            <summary>
            Gets/Sets the parameter type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the query parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.ArgExpression">
            <summary>
            Gets/Sets the parameter value expression as defined by <see cref="P:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteRestServiceActionParameterValueDefCollection">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IMapDataActionDef.SourceDocumentDataType">
            <summary>
            An enum of available formats
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IMapDataActionDef.SourceField">
            <summary>
            Source value assignment field
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IMapDataActionDef.TargetField">
            <summary>
            Return value assignment field
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IMapDataActionDef.IgnoreDataShapeErrors">
            <summary>
            Ignore data shape errors while mapping.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IMapDataActionDef.IgnoreCastingErrors">
            <summary>
            Ignore casting errors while mapping.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ReturnValueDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionDef"/>.
            Specifies a return value, such as from a method, SQL query, etc.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ReturnValueDef.#ctor(System.String)">
            <summary>
            Create a return value def.
            </summary>
            <param name="argExpression"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ReturnValueDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ReturnValueDef.ArgExpression">
            <summary>
            Gets/Sets argument value expression as defined by <see cref="P:InRule.Repository.RuleElements.ReturnValueDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.Classifications.ClassificationDef">
            <summary>
            Specifies classifications defined on an entity/field.
            </summary>
        </member>
        <member name="M:InRule.Repository.Classifications.ClassificationDef.ClearLanguageHintTable">
            <summary>
            Clears the Language Hint Table for this rule
            </summary>
        </member>
        <member name="P:InRule.Repository.Classifications.ClassificationDef.DisplayName">
            <summary>
            Gets/Sets the display-name for this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.Classifications.ClassificationDef.ShortName">
            <summary>
            Gets/Sets the short-name for this def.
            This name must be used to retrieve a classification from an entity/fields ccollection of classifications.
            </summary>
        </member>
        <member name="P:InRule.Repository.Classifications.ClassificationDef.Expression">
            <summary>
            Gets/Sets the classification expression.
            </summary>
        </member>
        <member name="T:InRule.Repository.Classifications.ClassificationDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.Classifications.ClassificationDef"/>s.
            </summary>
        </member>
        <member name="T:InRule.Repository.Client.DefRefreshBehavior">
            <summary>
            Indicates if any stale shared schema elements should be refreshed.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.DefRefreshBehavior.All">
            <summary>
            Stale shared schema elements should all be refreshed.
            </summary>
        </member>
        <member name="F:InRule.Repository.Client.DefRefreshBehavior.None">
            <summary>
            Stale shared schema elements should not be refreshed.
            </summary>
        </member>
        <member name="M:InRule.Repository.Collections.ChangeNotifyingCollectionBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Reset, Add or Remove.
            </summary>
        </member>
        <member name="M:InRule.Repository.Collections.ChangeNotifyingCollectionBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Move only.
            </summary>
        </member>
        <member name="M:InRule.Repository.Collections.ChangeNotifyingCollectionBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Replace only.
            </summary>
        </member>
        <member name="M:InRule.Repository.Collections.ChangeNotifyingCollectionBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Reset only
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.BetweenDef">
            <summary>
            Between Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value between
            two specified values.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.FieldConstraintDef">
            <summary>
            Field Constraint repository definition.
            Represents the base abstract element that all constraints must inherit.
            </summary>
        </member>
        <member name="M:InRule.Repository.Constraints.FieldConstraintDef.GetExpression">
            <summary>
            Gets the constarint expression.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Constraints.FieldConstraintDef.Field">
            <summary>
            Gets the field to which constraint is applied.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.FieldConstraintDef.FieldValidationMessage">
            <summary>
            Gets/Sets the validation message to be displayed when a constraint is violated.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.FieldConstraintDef.Allow">
            <summary>
            Gets/Sets whether this constraint is allowed. The default is false.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.BetweenDef.FirstValue">
            <summary>
            Gets/Sets the first value for comparison.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.BetweenDef.SecondValue">
            <summary>
            Gets/Sets the second value for comparison
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.EqualsDef">
            <summary>
            Equal constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value equal to
            a specified value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.EqualsDef.Value">
            <summary>
            Gets/Sets the value.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.FieldConstraintDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.Constraints.FieldConstraintDef"/>s.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.GreaterThanDef">
            <summary>
            GreaterThan Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value greater than
            a specified value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.GreaterThanDef.GreaterThanValue">
            <summary>
            Gets/Sets the value for comparison.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.GreaterThanOrEqualDef">
            <summary>
            GreaterThanOrEqual Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value greater than/equal to
            a specified value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.GreaterThanOrEqualDef.GreaterThanOrEqualValue">
            <summary>
            Gets/Sets value for comparison.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.LessThanDef">
            <summary>
            LessThan Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value less than
            a specified value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.LessThanDef.LessThanValue">
            <summary>
            Gets/Sets the value for comparison.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.LessThanOrEqualDef">
            <summary>
            LessThanOrEqual Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny value less than/equal to
            a specified value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.LessThanOrEqualDef.LessThanOrEqualValue">
            <summary>
            Gets/Sets the value for comparison.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.LimitToValueListDef">
            <summary>
            LimitToValueList Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny values specified in the field value list.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.Literals">
            <summary>
            Defines the different constraint expressions.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.MaximumLengthDef">
            <summary>
            MaximumLength Constraint repository definition.
            Represents a constraint that can be set on text field to allow/deny values 
            having at most as many characters as sepcified.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.MaximumLengthDef.MaximumLength">
            <summary>
            Gets/Sets maximum length for text field.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.MinimumLengthDef">
            <summary>
            MinimumLength Constraint repository definition.
            Represents a constraint that can be set on text field to allow/deny values 
            having at least as many characters as sepcified.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.MinimumLengthDef.MinimumLength">
            <summary>
            Gets/Sets the minimum length for the text field.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.NotNullDef">
            <summary>
            NotNull repository definition.
            Represents a constraint that can be set on a field to allow/deny null values.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.NumberOfDigitsDef">
            <summary>
            NumberOfDigits Constraint repository definition.
            Represents a constraint that can be set on a number field to allow/deny values 
            having specified number of digits.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.NumberOfDigitsDef.NumberOfDigits">
            <summary>
            Gets/Sets the number of digits for the field.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.NumberOfFractionDigitsDef">
            <summary>
            NumberOfFractionDigits Constraint repository definition.
            Represents a constraint that can be set on a number field to allow/deny values 
            having specified number of digits after the decimal point.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.NumberOfFractionDigitsDef.NumberOfFractionDigits">
            <summary>
            Gets/Sets the number of digits after decimal point for the field.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.PatternMaskDef">
            <summary>
            PatternMask Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny values as per the specified pattern.
            </summary>
        </member>
        <member name="P:InRule.Repository.Constraints.PatternMaskDef.PatternMask">
            <summary>
            Gets/Sets the pattern for comparison with field value.
            </summary>
        </member>
        <member name="T:InRule.Repository.Constraints.WhiteSpaceDef">
            <summary>
            WhiteSpace Constraint repository definition.
            Represents a constraint that can be set on field to allow/deny values with leading,trailing or duplicate white spaces.
            </summary>
        </member>
        <member name="T:InRule.Repository.DataType">
            <summary>
            Possible values for DataType.
            </summary>
        </member>
        <member name="M:InRule.Repository.Data.DataCache.CheckForCleanup(System.Boolean)">
            <summary>
            Cleanup cache. ASSUME lock is applied by caller.
            </summary>
            <param name="skipCacheDepthCheck">Set to true if only performing a read operation.</param>
        </member>
        <member name="F:InRule.Repository.Data.DataCache.Instance">
            <summary>
            Ensure singleton behavior.
            </summary>
        </member>
        <member name="T:InRule.Repository.DataElementsRootDef">
            <summary>
            Authoring root folder for Data Elements. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsDataElements">
            <summary>
            IContainsDataElements base interface (implemented by RuleApplicationDef et al.)
            </summary>
        </member>
        <member name="M:InRule.Repository.DataElementsRootDef.GetAllDataElements">
            <summary>
            Gets all child <see cref="T:InRule.Repository.DataElementDef"/>s for this def(including those defined under a DataFolder)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.DataElementsRootDef.FindDataElement(System.String)">
            <summary>
            Get a child <see cref="T:InRule.Repository.DataElementDef"/> specified by its name.
            </summary>
            <param name="elName"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.DataFolderDef">
            <summary>
            Data Folder repository data definition
            </summary>
        </member>
        <member name="T:InRule.Repository.Data.DataManager">
            <summary>
            For Internal InRule use only
            </summary>
        </member>
        <member name="M:InRule.Repository.Data.DataManager.StripDelimitersIfNeeded(InRule.Repository.SqlQuerySettings,System.String,System.String)">
            <summary>
            Strips the delimiters if needed.
            </summary>
            <param name="qrySettings">The SqlQuerySettings settings.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramValue">The parameter value.</param>
            <returns>param value</returns>
        </member>
        <member name="T:InRule.Repository.ListDef">
            <summary>
            No longer used, replaced by valuelistdef.
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsLists">
            <summary>
            IContainsLists base interface
            </summary>
        </member>
        <member name="T:InRule.Repository.ListDefCollection">
            <summary>
            Collection of ListDef
            </summary>
        </member>
        <member name="T:InRule.Repository.ListItemDef">
            <summary>
            No longer used, replaced by valuelistdef.
            </summary>
        </member>
        <member name="T:InRule.Repository.ListItemDefCollection">
            <summary>
            Collection of ListItemDef
            </summary>
        </member>
        <member name="T:InRule.Repository.ListSourceType">
            <summary>
            No longer used, replaced by valuelistdef.
            </summary>
        </member>
        <member name="T:InRule.Repository.ListSettings">
            <summary>
            No longer used, replaced by valuelistdef.
            </summary>
        </member>
        <member name="T:InRule.Repository.ListSettingsCollection">
            <summary>
            No longer used, replaced by valuelistdef.
            </summary>
        </member>
        <member name="T:InRule.Repository.CommandType">
            <summary>
            Possible Command type values for an SQL query.
            </summary>
        </member>
        <member name="F:InRule.Repository.CommandType.Execute">
            <summary>
            Execute an SQL command.
            </summary>
        </member>
        <member name="F:InRule.Repository.CommandType.Select">
            <summary>
            Select rows.
            </summary>
        </member>
        <member name="F:InRule.Repository.CommandType.SelectValue">
            <summary>
            Select value.
            </summary>
        </member>
        <member name="T:InRule.Repository.CommandReturnType">
            <summary>
            Possible values for CommandReturnType
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQueryDef">
            <summary>
            SQL Query repository data definition
            </summary>
        </member>
        <member name="E:InRule.Repository.SqlQueryDef.QuerySettingsChanged">
            <summary>
            Occurs when the SqlQuerySettings is overwritten by a new object reference
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQueryDefCollection">
            <summary>
            Collection of SqlQueryDef
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQueryParmDef">
            <summary>
            SQL Query parameter
            </summary>
        </member>
        <member name="M:InRule.Repository.SqlQueryParmDef.GetListDisplayNames">
            <summary>
            Returns a datatable containing the complete list of available types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.SqlQueryParmDef.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid sql parameter name (must start with @).
            </summary>
            <param name="candidateName"></param>
            <returns>Valid sql parameter name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
        <member name="P:InRule.Repository.SqlQueryParmDef.SQLQueryParameterDirection">
            <summary>
            Gets or sets the SQL query parameter direction.
            </summary>
            <value>SQL query parameter direction.</value>
        </member>
        <member name="T:InRule.Repository.SqlQueryParmDef.ParameterDirection">
            <summary>
            Specifies the type of a parameter.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQueryParmDef.ParameterDirection.Input">
            <summary>
            The parameter is an input parameter.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQueryParmDef.ParameterDirection.InputOutput">
            <summary>
            The parameter is capable of both input and output.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQueryParmDef.ParameterDirection.Output">
            <summary>
            The parameter is an output parameter.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQueryParmDef.ParameterDirection.ReturnValue">
            <summary>
            The parameter represents a return value from an operation such as a stored procedure, built-in function, or user-defined function.
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQueryParmDefCollection">
            <summary>
            Collection of SqlQueryParmDef
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQuerySource">
            <summary>
            Possible values for <see cref="P:InRule.Repository.SqlQuerySettings.SqlQuerySource"/>.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQuerySource.DatabaseEndPoint">
            <summary>
            Query is run against an external database.
            </summary>
        </member>
        <member name="F:InRule.Repository.SqlQuerySource.InlineTable">
            <summary>
            Query is run against either an inline table, or an external database using the Database Table table name specified in the query string.
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQuerySettings">
            <summary>
            Settings for an SqlQueryDef
            </summary>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.Parameters">
            <summary>
            Zero or more parameters to be subsituted into <see cref="P:InRule.Repository.SqlQuerySettings.QueryText"/>
            </summary>
        </member>
        <member name="E:InRule.Repository.SqlQuerySettings.ParametersChanged">
            <summary>
            Occurs when the Parameters collection is overwritten with a new object reference
            </summary>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.CommandType">
            <summary>
            Specifies command type (execute / select)
            </summary>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.DatabaseEndPointName">
            <summary>
            Specifies Database endpoint if <see cref="P:InRule.Repository.SqlQuerySettings.SqlQuerySource"/> is <see cref="P:InRule.Repository.SqlQuerySettings.SqlQuerySource"/>.DatabaseEndPoint
            </summary>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.SqlQuerySource">
            <summary>
            Dictates whether query is from external Database (via endpoint), rule app inline table or other.
            </summary>
            <remarks>
            When source is <see cref="P:InRule.Repository.SqlQuerySettings.SqlQuerySource"/>.InlineTable, the tablename is parsed out of the <see cref="P:InRule.Repository.SqlQuerySettings.QueryText"/>.
            </remarks>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.QueryText">
            <summary>
            Text of query
            </summary>
            <remarks>
            <para>Any @parameters are substituted.</para>
            <para>Queries against inline tables must be of the following form:</para>
            <para>SELECT * FROM tablename WHERE expression ORDER BY col1 ASC, col2 DESC</para>
            <para>Note that either or both of "WHERE expression" and "ORDER BY..." may be omitted.</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.SqlQuerySettings.CacheDuration">
            <summary>
            Cache duration sec (0 to disable caching)
            </summary>
        </member>
        <member name="T:InRule.Repository.SqlQuerySettingsCollection">
            <summary>
            Collection of SqlQuerySettings
            </summary>
        </member>
        <member name="T:InRule.Repository.TableDef">
            <summary>
            Database Table repository data definition
            </summary>
        </member>
        <member name="E:InRule.Repository.TableDef.TableSettingsChanged">
            <summary>
            Occurs when the TableSettings reference is overwritten with a new object reference
            </summary>
        </member>
        <member name="T:InRule.Repository.TableSettings">
            <summary>
            Settings for TableDef
            </summary>
        </member>
        <member name="M:InRule.Repository.TableSettings.HandleIndirectValueListRefactor(System.Data.DataSet)">
            <summary>
            Refactors value lists derived from this table for specific value changes
            </summary>
        </member>
        <member name="M:InRule.Repository.TableSettings.CollectDerivedLists(System.String,InRule.Repository.DataElementDefCollection,System.Collections.Generic.List{InRule.Repository.ValueLists.SqlValueListDef})">
            <summary>
            collects <see cref="T:InRule.Repository.ValueLists.SqlValueListDef"/> whose source is this table
            </summary>
        </member>
        <member name="M:InRule.Repository.TableSettings.SetInlineDataTableSchema(System.Data.DataTable,System.Boolean)">
            <summary>
            Set schema to specified schema-table (in format returned by <see cref="M:InRule.Repository.TableSettings.GetInlineDataTableSchema"/>), impo
            </summary>
            <param name="dataTableSchema"></param>
            <param name="clearPriorContents"></param>
            <exception cref="T:System.Exception">If any problem importing existing contents to new schema.</exception>
        </member>
        <member name="P:InRule.Repository.TableSettings.CacheDuration">
            <summary>
            Cache duration sec (0 to disable caching). Is used only for TableLookup() and Lookup() functions (not for SqlQuery against table)
            </summary>
        </member>
        <member name="P:InRule.Repository.TableSettings.SourceTableName">
            <summary>
            Source Table name (if LinkedTable)
            </summary>
        </member>
        <member name="E:InRule.Repository.TableSettings.SchemaChanged">
            <summary>
            Occurs when the InlineDataSet property is overwritten with a new value, which implies a change to the schema
            </summary>
        </member>
        <member name="T:InRule.Repository.XmlDocumentDef">
            <summary>
            Xml Document repository data definition
            </summary>
        </member>
        <member name="T:InRule.Repository.XmlDocumentSourceType">
            <summary>
            Possible values for XmlDocumentSourceType.
            </summary>
        </member>
        <member name="T:InRule.Repository.XmlDocumentSettings">
            <summary>
            Settings for XmlDocumentDef
            </summary>
        </member>
        <member name="T:InRule.Repository.XPathQueryDef">
            <summary>
            XPath Query repository data definition
            </summary>
        </member>
        <member name="M:InRule.Repository.XPathQueryDef.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid xpath parameter name (must start with $).
            </summary>
            <param name="candidateName"></param>
            <returns>Valid xpath parameter name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
        <member name="M:InRule.Repository.XPathQueryDef.GetXmlDocumentNames">
            <summary>
            Get available Xml Document element names
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.XPathQueryDef.Validate">
            <summary>
            Validate each param
            </summary>
            <returns>null if OK, otherwise msg string</returns>
        </member>
        <member name="T:InRule.Repository.XPathQuerySettings">
            <summary>
            Settings for an XPathQueryDef
            </summary>
        </member>
        <member name="P:InRule.Repository.XPathQuerySettings.Parameters">
            <summary>
            Zero or more parameters to be subsituted into <see cref="P:InRule.Repository.XPathQuerySettings.QueryText"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.XPathQuerySettings.DataElementName">
            <summary>
            Specifies Data Element name
            </summary>
        </member>
        <member name="P:InRule.Repository.XPathQuerySettings.QueryText">
            <summary>
            Text of query
            </summary>
            <remarks>
            <para>Any $parameters are substituted.</para>
            </remarks>
        </member>
        <member name="T:InRule.Repository.DecisionTables.ActionDimensionDef">
            <summary>
            Represents a possible action to take based on the outcome of a decision
            </summary>
        </member>
        <member name="M:InRule.Repository.DecisionTables.ConditionDimensionDef.GetConditionValueDef(System.String)">
            <summary>
            Returns the ConditionValueDef from the list of conditions authored , as per the display text provided.
            </summary>
            <param name="displayText"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.DecisionTables.ConditionDimensionDef.CreateConditionValueDef(System.String)">
            <summary>
            Creates a new ConditionValueDef by parsing the displayText parameter 
            </summary>
            <param name="displayText"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.DecisionTables.ConditionDimensionDef.RefreshListValues(InRule.Repository.Data.DataManager,InRule.Repository.DecisionTables.ConditionDimensionDef,InRule.Repository.ValueLists.ValueListReferenceDef,InRule.Repository.DecisionTables.ConditionDimensionDef)">
            <summary>
            No culture specific parsing will occur within this method because this should represent
            a value list item to value list item transform, all of which should be persisted in
            invariant culture
            </summary>
            <remarks>
            Assumption here is that this entire process operates on invariant culture data
            and need not participate in culture conversions and this affects perf measurably
            in non-invariant cultures
            </remarks>
        </member>
        <member name="P:InRule.Repository.DecisionTables.ConditionDimensionDef.LimitToList">
            <summary>
            No longer supported. Included here only for legacy purposes.
            </summary>
        </member>
        <member name="T:InRule.Repository.DecisionTables.DecisionDef">
            <summary>
            Describes one row in a Decision Table
            </summary>
        </member>
        <member name="T:InRule.Repository.DecisionTables.DecisionTableDef">
            <summary>
            Decision Table rule definition.
            </summary>
        </member>
        <member name="M:InRule.Repository.Differences.DefComparer.#ctor(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Initializes a new <see cref="T:InRule.Repository.Differences.DefComparer"/> that compares defs using a single thread.
            </summary>
            <param name="compare">The def to compare.</param>
            <param name="to">The def being compared.</param>
        </member>
        <member name="M:InRule.Repository.Differences.DefComparer.#ctor(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:InRule.Repository.Differences.DefComparer"/>.
            </summary>
            <param name="compare">The def to compare.</param>
            <param name="to">The def being compared.</param>
            <param name="useMultipleThreads">Indicates whether multiple threads may be used in comparing the defs.</param>
        </member>
        <member name="T:InRule.Repository.EndPoints.DatabaseConnection">
            <summary>
            Database Connection repository endpoint definition
            </summary>
            <remarks>
            Also used to specify an override at runtime, using either a connection string or live connection / transaction object.
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.#ctor">
            <overloads>
            Create a DatabaseConnection endpoint or runtime endpoint override
            </overloads>
            <summary>
            Create a DatabaseConnection endpoint or runtime endpoint override with automatic name and no connection string yet set
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.#ctor(System.String)">
            <overloads>
            Create a DatabaseConnection endpoint or runtime endpoint override
            </overloads>
            <summary>
            Create a DatabaseConnection endpoint or runtime endpoint override using the specified OleDb connection string
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.#ctor(System.String,System.String)">
            <summary>
            Create a DatabaseConnection endpoint or runtime endpoint override using the specified name and OleDb connection string
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.#ctor(System.String,System.Data.IDbConnection)">
            <summary>
            Create a DatabaseConnection endpoint or runtime endpoint override using the specified name and connection object (does not have to be open).
            </summary>
            <param name="endPointName"></param>
            <param name="dbConnection"></param>
            <remarks>
            The connection object does not have to be open. 
            <para>This constructor allows for specifying a SQL-Server-format or
            Oracle-format connection string as an alternative to the default OleDb-format.</para>
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.#ctor(System.String,System.Data.IDbTransaction)">
            <summary>
            Create a DatabaseConnection runtime endpoint override using the specified name and open transaction object.
            </summary>
            <param name="endPointName"></param>
            <param name="dbTransaction"></param>
            <remarks>
            This constructor form may not be used when using an out-of-process engine service.
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.GetOleDbConnString">
            <summary>
            Get OleDbConnstring
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.GetAssemblyName(System.String)">
            <summary>
            Gets the name of the assembly.
            </summary>
            <param name="connString">The conn string.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EndPoints.DatabaseConnection.GetAssemblyClassName(System.String)">
            <summary>
            Gets the name of the assembly class.
            </summary>
            <param name="connString">The conn string.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.DatabaseConnection.CreateChildFields">
            <summary>
            Specifies whether child relational fields are created for FK relationships
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.DatabaseConnection.IgnoreReadonlySettings">
            <summary>
            Allows specifying ignoring of ReadOnly setting on a column.
            </summary>
            <remarks>
            This has the following effects:
            <list type="bullet">
            	<item><description>At import time, it will not set FieldDef.ReadOnly true for db columns specifying ReadOnly (including autoincrement ones).</description></item>
            	<item><description>At import time, the xsd embedded (stored with ruleapp) will have readonly false for all columns.</description></item>
            	<item><description>At runtime, when a dataset instance is created by inrule (rather than being passed in), all of its columns will have ReadOnly false.</description></item>
            	<item><description>At runtime, attempting to set a column value (including autoincrement values) will now work, when before it failed due to the 2 constraints above.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.DatabaseConnection.DbConnectionTypeName">
            <summary>
            Gets or sets the name of the db connection type.Stores the assembly name and class type name.
            </summary>
            <value>The name of the db connection type.</value>
            <remarks>Oracle.DataAccess,Oracle.DataAccess.Client.OracleConnection</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.DatabaseConnection.dbTypeImpl">
            <summary>
            hides implementation of <see cref="P:InRule.Repository.EndPoints.DatabaseConnection.DbType"/> to allow obfuscation
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.DatabaseConnection.DbType">
            <summary>
            Gets or sets the type of the database provider.
            </summary>
            <value>The type of the database provider.</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.EndPointsRootDef">
            <summary>
            Authoring root folder for EndPoints. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.IContainsEndPoints">
            <summary>
            Represents a type containing <see cref="T:InRule.Repository.EndPoints.EndPointDef"/>s.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.IWebServiceDef">
            <summary>
            Represents a type which specifies a WebService endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IWebServiceDef.Operations">
            <summary>
            Collection of all operations exposed by the webservice.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IWebServiceDef.ServiceName">
            <summary>
            Gets/Sets the service name.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IWebServiceDef.PortName">
            <summary>
            Gets/Sets the port name.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.IWebServiceDef.WsdlUri">
            <summary>
            Gets/Sets the service uri.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo">
            <summary>
            Database Connection repository endpoint override information..
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns> 
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo.GetOracleDatabaseConnection(System.String)">
            <summary>
            Gets the oracle database connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
            <remarks>In the EditorAttribute, the type name must be fully qualified.. 
            if we change the name of the class, this should also be changed</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.DatabaseOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.FileBasedXomlWorkflowDefOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.FileBasedXomlWorkflowDefOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.FileBasedXomlWorkflowDefOverrideInfo.XomlPath">
            <summary>
            Path to XOML
            </summary>
            <value>The XOML path.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.OverrideInfoSettings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.OverrideInfoSettings.UserSelectedDataProvider">
            <summary>
            Gets or sets the user selected data provider.
            </summary>
            <value>The user selected data provider.</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.SendMailServerOverrideInfo">
            <summary>
            Send mail server repository override endpoint information.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.SendMailServerOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.SendMailServerOverrideInfo.ServerAddress">
            <summary>
            Gets or sets the SMTP server address.
            </summary>
            <value>The SMTP server address.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.SendMailServerOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfoCollection">
            <summary>
            Represents a collection of methods exposed by a web service end point override information
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfoCollection.Add(InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo)">
            <summary>
            Adds a method definition to the collection
            </summary>
            <param name="webServiceMethodOverrideInfo">Specifies a method definition to add</param>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the method definition at the specified index
            </summary>
            <param name="index">The index to get or set</param>
            <returns>The method definition at the specified index</returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfoCollection.Item(System.String)">
            <summary>
            Gets or sets the method definition with the specified name
            </summary>
            <param name="operationName">The name of the method definition to get or set</param>
            <returns>The method definition with the specified name</returns>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo">
            <summary>
            Represents an individual web method override information.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo"/> class.
            </summary>
            <param name="name">Specifies the case-sensitive name of a web method (exposed by the parent web service).</param>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo.Name">
            <summary>
            Gets or sets the case-sensitive name of a web method (exposed by the parent web service)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceMethodOverrideInfo.X509Certificate">
            <summary>
             Gets or sets the path to an X509 certificate file to use for authenticating the method call
            </summary>
            <value>The X509 certificate.</value>
            <remarks> This property is only required if the parent service requires X509 authentication.</remarks>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo">
            <summary>
             Represents a web service end point override information.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.WebServiceUriOverride">
            <summary>
            Gets or sets an override for the actual web service URI
            </summary>
            <value>The service URI override.</value>
            <remarks>The URI of the service to call. If null, the URI specified in the rule application will be used.</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.WsdlUriOverride">
            <summary>
            Gets or sets the WSDL URI override.
            </summary>
            <value>The WSDL URI override.</value>
            <remarks>The URI of the WSDL to use. If null, the URI specified in the rule application will be used.</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.WsdlCertificationPathOverride">
            <summary>
            Gets or sets the WSDL certification path override.
            </summary>
            <value>The WSDL certification path override.</value>
            <remarks> path to cert to be used for wsdl retrieve only.</remarks>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.WebServiceMethodOperationsOverrideInfo">
            <summary>
            Gets or sets a collection of methods exposed by the web service
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.WebServiceOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.XmlDocumentOverrideInfo">
            <summary>
            Xml Document endpoint override information.Used to specify an override at runtime, using an alternate file path / uri path.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.XmlDocumentOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.XmlDocumentOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.XmlDocumentOverrideInfo.XmlPath">
            <summary>
            Path to xml (filepath or uri)
            </summary>
            <value>The XML path.</value>
        </member>
        <member name="T:InRule.Repository.EndPoints.Overrides.XmlSchemaOverrideInfo">
            <summary>
             Represents Xml Schema repository endpoint override information.
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.Overrides.XmlSchemaOverrideInfo.BuildEndPointDef(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Returns the override end point def.
            </summary>
            <param name="sourceEndPointDef">The source end point def.</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.XmlSchemaOverrideInfo.XsdPath">
            <summary>
            Gets or sets the  XSD path.
            </summary>
            <value>The XSD path.</value>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.XmlSchemaOverrideInfo.AllowGetXmlWithDupInstances">
            <summary>
            Allows hierarchical XML rendering of a duplicated XmlEntityState in a schema
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.Overrides.XmlSchemaOverrideInfo.EndPointType">
            <summary>
            Gets the endpointtype override enum.
            </summary>
            <value>The endpointtype override.</value>
        </member>
        <member name="F:InRule.Repository.EndPoints.RuleWriteInfo._enableRecursion">
            <summary> 
            indicates recursion on child
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.RuleWriteInfo.#ctor(System.String,InRule.Repository.EndPoints.RuleWriteTarget,InRule.Repository.EndPoints.RuleWriteInfoType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.EndPoints.RuleWriteInfo"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="target">The target.</param>
            <param name="infoType">Type of the info.</param>
            <param name="enableRecursion">Indicates whether the elementidentifer can be recursed. 
            This property recurses along the field's child objects/fields if present.</param>
        </member>
        <member name="P:InRule.Repository.EndPoints.RuleWriteInfo.RuleWriteEnableRecursion">
            <summary>
            Indicates whether the elementidentifer can be recursed. This property recurses along 
            the field's child objects/fields if present.
            </summary>
            <value>
            	<c>true</c> if [rule write enable recursion]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:InRule.Repository.EndPoints.SchemasRootDef">
            <summary>
            Authoring root folder for Schema EndPoints. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.SchemasRootDef.IsSchemaElement">
            <summary>
            Indicates this endpoint is an activated schema endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.SchemasRootDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Schemas'.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.SchemasRootDef.IsRootItem">
            <summary>
            : Indicates the def is a root-only placeholder for tree-navigation purposes.
            </summary>
        </member>
        <member name="P:InRule.Repository.EndPoints.SchemasRootDef.EndPoints">
            <summary>
            Gets a collection of all schema enpoints.
            </summary>
        </member>
        <member name="T:InRule.Repository.EndPoints.SendMailServerDef">
            <summary>
            Send mail server repository endpoint definition.
            </summary>
            <remarks>
            Also used to specify an override at runtime, using an alternate serverAddress
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.SendMailServerDef.#ctor">
            <overloads>
            Create a Send Mail Server endpoint or runtime endpoint override
            </overloads>
            <summary>
            Create a Send Mail Server endpoint with auto-assigned name
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.SendMailServerDef.#ctor(System.String,System.String)">
            <summary>
            Create a Send Mail Server endpoint or runtime endpoint override using the specified name and server address
            </summary>
            <param name="endPointName"></param>
            <param name="serverAddress"></param>
        </member>
        <member name="P:InRule.Repository.EndPoints.SendMailServerDef.ServerAddress">
            <summary>
            Send mail server address (hostname or numeric IP address)
            </summary>
        </member>
        <member name="T:InRule.Repository.WebServiceDef">
            <summary>
            Represents a web service end point definition.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef"/> class with the specified name.
            </summary>
            <param name="name">Specifies the name of the definition</param>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of a WebServiceDef object. Used for runtime overrides.
            </summary>
            <param name="name">The name of the EndPoint.</param>
            <param name="serviceUriOverride">The URI of the service to call. If null, the URI specified in the rule application will be used.</param>
            <param name="wsdlUri">The URI of the WSDL to use. If null, the URI specified in the rule application will be used.</param>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of a WebServiceDef object. Used for runtime overrides.
            </summary>
            <param name="name">The name of the EndPoint.</param>
            <param name="serviceUriOverride">The URI of the service to call. If null, the URI specified in the rule application will be used.</param>
            <param name="wsdlUri">The URI of the WSDL to use. If null, the URI specified in the rule application will be used.</param>
            <param name="x509Certificate">Optional path to cert to be used for wsdl retrieve only.</param>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.CheckForValidationErrors(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Gets a list of validation errors for this definition
            </summary>
            <returns>A list of validation errors for this definition</returns>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.X509Certificate">
            <summary>
            Gets or sets the path to an X509 certificate file to use solely for wsdl retrieval <seealso cref="P:InRule.Repository.WebServiceDef.OperationDef.X509Certificate"/> for per-method cert support).
            </summary>
            <remarks>
            This property is only required if the parent service requires X509 authentication.
            </remarks>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.TimeoutMs">
            <summary>
            Gets or sets the timeout interval in milliseconds of the WSDL retrieval.
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.Retry">
            <summary>
            Gets or sets the retry attempts of the WSDL retrieval if the timeout interval is exceeded.
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.SupportsOverrideString">
            <summary>
            Gets whether override strings are supported by this definition
            </summary>
            <remarks>This always returns true.</remarks>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.AuthoringElementTypeName">
            <summary>
            Gets the friendly name for this definition used by authoring tools
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.EndPointType">
            <summary>
            Gets the type of this end point
            </summary>
            <remarks>This always returns 'WebService'</remarks>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.EndPointDescription">
            <summary>
            Gets a description for this end point
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.ServiceName">
            <summary>
            Gets or sets the name of the web service
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.WsdlUri">
            <summary>
            Gets or sets the URI of the WSDL for this web service
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.PortName">
            <summary>
            Gets or sets the name of the port for this web service
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.WsdlUriOverride">
            <summary>
            Gets or sets an override for <see cref="P:InRule.Repository.WebServiceDef.WsdlUri"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.ServiceUriOverride">
            <summary>
            Gets or sets an override for the actual web service URI
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.Operations">
            <summary>
            Gets or sets a collection of methods exposed by the web service
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.UseEmbeddedWsdl">
            <summary>
            Gets or sets whether the WSDL and associated XML schemas are embedded in the <see cref="T:InRule.Repository.RuleApplicationDef"/> at authoring time.
            If embedded, the WSDL does not need to be retrieved from the <see cref="P:InRule.Repository.WebServiceDef.WsdlUri"/> at compile time.
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.EmbeddedWsdl">
            <summary>
            Gets or sets an array of <see cref="T:InRule.Common.Xml.Schema.Xsd.EmbeddedXmlSchema"/> instances representing the serialized WSDL embedded in the <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.Services">
            <summary>
            When the <see cref="T:InRule.Repository.ViewsAndControllers.WebServiceDefController"/> is used to import a list of services from the <see cref="P:InRule.Repository.WebServiceDef.WsdlUri"/>, this property will contain
            a collection of available <see cref="N:InRule.Repository.Service"/>s provided by the WSDL.
            Note: This collection is not persisted in the <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.ServicesDefCollection">
            <summary>
            Represents a collection of methods exposed by a web service end point
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.ServicesDefCollection.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:InRule.Repository.WebServiceDef.ServicesDefCollection"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.ServicesDefCollection.Add(InRule.Repository.WebServiceDef.ServicesDef)">
            <summary>
            Adds a method definition to the collection
            </summary>
            <param name="servicesDef">Specifies a method definition to add</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.ServicesDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the method definition at the specified index
            </summary>
            <param name="index">The index to get or set</param>
            <returns>The method definition at the specified index</returns>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.ServicesDefCollection.Item(System.String)">
            <summary>
            Gets or sets the method definition with the specified name
            </summary>
            <param name="serviceName">The name of the method definition to get or set</param>
            <returns>The method definition with the specified name</returns>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.PortDefCollection">
            <summary>
            Represents a collection of methods exposed by a web service end point
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.PortDefCollection.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:InRule.Repository.WebServiceDef.PortDefCollection"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.PortDefCollection.Add(InRule.Repository.WebServiceDef.PortDef)">
            <summary>
            Adds a method definition to the collection
            </summary>
            <param name="portDef">Specifies a method definition to add</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.PortDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the method definition at the specified index
            </summary>
            <param name="index">The index to get or set</param>
            <returns>The method definition at the specified index</returns>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.PortDefCollection.Item(System.String)">
            <summary>
            Gets or sets the method definition with the specified name
            </summary>
            <param name="portName">The name of the method definition to get or set</param>
            <returns>The method definition with the specified name</returns>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.OperationDefCollection">
            <summary>
            Represents a collection of methods exposed by a web service end point
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.OperationDefCollection.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDefCollection"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.OperationDefCollection.Add(InRule.Repository.WebServiceDef.OperationDef)">
            <summary>
            Adds a method definition to the collection
            </summary>
            <param name="operationDef">Specifies a method definition to add</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.OperationDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the method definition at the specified index
            </summary>
            <param name="index">The index to get or set</param>
            <returns>The method definition at the specified index</returns>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.OperationDefCollection.Item(System.String)">
            <summary>
            Gets or sets the method definition with the specified name
            </summary>
            <param name="operationName">The name of the method definition to get or set</param>
            <returns>The method definition with the specified name</returns>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.ServicesDef">
            <summary>
            Represents an individual web method definition.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.ServicesDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.ServicesDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class with the specified method name.
            </summary>
            <param name="name">Specifies the case-sensitive name of a web method (exposed by the parent web service)</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.ServicesDef.Name">
            <summary>
            Gets or sets the case-sensitive name of a web method (exposed by the parent web service)
            </summary>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.PortDef">
            <summary>
            Represents an individual web method definition.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.PortDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.PortDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class with the specified method name.
            </summary>
            <param name="name">Specifies the case-sensitive name of a web method (exposed by the parent web service)</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.PortDef.Name">
            <summary>
            Gets or sets the case-sensitive name of a web method (exposed by the parent web service)
            </summary>
        </member>
        <member name="T:InRule.Repository.WebServiceDef.OperationDef">
            <summary>
            Represents an individual web method definition.
            </summary>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.OperationDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.WebServiceDef.OperationDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WebServiceDef.OperationDef"/> class with the specified method name.
            </summary>
            <param name="name">Specifies the case-sensitive name of a web method (exposed by the parent web service)</param>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.OperationDef.Name">
            <summary>
            Gets or sets the case-sensitive name of a web method (exposed by the parent web service)
            </summary>
        </member>
        <member name="P:InRule.Repository.WebServiceDef.OperationDef.X509Certificate">
            <summary>
            Gets or sets the path to an X509 certificate file to use for authenticating the method call
            </summary>
            <remarks>
            This property is only required if the parent service requires X509 authentication.
            </remarks>
        </member>
        <member name="T:InRule.Repository.EndPoints.XmlDocumentPathDef">
            <summary>
            Xml Document endpoint definition.
            </summary>
            <remarks>
            Used to specify an override at runtime, using an alternate file path / uri path.
            </remarks>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlDocumentPathDef.#ctor">
            <overloads>
            Create an XML Document Path endpoint or runtime endpoint override
            </overloads>
            <summary>
            Create a XML Document Path endpoint with auto-assigned name
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.XmlDocumentPathDef.#ctor(System.String,System.String)">
            <summary>
            Create a XML Document Path  endpoint or runtime endpoint override using the specified name and xml path.
            </summary>
            <param name="endPointName"></param>
            <param name="xmlPath"></param>
        </member>
        <member name="P:InRule.Repository.EndPoints.XmlDocumentPathDef.XmlPath">
            <summary>
            Path to xml (filepath or uri)
            </summary>
        </member>
        <member name="T:InRule.Repository.EntityDef">
            <summary>
            Represents a Rule application Entity.
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsFields">
            <summary>
            Represents a type that contains fields.
            </summary>
        </member>
        <member name="M:InRule.Repository.IContainsFields.FindFields(System.String,System.Boolean)">
            <summary>
            Finds all <see cref="T:InRule.Repository.FieldDef"/>s in the implementor's Fields collection, as well those in its descendants.
            </summary>
            <param name="name">The name of the field(s) to find.</param>
            <param name="ignoreCase">Specify if search is case sensitive or not.</param>
            <returns>An array of fields matching the name specified by <paramref name="name"/>.</returns>
            <remarks>The name is case-sensitive.</remarks>
        </member>
        <member name="M:InRule.Repository.IContainsFields.GetAddressableFields">
            <summary>
            Gets the addressable fields for this entity or field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.IContainsFields.GetAddressableField(System.String,System.Boolean)">
            <summary>
            Gets the addressable field defition for a given name.
            </summary>
            <param name="fieldName">The name of the field the addresable definion is requested.</param>
            <param name="useNameCache">Specifies whether the name cache should be used to resolve the field.</param>
            <returns>The adddressable field definition.</returns>
        </member>
        <member name="M:InRule.Repository.IContainsFields.GetAllFields">
            <overloads>
            Get list of all fields(inactive/active).
            </overloads>
            <summary>
            Get list of all active(enabled) <see cref="T:InRule.Repository.FieldDef"/>s in this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.IContainsFields.GetAllFields(System.Boolean)">
            <summary>
            Get a list of all <see cref="T:InRule.Repository.FieldDef"/>s in this entity speciying if 
            inactive fields are to be included in the list.
            </summary>
            <param name="includeInActive"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.IContainsFields.Classifications">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.Classifications.ClassificationDefCollection"/> collection of classifications for this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.IContainsFields.DataTypeEntityName">
            <summary>
            Gets the data type name of this def.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IContainsRuleElements">
            <summary>
            Represents a type that contains RuleElements.
            </summary>
            <remarks>
            e.g. <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>s) as well as other rule elements
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.IContainsRuleElements.RuleElements">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.RuleElementDefCollection"/> of the def that contains rule elements.
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsMethods">
            <summary>
            IContainsMethods base interface (implemented by MethodDef, EntityDef et al.)
            </summary>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetRuleSets">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>s) authored in the context of this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetEntityScopeActions">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleActionDef"/> authored in the context of this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAddressableFields">
            <summary>
            Get the <see cref="T:InRule.Repository.FieldDefCollection"/> containing all addressable fields under this entity.
            </summary>
            <returns>Fields collection (0-length if no fields defined for entity)</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetRuleSet(System.String)">
            <summary>
            Get the <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>) given its relative path (dot-notation addressing).
            </summary>
            <param name="relativeRuleSetPath">Path of the RuleSet to retrieve.</param>
            <returns>The RuleSet found or null if not found.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetField(System.String)">
            <summary>
            Find a field given its relative path (dot-notation addressing).
            </summary>
            <param name="relName">dot-notation name from this entity context.</param>
            <returns>Null if not found, otherwise the field or entity. Returns entity def for entity fields or entity collection members.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetFieldOrEntity(System.String)">
            <summary>
            Find a field or entity given its relative path (dot-notation addressing). Works for collection formats like field1.collection1(2).field2, field1.collection1(3)
            </summary>
            <param name="relName">dot-notation name from this entity context.</param>
            <returns>Null if not found, otherwise the field or entity. Returns entity def for entity fields or entity collection members.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetSchemaSourceInfo">
            <summary>
            Returns 'Internal' is this entity is not bound to an external schema, else 'External:(external schema name)'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetReferencesOtherEntities(System.Boolean)">
            <summary>
            Determine if this entity has references to entity fields / collections of entity type other than this entity
            </summary>
            <param name="checkExtSchemaEntitiesOnly"></param>
            <returns>true if has at least one reference to another.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetIsReferencedByOtherEntities(System.Boolean)">
            <summary>
            Determine if this entity is referenced by fields / collections in other ruleapp entities.
            </summary>
            <param name="checkExtSchemaEntitiesOnly"></param>
            <returns>true if referenced elsewhere.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetFieldsThatReferenceThis">
            <overloads>
            Get a list of all fields from entities that reference this entity or 
            from a specified entity which references this entity.
            </overloads>
            <summary>
            Returns list of all <see cref="T:InRule.Repository.FieldDef"/>s from entities referencing this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetFieldsThatReferenceThis(InRule.Repository.EntityDef)">
            <summary>
            Returns list of all <see cref="T:InRule.Repository.FieldDef"/>s from the specified entity referencing this entity.
            </summary>
            <param name="fromEntity"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAllFields">
            <overloads>
            Get list of all fields(inactive/active) in this entity.
            </overloads>
            <summary>
            Get list of all active(enabled) <see cref="T:InRule.Repository.FieldDef"/>s in this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAllFields(System.Boolean)">
            <summary>
            Get a list of all <see cref="T:InRule.Repository.FieldDef"/>s in this entity speciying if 
            inactive fields are to be included in the list.
            </summary>
            <param name="includeInActive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.AssignImplicitCascade(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Cascades this entity as child of the specifed parent Entity, if not already specified.
            Raise the <see cref="E:InRule.Repository.EntityDef.ImplicitCascadeChanged"/> event on assignment.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.EntityDef.RemoveImplicitCascade(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Removes this entity from the <see cref="T:InRule.Repository.CascadedReferenceDefCollection"/> of the specified parent entity.
            Raise the <see cref="E:InRule.Repository.EntityDef.ImplicitCascadeChanged"/> event on remove.
            </summary>
            <param name="parentDef"></param>
        </member>
        <member name="M:InRule.Repository.EntityDef.ClearInferredImplicitCascades">
            <summary>
            For each field on this entity, clears implicit cascades associated with each field and its child fields recursively
            </summary>
        </member>
        <member name="M:InRule.Repository.EntityDef.CheckForCircularReference">
            <summary>
            Checks for infinite loops in implicit context cascades. If recursion exists then returns the entity at the top of the circular stack. Otherwise null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetImplicitParentEntity">
            <summary>
            Get the parent <see cref="T:InRule.Repository.EntityDef"/>  which has an implicit cascade on this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAllRuleSets(System.Boolean)">
            <summary>
            Returns an array of all rules sets for a given entity, and optionally any of its
            child fields.
            </summary>
            <param name="includeChildContexts"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAllRuleElements">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>(excluding Actions) for this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.EntityDef.GetAllRuleSets">
            <summary>
            Gets a list of all RuleSets contained in this def.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.EntityDef.BoundEntityTypeInfo">
            <summary>
            Get <see cref="T:InRule.Repository.EndPoints.AssemblyDef.ClassInfo"/> of .NET Assembly bound type if any. 
            Returns null if is not an assembly-bound entity, otherwise has .AssemblyName, .FullName and other properties of interest.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.HasActiveAutoRuleSets">
            <summary>
            Returns true if any <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> authored in the context of this entity is active(enabled) and
            has <see cref="F:InRule.Repository.RuleElements.RuleSetFireMode.Auto"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.RuleElements">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.RuleElementDefCollection"/> containing all rule 
            elements authored in context of this entity.
            </summary>
            <remarks>
            e.g. <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>s) as well as other rule elements
            </remarks>
        </member>
        <member name="P:InRule.Repository.EntityDef.RuleSetsRoot">
            <summary>
            Gets/Sets the logical representation of the owner of the collection of Rulesets. 
            The <see cref="P:InRule.Repository.RuleElements.RuleSetRootDef.RuleElements"/> property off of 
            <see cref="T:InRule.Repository.RuleElements.RuleSetRootDef"/> returns the same thing as the 
            <see cref="P:InRule.Repository.EntityDef.RuleElements"/> property on <see cref="T:InRule.Repository.EntityDef"/>
            which is the preferred way to access the RuleElements.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.Fields">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.FieldDefCollection"/> which contains all Fields authored under this entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.DataTypeEntityName">
            <summary>
            Gets the name of the entity as used by all other fields of this entity type.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.Methods">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.MethodDefCollection"/> containing all (.NET Static or Instance method) as defined in a .NET Assembly Schema or
            a Function Library Endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.Notifications">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NotificationDefCollection"/> containing all notifications authored in context of this entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.ExternalSchemaEntityDef">
            <summary>
            Gets the <see cref="T:InRule.Repository.EntityDefInfo"/> if this entity is bound to an external schema else
            null.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.ParentCollection">
            <summary>
            Gets the parent collection of entities to which this entity belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Entity'.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.Classifications">
            <summary>
            Gets/Sets list of classifications defined on this entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.DisplayName">
            <summary>
            Gets/Sets the name of the entity as displayed in irAuthor.
            On Set raises the <see cref="E:InRule.Repository.EntityDef.DisplayNameChanged"/> event.
            </summary>
        </member>
        <member name="E:InRule.Repository.EntityDef.DisplayNameChanged">
            <summary>
            Occurs after the display name has changed
            </summary>
        </member>
        <member name="E:InRule.Repository.EntityDef.ClassificationsChanged">
            <summary>
            Occurs when the reference to the child classifications collection is modified
            </summary>
        </member>
        <member name="E:InRule.Repository.EntityDef.ImplicitCascadeChanged">
            <summary>
            Occurs when the implicit parent cascade has changed
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.HasLanguageRules">
            <summary>
            Indicates if any <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/> are authored under this entity Rulesets.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.HasContextVersionSettings">
            <summary>
            Indicates if this entity has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDef.CascadedReferences">
            <summary>
            Collection of all <see cref="T:InRule.Repository.CascadedReferenceDef"/> for this entity.
            </summary>
        </member>
        <member name="T:InRule.Repository.EntityDefsInfo">
            <summary>
            Collection of EntityDefs plus meta information about them. Used by "ViewsAndControllers.AssemblyDefController.Import".
            </summary>
        </member>
        <member name="M:InRule.Repository.EntityDefsInfo.LastImportHasBeenSynced">
            <summary>
            Indicates whether most recent import has been synchronized to the schema at least once.
            </summary>
            <remarks>Note this does not guarantee the schema is in sync - the validation logic in "RuleApplicationDef.Validate" assures that.</remarks>
            <returns>True if the last import has been sync'd at least once.</returns>
        </member>
        <member name="M:InRule.Repository.EntityDefsInfo.ValidImportExists">
            <summary>
            Indicates whether there is a valid import to apply (at least one selected entity).
            </summary>
            <returns>True if valid.</returns>
        </member>
        <member name="P:InRule.Repository.EntityDefsInfo.XmlSchemaString">
            <summary>
            Xml Schema (XSD) string
            - stored for <see cref="T:InRule.Repository.EndPoints.DatabaseConnection"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefsInfo.LastImportDateTime">
            <summary>
            Timestamp when last schema import was performed.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefsInfo.LastSyncDateTime">
            <summary>
            Timestamp when last sync with schema was performed. 
            </summary>
            <remarks>On a set, sets <see cref="P:InRule.Repository.EntityDefsInfo.LastSyncImportDateTime"/> with <see cref="P:InRule.Repository.EntityDefsInfo.LastImportDateTime"/></remarks>
        </member>
        <member name="P:InRule.Repository.EntityDefsInfo.LastSyncImportDateTime">
            <summary>
            Timestamp of import last sync'd.
            </summary>
        </member>
        <member name="T:InRule.Repository.EntityDefInfo">
            <summary>
            Wrapper for EntityDef - includes mapped source names for entity, fields. Used by <see cref="T:InRule.Repository.EntityDefsInfo"/>
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsFieldDefInfos">
            <summary>
            Common interface for defs containing <see cref="T:InRule.Repository.FieldDefInfo"/>s.
            </summary>
        </member>
        <member name="F:InRule.Repository.EntityDefInfo._schemaSupportsCircularReferences">
            <summary>
            This is set internally whenever a fetch for ExternalSchemaEntityDef for the entity is done
            to avoid looping through ruleapp schemaendpoints
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefInfo.BoundEntityTypeInfo">
            <summary>
            Get <see cref="T:InRule.Repository.EndPoints.AssemblyDef.ClassInfo"/> of .NET Assembly bound type if any. Returns null if is not an assembly-bound entity, otherwise has .AssemblyName, .FullName and other properties of interest.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefInfo.ParentCollection">
            <summary>
            Gets the parent collection of entity infos to which this entity info belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefInfo.XsdElements">
            <summary>
            Global XSD Elements, if any, associated with this entity / type.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefInfo.MappedSourceEntityName">
            <summary>
            Mapped source entity name for this entity (the actual name in the source XSD / database / assembly).
            </summary>
        </member>
        <member name="T:InRule.Repository.EntityDefInfoCollection">
            <summary>
            Collection of EntityDef
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefInfoCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.EntityDefInfo"/> with the specified name.
            </summary>
        </member>
        <member name="M:InRule.Repository.RepositoryValidationErrors.RFR_GetVersionValidationErrors(InRule.Repository.RuleRepositoryDefBase,System.Collections.Generic.IEnumerable{InRule.Repository.RuleVersion})">
            <summary>
            Iterates the version collection and finds duplicate and invalid names
            </summary>
            <param name="defErrorOwner"></param>
            <param name="versions"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RepositoryValidationErrors.CreateCompileError(System.Guid,InRule.Repository.Infos.BuildErrorMessage)">
            <summary>
            Creates an error based soley on the guid and error message.  When ever possible try and make an error from the def
            </summary>
            <param name="sourceDefGuid"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RepositoryValidationErrors.GetAuthoringElementPathSafe(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Wraps the authroing element path property for 
            </summary>
            <param name="sourceDef"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RepositoryValidation.RemoveInvalidNameChars(System.String)">
            <summary>
            Removes leading numbers and any invalid chars
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryEnumCodeException">
            <summary>
            Rule Repository base exception. Includes <see cref="P:InRule.Repository.RuleRepositoryEnumCodeException.Code"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryException">
            <summary>
            Rule Repository base exception. 
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryErrorCode">
            <summary>
            Possible values for RuleRepositoryErrorCode (types of repository errors).
            </summary>
        </member>
        <member name="M:InRule.Repository.Expressions.ExpressionNode.BuildNodeExpression(System.Text.StringBuilder@,InRule.Repository.Expressions.CultureState@)">
            <summary>
            Highest perf overload (fewest allocations) of BuildNodeExpression which reuses existing string builder
            </summary>
        </member>
        <member name="M:InRule.Repository.Expressions.Expression.ToXml">
            <summary>
            FOR INFO PURPOSES ONLY - XML FORMAT SUBJECT TO CHANGE IN THE FUTURE. Pls use API or custom renderer for such purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Extensions.RuleRepositoryDefBaseExtensions.AsEnumerable(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Enumerates all items in a rule application def and its children.
            </summary>
            <param name="def">The def to enumerate.</param>
            <returns>A collection containing all of relevant items.</returns>
        </member>
        <member name="M:InRule.Repository.Extensions.RuleRepositoryDefBaseExtensions.AsEnumerable(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Enumerates all items in a rule application def and its children.
            </summary>
            <param name="def">The def to enumerate.</param>
            <param name="includeLanguageRuleBodies">Indicates that the rules in a language rule will be enumerated as well.</param>
            <returns>A collection containing all of relevant items.</returns>
        </member>
        <member name="T:InRule.Repository.FieldDef">
            <summary>
            Represents a schema Field definition.
            </summary>
        </member>
        <member name="T:InRule.Repository.IFieldOrParameterDef">
            <summary>
            Represents a type that implements the <see cref="T:InRule.Repository.IFieldOrParameterDef"/> and supports executable actions.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.Name">
            <summary>
            Gets name of the element.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.IsActive">
            <summary>
            Returns if the element is active.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.StateLocation">
            <summary>
            Gets the state location of the runtime value.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.CustomXmlNameIsAttribute">
            <summary>
            Gets the flag indicating if the custom xml name is stored in an attribute.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.DataType">
            <summary>
            Gets the datatype of the element.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.HasDefaultValue">
            <summary>
            Gets if the element's default value is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.IsAnEntityDataType">
            <summary>
            Gets if the element is an entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.DataTypeEntityName">
            <summary>
            Gets the data type for this entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.AuthoringElementPath">
            <summary>
            Gets the authoring path for this element.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.ThisRuleApp">
            <summary>
            Gets the rule application def containing this element.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.FieldDefType">
            <summary>
            Gets the type of a schema element.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.Fields">
            <summary>
            Gets the collection of the fields for this entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.IFieldOrParameterDef.IsCollection">
            <summary>
            Indicates if this element is a collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(InRule.Repository.FieldDefType)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the type.
            </summary>
            <param name="fieldDefType">Specifies the type of <see cref="T:InRule.Repository.FieldDef"/></param>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the name.
            </summary>
            <param name="name">Specifies a name for the field</param>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(System.String,InRule.Repository.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the name and data type.
            </summary>
            <param name="name">Specifies a name for the field</param>
            <param name="dataType">Specifies the data type for the field value</param>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(System.String,InRule.Repository.DataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the name and data type.
            </summary>
            <param name="name">Specifies a name for the field</param>
            <param name="dataType">Specifies the data type for the field value</param>
            <param name="dataTypeEntityName">Specifies the name of an <see cref="T:InRule.Repository.EntityDef"/> for reference fields</param>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the name and data type.
            </summary>
            <param name="name">Specifies a name for the field</param>
            <param name="formulaText">Specifies the formula for a calculated field</param>
        </member>
        <member name="M:InRule.Repository.FieldDef.#ctor(System.String,System.String,InRule.Repository.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.FieldDef"/> class specifying the name and data type.
            </summary>
            <param name="name">Specifies a name for the field</param>
            <param name="formulaText">Specifies the formula for a calculated field</param>
            <param name="dataType">Specifies the data type for the field value</param>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAllFields">
            <overloads>
            Get list of all fields(inactive/active) in this entity.
            </overloads>
            <summary>
            Get list of all active(enabled) <see cref="T:InRule.Repository.FieldDef"/>s in this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAllFields(System.Boolean)">
            <summary>
            Get a list of all <see cref="T:InRule.Repository.FieldDef"/>s in this entity speciying if 
            inactive fields are to be included in the list.
            </summary>
            <param name="includeInActive"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAddressableFields">
            <summary>
            Get the addressable fields if any under this field - sub-fields if complex, ref'd entity fields if entity field.
            </summary>
            <returns>Null if invalid entity ref; otherwise Fields collection (0-length if not valid for this type)</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetDataTypeListDisplayNames">
            <summary>
            Get possible values for <see cref="P:InRule.Repository.FieldDef.DataType"/> display list (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            (the displayed datatype or entityname)
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            (the underlying <see cref="P:InRule.Repository.FieldDef.DataType"/> or dummy value-keys Entity0, Entity1...).
            </returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetEntityListDisplayNames">
            <summary>
            Gets possible values for an <see cref="T:InRule.Repository.EntityDef"/> display list (e.g., combo box).
            </summary>
            <returns>
            <see cref="T:InRule.Repository.EntityDef"/>.Name in returned <see cref="T:System.Data.DataTable"/>
            </returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetEntityListDisplayNames(System.Boolean)">
            <summary>
            Gets possible values for an <see cref="T:InRule.Repository.EntityDef"/> display list (e.g., combo box).
            </summary>
            <param name="includeContainingEntity">Specifies whether to include the <see cref="T:InRule.Repository.EntityDef"/> to which this field belongs if any</param>
            <returns>
            <see cref="T:InRule.Repository.EntityDef"/>.Name in returned <see cref="T:System.Data.DataTable"/>
            </returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.FieldTypeMatchesWith(InRule.Repository.FieldDef)">
            <summary>
            Determines if the type of the specified field matches the type of this field
            </summary>
            <param name="def">Specifies the field to compare to this field</param>
            <returns>true if the type matches, false otherwise</returns>
            <overloads>Determines if the type of the specified field matches the type of this field</overloads>
        </member>
        <member name="M:InRule.Repository.FieldDef.FieldTypeMatchesWith(InRule.Repository.FieldDef,System.Boolean)">
            <summary>
            Determines if the type of the specified field matches the type of this field
            </summary>
            <param name="def">Specifies the field to compare to this field</param>
            <param name="requireEntityTypesToMatch">Specifies whether the entity name type must also match</param>
            <returns>true if the type matches, false otherwise</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.FieldTypeMatchesWith(InRule.Repository.FieldDef,System.Boolean,System.Boolean)">
            <summary>
            Determines if the type of the specified field matches the type of this field
            </summary>
            <param name="def">Specifies the field to compare to this field</param>
            <param name="requireEntityTypesToMatch">Specifies whether the entity name type must also match</param>
            <param name="requireDateTimeTypesToMatch">Specifies whether to distinguish between date/datetime types</param>
            <returns>true if the type matches, false otherwise</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid engine field name.
            </summary>
            <param name="candidateName"></param>
            <returns>Valid engine field name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetFields(InRule.Repository.StateLocation)">
            <summary>
            Gets a list of child fields of this field filtered by state location
            </summary>
            <param name="stateLocationFilter">Specifies the state location filter to use</param>
            <returns>A list of child fields of this field filtered by state location</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.FindFields(System.String)">
            <summary>
            Finds all child fields with the matching, case-sensitive name. 
            </summary>
            <param name="name">The name to find.</param>
            <returns>All child fields with the matching, case-sensitive name. </returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.FindFields(System.String,System.Boolean)">
            <summary>
            Finds all child fields with the matching name. 
            </summary>
            <param name="name">The name to find.</param>
            <param name="ignoreCase">Indicates whether case should be ignored.</param>
            <returns>All child fields with the matching name. </returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetChildCollection(System.Type)">
            <summary>
            Gets a child collection for this field containing items of the specified type if any exist
            </summary>
            <param name="collectionMemberType">Specifies the type of child items to get</param>
            <returns>A child collection for this field containing items of the specified type if any exist</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAllChildCollections">
            <summary>
            Gets an array of all child items of this field of all types
            </summary>
            <returns>An array of all child items of this field of all types</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetImplicitCascade">
            <summary>
            Gets an implicit cascade definition for this field if it is an entity reference AND one exists
            </summary>
            <returns>An implicit cascade definition for this field if it is an entity reference AND one exists</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.ClearInferredImplicitCascades">
            <summary>
            Clears implicit cascades associated with this field and its child fields recursively
            </summary>
        </member>
        <member name="M:InRule.Repository.FieldDef.CheckForCircularReference">
            <summary>
            Checks for infinite loops in explicit field cascades. If recursion exists then returns the field at the top of the circular stack. Otherwise null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.ContainsText(InRule.Repository.RuleTextSearchContext,System.String,System.Boolean)">
            <summary>
            Searches all searchable fields of item for specified text
            </summary>
            <param name="searchMode">types of content to search while looking for specified search text</param>
            <param name="searchText">text to search for</param>
            <param name="recurseIntoChildren">include children in search</param>
            <returns>true if text found.</returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAllRuleElements">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>(excluding Actions) for this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetAllRuleSets">
            <summary>
            Gets a list of all RuleSets contained in this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.FieldDef.GetRuleSet(System.String)">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>) contained in this def as specified by its name.
            </summary>
            <param name="ruleSetName">the name of the rule set to retrieve</param>
            <returns>the rule set found or null if not found</returns>
        </member>
        <member name="P:InRule.Repository.FieldDef.Methods">
            <summary>
            Gets or sets a collection of instance methods associated with a .NET object-bound field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.DataType">
            <summary>
            Gets or sets the data type of this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsAnEntityDataType">
            <summary>
            Gets whether this field is an <see cref="T:InRule.Repository.EntityDef"/> reference
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsDateOrDateTimeType">
            <summary>
            Gets whether this field is a date or date time data type
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsCollection">
            <summary>
            Gets or sets whether this field is a collection
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.DisplayDuringTesting">
            <summary>
            Gets or sets whether this field shows up in testing tools
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsComplexCollection">
            <summary>
            Gets whether this field is a collection of data type 'complex'
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.AutoApplyRelatedEntityRules">
            <summary>
            Gets or sets whether related entity rules should be automatically applied
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.FieldDefType">
            <summary>
            Gets or sets the type of this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.ReadOnly">
            <summary>
            Gets the read-only status of the field as goverened by the underlying state model.
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.RuntimeReadOnly">
            <summary>
            Gets or sets whether this field should be read-only at Runtime.
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.FixedLengthCollection">
            <summary>
            Gets or sets if this field will be fixed length if it is a collection type
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsValueTypeField">
            <summary>
            Gets whether this field is a primitive data type
            </summary>
            <remarks>
            Complex fields and Entity reference fields will return false.
            </remarks>
        </member>
        <member name="P:InRule.Repository.FieldDef.StateLocation">
            <summary>
            Gets or sets the state location where this field will be stored at runtime
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.CustomXmlName">
            <summary>
            Gets or sets a custom name for this field in XML
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.CustomXmlNameIsAttribute">
            <summary>
            Gets whether the custom name for this field in XML is an attribute
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.DataTypeEntityName">
            <summary>
            Gets or sets the name of the Entity to use if the field is an Entity reference
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.DefaultValue">
            <summary>
            Get or set default value for this field.
            </summary>
            <remarks>
            By default this is null, which means no default value (value.IsNull == true at runtime).
            If == <see cref="F:System.String.Empty"/>, the default value for the <see cref="P:InRule.Repository.FieldDef.DataType"/> will be used 
            (0, 0001-01-02, "" etc.).
            </remarks>
        </member>
        <member name="P:InRule.Repository.FieldDef.Calc">
            <summary>
            Gets or sets the calculation definition for calculated fields
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.Fields">
            <summary>
            Gets or sets a collection of child fields on this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.AllowConstraintsMessage">
            <summary>
            Gets or sets an 'allow' constraint message calculation on this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.AllowAssignmentFromLanguageRules">
            <summary>
            Gets or sets whether this field will be available to <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/> rules
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.Validations">
            <summary>
            Gets or sets a set of validations for this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.ValueList">
            <summary>
            Gets or sets the value list. The default is null.
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.ValueListReferenceChanged">
            <summary>
            Occurs after value list reference has changed to a different list reference
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.FieldDefTypeChanged">
            <summary>
            Fires when <see cref="P:InRule.Repository.FieldDef.FieldDefType"/> changes
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.AllowAssignmentFromLanguageRulesChanged">
            <summary>
            Fires when <see cref="P:InRule.Repository.FieldDef.AllowAssignmentFromLanguageRules"/> changes
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.ClassificationsChanged">
            <summary>
            Occurs when the reference to the child classifications collection is modified
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.Classifications">
            <summary>
            Gets or sets a set of classifications on this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.Constraints">
            <summary>
            Gets or sets a collection of constraints on this field
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.DisplayName">
            <summary>
            Gets or sets a friendly display name for this field
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.DataTypeChanged">
            <summary>
            Occurs after <see cref="P:InRule.Repository.FieldDef.DataType"/> has changed
            </summary>
        </member>
        <member name="E:InRule.Repository.FieldDef.DisplayNameChanged">
            <summary>
            Occurs after the <see cref="P:InRule.Repository.FieldDef.DisplayName"/> has changed
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.SupportsChildNodes">
            <summary>
            Gets whether this field supports child fields
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.IsTestableNode">
            <summary>
            Gets whether this field is testable
            </summary>
            <remarks>This always returns true for fields.</remarks>
        </member>
        <member name="P:InRule.Repository.FieldDef.ParentCollection">
            <summary>
            Gets the parent collection to which this field belongs if there is one
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.AuthoringElementTypeName">
            <summary>
            Gets the friendly name for the type of this field used by authoring tools
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.HasLanguageRules">
            <summary>
            Gets whether this field or any descendants hav child <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/>s
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.CascadedReferences">
            <summary>
            Gets or sets a collection of cascaded references
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDef.RuleElements">
            <summary>
            Gets child rules associated with this field context
            </summary>
            <remarks>
            e.g. <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>s) as well as other rule elements
            </remarks>
        </member>
        <member name="P:InRule.Repository.FieldDef.RuleSetsRoot">
            <summary>
            Gets the root of rule sets associated with this field context
            </summary>
        </member>
        <member name="T:InRule.Repository.FieldDefInfo">
            <summary>
            Wrapper for FieldDef - includes mapped source names for field names. Used by <see cref="T:InRule.Repository.EntityDefInfo"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.FieldDefInfo.SimpleTypeFullName">
            <summary>
            Indicates the full name of the simple type, if any.
            </summary>
            <remarks>
              For XSD, this is the simple type name if any.
              For .NET type, this is the enum type name if any.
            </remarks>
        </member>
        <member name="P:InRule.Repository.FieldDefInfo.MappedSourceFieldName">
            <summary>
            Mapped source field name for this field (the actual name in the source XSD / database / assembly).
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DataVersionInfo">
            <summary>
            Data version info is the base class for all instances of data elements which support versioning
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.IVersionableDataInfo.GetMatchingVersion(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Used by the runtime to obtain the correct version of a data element
            </summary>
            <param name="effectiveDate"></param>
            <param name="creationDate"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.InfoCollection`2.AddNew``1">
            <summary>
            Creates a new member info and assigns foreign key
            All add new calls funnel through here
            </summary>
            <typeparam name="TChildInfoType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.InfoCollection`2.AddNew">
            <summary>
            Creates a new member as the type of this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.VersionableDataInfo.Populate_VersionCriteria(InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.Infos.VersionableDataInfo,InRule.Repository.Infos.DataVersionInfo,InRule.Repository.RuleVersion)">
            <summary>
            Loads the settings from the version def into the data version info
            If versionDef is null, configures as the default version
            Sets the name of the version to the parent
            </summary>
            <param name="engine"></param>
            <param name="containingDataInfo"></param>
            <param name="versionInfo"></param>
            <param name="versionDef"></param>
        </member>
        <member name="M:InRule.Repository.Infos.VersionableDataInfo.InRule#Repository#Infos#IVersionableDataInfo#GetMatchingVersion(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Finds the matching version based on effective date and creation date if not null
            </summary>
            <param name="effectiveDate"></param>
            <param name="creationDate"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.VersionableDataInfo.GetBestMatchingVersion(InRule.Repository.Infos.DataVersionInfo,System.Collections.Generic.IEnumerable{InRule.Repository.Infos.DataVersionInfo},System.DateTime,System.DateTime)">
            <summary>
            Based on both effective date and creation date, returns the best matching version or default if no matching versions found
            </summary>
            <param name="defaultVersion"></param>
            <param name="versionList"></param>
            <param name="effectiveDate"></param>
            <param name="creationDate"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.VersionableDataInfo.GetBestMatchingVersion(InRule.Repository.Infos.DataVersionInfo,System.Collections.Generic.IEnumerable{InRule.Repository.Infos.DataVersionInfo},System.DateTime)">
            <summary>
            Based on the effective date, returns the best matching version or default if no matching versions found
            </summary>
            <param name="defaultVersion"></param>
            <param name="versionList"></param>
            <param name="effectiveDate"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.VersionableDataInfo.RequiresVersionDatesToResolve">
            <summary>
            Indicates that the data info has multiple versions and requires version dates in order to select the correct one
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SqlQueryInfo.ResultValueDataType">
            <summary>
            Only applies when the query request is a value, does not apply to returning rows or an execute call
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DatabaseTableVersionInfo">
            <summary>
            Holds the settings for a version of a database table
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.InlineTableVersionInfo">
            <summary>
            Holds the data for a specific version or default version of an inline table
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICollectionInfo.MemberDataType">
            <summary>
            The datatype of the items in this collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICollectionInfo.MapsToPrimitiveCollection">
            <summary>
            Flag which indicates that this collection was authored as a complex collection which maps to an underlying primitive type collection
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.IInitializeNewInfo">
            <summary>
            Infos coming out of the infostore require this interface in order to set their info id
            The initialize method called when they are first created
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.CollectionInfo.SupportsAddingMembersOfType(InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Returns true if this collection supports having members of the given type added to it
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.CollectionInfo.MemberDataType">
            <summary>
            The datatype of the items in this collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CollectionInfo.MapsToPrimitiveCollection">
            <summary>
            Flag which indicates that this collection was authored as a complex collection which maps to an underlying primitive type collection
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.TableInfo">
            <summary>
            Represents a table (either database or inline)
            - Actual values for the table are stored in the default version and versions collections
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.FunctionInfo._refreshExternalSourcePaths">
            <summary>
            Individual authored refresh value paths
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.FunctionInfo.TryMatchParameterNameAsExpressionPrefix(System.String,InRule.Repository.Infos.FunctionParameterInfo@,System.String@)">
            <summary>
            Helper function to match value refresh expressions that start with parameter names in the format of "ParmName." or "ParmName"
            If the expression is the parameter name exactly, return true with relative expression as null
            </summary>
            <param name="expression"></param>
            <param name="matchingParm"></param>
            <param name="relativeExpressionFromArg"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.FunctionInfo.AppendRefreshValueEvalsToExternalMethodEval(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.FunctionInfo,InRule.Repository.Infos.ContainerInfo,System.Action{InRule.Repository.Infos.EvalInfo})">
            <summary>
            Adds external value refresh eval infos for the function the the add member delegate passed in
            </summary>
            <param name="engine"></param>
            <param name="functionInfo"></param>
            <param name="currentContainer"></param>
            <param name="delegateForAddToRefreshList"></param>
        </member>
        <member name="P:InRule.Repository.Infos.FunctionInfo.RefreshAllExternalValues">
            <summary>
            Indicates that all bound state should be refreshed after method invocation
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.FunctionInfo.RefreshChildExternalValues">
            <summary>
            Indicates that the container of this method should have its child values refreshed after method invocation.  Only applies to instance methods.
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.InlineXmlDocumentVersionInfo">
            <summary>
            The class for InlineXmlDocumentInfo
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.LinkedXmlDocumentVersionInfo">
            <summary>
            The class for LinkedXmlDocumentInfo
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.XmlDocumentInfo">
            <summary>
            The class for XmlDocumentInfo
            </summary>
            <remarks>Repository implementation holds both, inline and linked in the same def and runtime has two separate info classes for each.</remarks>
        </member>
        <member name="P:InRule.Repository.Infos.ISourceDefInfo.TreeName">
            <summary>
            Name to display in authoring tree
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISourceDefInfo.IconName">
            <summary>
            Name of the icon to display in authoring tree
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISourceDefInfo.AuthoringElementTypeName">
            <summary>
            AuthoringElementTypeName
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISourceDefInfo.Attributes">
            <summary>
            Collection of attribute values specified by the author
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.SourceDefInfo._linkedInfos">
            <summary>
            Holds the list of infos which have registered this def as their source
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.SourceDefInfo._attributes">
            <summary>
            Collection of attribute values specified by the author
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.SourceDefInfo.GetLinkedInfo``1">
            <summary>
            Returns the first linked info of the requested type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.SourceDefInfo.TreeName">
            <summary>
            Name to display in authoring tree
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SourceDefInfo.IconName">
            <summary>
            Name of the icon to display in authoring tree
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SourceDefInfo.AuthoringElementTypeName">
            <summary>
            AuthoringElementTypeName
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.UserMessage">
            <summary>
            This is the message that should be displayed to the user
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.SourceDefAspect">
            <summary>
            This optional sub path under the def that the error is associated with.  For example, with a calculated field, the aspect would be Calculation
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.SourceDefPath">
            <summary>
            This optional additional information to use when there is no
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.AuthoringElementTypeName">
            <summary>
            optional, contains friendly name of source type
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.SystemExceptionData">
            <summary>
            This is an internal string for system level troubleshooting and not intended to be displayed to end user
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IBuildErrorInfo.AuthoringErrorCode">
            <summary>
            This is the internal error code used to derive the error message
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.UserMessage">
            <summary>
            This is the message that should be displayed to the user
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.SourceDefAspect">
            <summary>
            This optional sub path under the def that the error is associated with.  For example, with a calculated field, the aspect would be Calculation
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.SourceDefPath">
            <summary>
            This optional additional information to use when there is no
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.AuthoringElementTypeName">
            <summary>
            optional, contains friendly name of source type
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.SystemExceptionData">
            <summary>
            This is an internal string for system level troubleshooting and not intended to be displayed to end user
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.BuildErrorInfo.AuthoringErrorCode">
            <summary>
            This is the internal error code used to derive the error message
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContextContainerEvalInfo.ContextOwnerInfo">
            <summary>
            The context owner of this context container.  The ContextOwner field on this property is the key to the container on the child container
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContextContainerEvalInfo.ChildContainerEval">
            <summary>
            The child container the context container is for.  This container should have a collection of context containers, keyed by ContextOwner field
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ContextContainerEvalInfo">
            <summary>
            This eval is used to return the context container given an owner and a container.  The owner is a field info and can be either an entity field or entity collection.
            Once the target container is resolved it is the normal container referenced by the field.  Underneath it is a collection of context containers keyed by the owning field and the parent container.
            Invoice
                Invoice.FavoriteCustomer
                Context Containers
            
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContextContainerEvalInfo.ContextOwnerInfo">
            <summary>
            The context owner of this context container.  The ContextOwner field on this property is the key to the container on the child container
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContextContainerEvalInfo.ChildContainerEval">
            <summary>
            The child container the context container is for.  This container should have a collection of context containers, keyed by ContextOwner field
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ContextValueEvalInfo">
            <summary>
            Special derived class for context value calls
            Runtime uses as normal function eval info
            All uses of the function id ContextValueFunction are on this info 
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IDataContainerEvalInfo.SourceInfo">
            <summary>
            When the source container is strongly typed, this contains the source data info
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DataContainerEvalInfo">
            <summary>
            Eval info specifically for the get data element function
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DataContainerEvalInfo.SourceInfo">
            <summary>
            When the source container is strongly typed, this contains the source data info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IDictionaryCollectionAccessorEvalInfo.CreateIfNotFound">
            <summary>
            Indicates if the runtime should create the member or throw a not found error
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IDictionaryCollectionAccessorEvalInfo.MemberEvals">
            <summary>
            Evals to the members which are evaluated in the member context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IDictionaryCollectionAccessorEvalInfo.ValueEvals">
            <summary>
            Evals to the values compared to the respective member eval
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.DictionaryCollectionAccessorEvalInfo._memberEvals">
            <summary>
            Evals to the members which are evaluated in the member context
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.DictionaryCollectionAccessorEvalInfo._valueEvals">
            <summary>
            Evals to the values compared to the respective member eval
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DictionaryCollectionAccessorEvalInfo.CreateIfNotFound">
            <summary>
            Indicates if the runtime should create the member or throw a not found error
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExternalMethodEvalInfo.MethodContainerEval">
            <summary>
            For instance methods, returns the object that contains the method
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExternalMethodEvalInfo.ValueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExternalMethodEvalInfo._valueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExternalMethodEvalInfo.MethodContainerEval">
            <summary>
            For instance methods, returns the object that contains the method
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.TemplateFunctionEvalInfo.SourceTemplateInfo">
            <summary>
            The source template that rendered this function eval.  Used for mapping back usages
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.INamedEvalValuePairInfo.OrdinalIndex">
            <summary>
            when the name is not available, this holds the ordinal index from the source
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.NamedEvalValuePairInfo.OrdinalIndex">
            <summary>
            when the name is not available, this holds the ordinal index from the source
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IOuterContextFunctionEvalInfo.ExpectedOuterContainer">
            <summary>
            The container type this eval expects to get from the outer context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.OuterContextFunctionEvalInfo.ExpectedOuterContainer">
            <summary>
            The container type this eval expects to get from the outer context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IStackValueEvalInfo.ValueKey">
            <summary>
            The name of the object in the context objects store
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.StackValueEvalInfo">
            <summary>
            Eval info specifically to retrieve objects from the context by name.  
            Examples are the Tables and Rows from query results, current/calling context, and outer contexts resulting from aggregrate functions
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.StackValueEvalInfo.ValueKey">
            <summary>
            The name of the object in the context objects store
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IUdfFunctionEvalInfo.ValueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.UdfFunctionEvalInfo._valueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IAddCollectionMemberEvalInfo.NewMemberSource">
            <summary>
            Only used then adding a member as a reference.  When adding a new member of copying from an existing entity, this will be null which indicates that the member should be made by the collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IAddCollectionMemberEvalInfo.NewMemberActions">
            <summary>
            These actions execute in the member context of the new member
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IAddCollectionMemberEvalInfo.NewMemberStackKey">
            <summary>
            The key to use when putting the newly added member onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IAddCollectionMemberEvalInfo.EnsureAutoSeqRingIsComplete">
            <summary>
            Indicates to the runtime that the new member container (and context container if present) are walked through the auto ring after the new member has been added and member value assignments are completed
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.AddCollectionMemberEvalInfo">
            <summary>
            Add collection member eval info carries out the adding of a collection member
            If the source container eval info is not null, the result value should be added to the collection
            Otherwise, the collection.AddNew should be used to create the new member
            Once the member is added, the member context should be pushed into the value stack as NewMemberContextObjectKey
            Then the new members actions should be called
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.AddCollectionMemberEvalInfo._newMemberActions">
            <summary>
            These actions execute in the member context of the new member
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.AddCollectionMemberEvalInfo.NewMemberSource">
            <summary>
            Only used then adding a member as a reference.  When adding a new member of copying from an existing entity, this will be null which indicates that the member should be made by the collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.AddCollectionMemberEvalInfo.NewMemberStackKey">
            <summary>
            The key to use when putting the newly added member onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.AddCollectionMemberEvalInfo.EnsureAutoSeqRingIsComplete">
            <summary>
            Indicates to the runtime that the new member container (and context container if present) are walked through the auto ring after the new member has been added and member value assignments are completed
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICreateContainerEvalInfo.ContainerStateEval">
            <summary>
            Ignore if null, can be xml string, object, or XElement, follows behavior of create entity in SDK
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICreateContainerEvalInfo.FlagAsNewContainerOnDependencyScope">
            <summary>
            Flags container as new on Dependency Scope to prevent dependencies being collected against its child elements
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.CreateContainerEvalInfo">
            <summary>
            Creates and returns an instance of the container info with the state populated with the eval if present
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CreateContainerEvalInfo.ContainerStateEval">
            <summary>
            Ignore if null, can be xml string, object, or XElement, follows behavior of create entity in SDK
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CreateContainerEvalInfo.FlagAsNewContainerOnDependencyScope">
            <summary>
            Flags container as new on Dependency Scope to prevent dependencies being collected against its child elements
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteRuleSetEvalInfo.IndependentRulesetContainerInfo">
            <summary>
            When this is not null, the execute request is for an independent ruleset call.  An instance of this container should be created and the target ruleset eval info should be resolved off of that
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ExecuteRuleSetEvalInfo">
            <summary>
            Execute ruleset eval info carries out the execution of a ruleset.
            The result context of this eval is the ruleset that was executed
            The target ruleset and the argument evals are evaluated in the current context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRuleSetEvalInfo.IndependentRulesetContainerInfo">
            <summary>
            When this is not null, the execute request is for an independent ruleset call.  An instance of this container should be created and the target ruleset eval info should be resolved off of that
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IReadCollectionEvalInfo.SourceMemberStackKey">
            <summary>
            The key to use when putting each member onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IReadCollectionEvalInfo.SourceCollectionStackKey">
            <summary>
            The key to use when putting the collection being read onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ReadCollectionEvalInfo">
            <summary>
            For each member in the source collection matching the filter
            Puts member on stack as "SourceMember"
            Executes per member actions
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ReadCollectionEvalInfo.SourceMemberStackKey">
            <summary>
            The key to use when putting each member onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ReadCollectionEvalInfo.SourceCollectionStackKey">
            <summary>
            The key to use when putting the collection being read onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IReadObjectEvalInfo.ContextStackKey">
            <summary>
            The key to use when putting the object onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ReadObjectEvalInfo">
            <summary>
            Using the value resulting from the source object eval
            If the value is not null
                Puts the source object on the context stack under the key specified in the ContextObjectKey 
                Executes the ValueActions
            If the value is null
                executes the NullActions
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ReadObjectEvalInfo.ContextStackKey">
            <summary>
            The key to use when putting the object onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.SetValueEvalInfo">
            <summary>
            Works exactly like SetValueActionInfo, but as a nameless, stateless, EvalInfo
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.SortCollectionEvalInfo">
            <summary>
            Sorts the target collection by the sort expressions 
            Shifts to the collection member context to evaluate the sort criteria
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IUpdateCollectionEvalInfo.TargetCollectionStackKey">
            <summary>
            The key to use when putting the collection onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.UpdateCollectionEvalInfo">
            <summary>
            Takes the collection resulting from the target collection eval 
            and puts it on the stack as "TargetCollection"
            Executes actions - does not change context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.UpdateCollectionEvalInfo.TargetCollectionStackKey">
            <summary>
            The key to use when putting the collection onto the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IUsingStackValueEvalInfo.ContextStackKey">
            <summary>
            The key to use when putting the object onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.UsingStackValueEvalInfo">
            <summary>
            Takes the container resulting from the target container eval and puts it on the stack as "TargetContainer"
            Executes actions - does not change context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.UsingStackValueEvalInfo.ContextStackKey">
            <summary>
            The key to use when putting the object onto the context stack
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.TemplatedLogicInfo">
            <summary>
            Holds the template information for logic that has been generated from a rule template
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.TemplatedLogicInfo.SourceLogicTemplate">
            <summary>
            Holds the guid, name and full name of the source template for usage mapping.  The actual template is transformed on the load
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IAddCollectionMemberActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.AddCollectionMemberActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICheckConstraintsActionInfo.AllowConstraints">
            <summary>
            List of constraints to iterate.  If none are present, ignore.  If any are present, one or more must be true, otherwise add the not allowed message to the list.  The associated message with allow constraints is ignored
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICheckConstraintsActionInfo.DenyConstraints">
            <summary>
            If any of these are true, add their message to the comma seperated list
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICheckConstraintsActionInfo.NotAllowedValueMessageEval">
            <summary>
            Message to display if none of the allowed value constraints are true, add this message to the list
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.CheckConstraintsActionInfo._allowConstraints">
            <summary>
            List of constraints to iterate.  If none are present, ignore.  If any are present, one or more must be true, otherwise add the not allowed message to the list.  The associated message with allow constraints is ignored
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.CheckConstraintsActionInfo._denyConstraints">
            <summary>
            If any of these are true, add their message to the comma seperated list
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CheckConstraintsActionInfo.NotAllowedValueMessageEval">
            <summary>
            Message to display if none of the allowed value constraints are true, add this message to the list
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICopyCollectionActionInfo.CopyAction">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICopyCollectionActionInfo.TargetCollectionEval">
            <summary>
            Only need to evaluate this if there are sort expressions to process after the action executes
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.CopyCollectionActionInfo">
            <summary>
            Copy collection action copies a collection from one collection to another
            To execute, 
                the the action should be invoked from the current context
                after the action, if there are member sort expressions, they should be applied to the target collection
             </summary>
        </member>
        <member name="M:InRule.Repository.Infos.CopyCollectionActionInfo.BuildMemberFilterEvalInfo(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext)">
            <summary>
            Seperate call to build the member filter to act as a delegate that correctly captures error
            </summary>
            <param name="engine"></param>
            <param name="evalSchemaContext"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.CopyCollectionActionInfo.CopyAction">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CopyCollectionActionInfo.TargetCollectionEval">
            <summary>
            Only need to evaluate this if there are sort expressions to process after the action executes
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICopyEntityActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ICopyEntityActionInfo.TargetEvalInfo">
            <summary>
            Eval to the target field where the entity is being copied to.  Used by the runtime to ensure the container has been walked through auto ring after the value has been assigned
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CopyEntityActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.CopyEntityActionInfo.TargetEvalInfo">
            <summary>
            Eval to the target field where the entity is being copied to.  Used by the runtime to ensure the container has been walked through auto ring after the value has been assigned
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.VariableInfo.AssignDefaultWhenInitializingRuleset">
            <summary>
            Set by the loader to indicate that the default should be assigned in the ruleset init. For derived class ExclusiveRuleValue this is left false
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMemberRuleSetActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ExecuteMemberRuleSetActionInfo">
            <summary>
            Execute member ruleset action info calls the .Action eval info
            The action iterates the collection with a read collection
            and executes with an execute ruleset eval info 
             </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMemberRuleSetActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMemberRuleSetActionInfo.TargetRuleSetInfo">
            <summary>
            Reference is only used for debugging
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodActionInfo.FunctionInfo">
            <summary>
            Method to invoke.  Can be ExternalMethodInfo or UdfInfo
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodActionInfo.InstanceContainerEval">
            <summary>
            For instance methods, returns the object that contains the method
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodActionInfo.ValueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodActionInfo.EvalToResultTarget">
            <summary>
            Contains result target of the method assignment
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteMethodActionInfo._valueRefreshEvalInfos">
            <summary>
            Contains the post invocation value refresh eval infos.  Expects that the arguments have been put onto the context stack in a NamedValueRow using the key 'CurrentRow'
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteMethodActionInfo.TryResolveToExternalMethodInfo(InRule.Repository.Infos.Builders.BuildEngine,System.String,System.String,InRule.Repository.Infos.CLRTypeInfo[],InRule.Repository.Infos.ExternalMethodInfo@,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Attempts to resolve an external method by class and method name.  If the method is found, but arguments dont match, populates the reasonForFail with the reason
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteMethodActionInfo.TryResolveMethodFromListOfMatchingMethods(System.Collections.Generic.List{InRule.Repository.Infos.ExternalMethodInfo},System.String,InRule.Repository.Infos.CLRTypeInfo[],InRule.Repository.Infos.ExternalMethodInfo@,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Goes through a list of matching methods and if there is only 1, returns it, otherwise check to see if there is a perfect fit by parameter types
            </summary>
            <param name="methodInfos"></param>
            <param name="methodName"></param>
            <param name="fullParmTypeNames"></param>
            <param name="matchingMethodInfo"></param>
            <param name="foundButFailedReason"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteMethodActionInfo.TryResolveToExternalInstanceMethodInfo(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalInfo,System.String,InRule.Repository.Infos.CLRTypeInfo[],InRule.Repository.Infos.EvalInfo@,InRule.Repository.Infos.ExternalMethodInfo@,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Resolves a method based on an instance method call
            </summary>
            <param name="engine"></param>
            <param name="taskFrame"></param>
            <param name="localToContextEval"></param>
            <param name="methodName"></param>
            <param name="fullParmTypeNames"></param>
            <param name="evalToMethodContext"></param>
            <param name="matchingMethodInfo"></param>
            <param name="foundButFailedReason"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteMethodActionInfo.BuildEvalToAssignmentTargetElement(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Creates an assignment eval info and ensures that the target is a viable target
            </summary>
            <param name="engine"></param>
            <param name="taskFrame"></param>
            <param name="targetEval"></param>
            <param name="sourceValueType"></param>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodActionInfo.FunctionInfo">
            <summary>
            Method to invoke.  Can be ExternalMethodInfo or UdfInfo
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodActionInfo.InstanceContainerEval">
            <summary>
            For instance methods, returns the object that contains the method
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodActionInfo.TargetAssignmentExpression">
            <summary>
            Source expression to the assignment target
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodActionInfo.EvalToResultTarget">
            <summary>
            Contains result target of the method assignment
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodArgumentInfo.EvalToOutputValueTarget">
            <summary>
            If this is an output argument, contains an eval to target
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteMethodArgumentInfo.InputValueEval">
            <summary>
            Resolves the value to pass in for the parameter.  Will be null if output only
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodArgumentInfo.SourceArgumentCLRTypeInfo">
            <summary>
            Only used for looking up matching methods when there are overloads
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodArgumentInfo.EvalToOutputValueTarget">
            <summary>
            If this is an output argument, contains an eval to target
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteMethodArgumentInfo.InputValueEval">
            <summary>
            Resolves the value to pass in for the parameter.  Will be null if output only
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteQueryActionInfo.ResultMapping">
            <summary>
            Mapping of query result coming from the sql query
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ExecuteQueryActionInfo">
            <summary>
            Base class for ExecuteSqlQueryAction and ExecuteXPathQueryAction
            Handles all the common population of the results assignments for
            collections, complex, entity, and primitive
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteQueryActionInfo.ResultMapping">
            <summary>
            Mapping of query result coming from the sql query
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteQueryArgumentInfo.InputValueEval">
            <summary>
            Resolves the value to pass into the query.  Null if output only.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteQueryArgumentInfo.InputValueEval">
            <summary>
            Resolves the value to pass into the query.  Null if output only.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteRuleSetActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteRuleSetActionInfo.EnsureAssociateTargetRuleSetParameterInfos(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.IBuildErrorOwner,InRule.Repository.Infos.RuleSetInfo,System.Collections.Generic.IEnumerable{InRule.Repository.Infos.ExecuteRuleSetArgumentInfo})">
            <summary>
            Compares the list of specified arguments to the list of parameters specified on the ruleset.  Shared with Execute member ruleset action info
            </summary>
            <param name="targetInfo"></param>
            <param name="sourceArguments"></param>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRuleSetActionInfo.Action">
            <summary>
            The eval action info to execute to carry out the action
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExecuteRuleSetActionInfo.TargetRuleSetInfo">
            <summary>
            Reference is only used for debugging
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExecuteRuleSetActionInfo.ExecuteActionDefLoader.LoadArgumentSourceExpressions(System.Func{InRule.Repository.Infos.ExecuteRuleSetArgumentInfo},InRule.Repository.RuleElements.ExecuteActionParamDefCollection)">
            <summary>
            Loads the argument source expression and names.  Shared with ExecuteMemberRuleSetActionInfo
            </summary>
            <param name="addArgumentInfo"></param>
            <param name="argumentDefs"></param>
        </member>
        <member name="T:InRule.Repository.Infos.ExecuteRuleSetArgumentInfo">
            <summary>
            Holds the name / source expression pairs for an execute ruleset call
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteSqlQueryActionInfo.OutputMappings">
            <summary>
            Mapping of output parameters coming from the sql query
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteSqlQueryActionInfo._outputMappings">
            <summary>
            Mapping of output parameters coming from the sql query
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteWebServiceActionInfo.Arguments">
            <summary>
            Collection of the argument values for the operation
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteWebServiceActionInfo.ResultMappings">
            <summary>
            These contain the tree of internal evals to named values in the web service call results
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteWebServiceActionInfo.SoapInputHeaders">
            <summary>
            Collection of the SOAP input headers
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExecuteWebServiceActionInfo.SoapOutputHeaders">
            <summary>
            Collection of the SOAP output headers
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteWebServiceActionInfo._arguments">
            <summary>
            Collection of the argument values for the operation
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteWebServiceActionInfo._resultMappings">
            <summary>
            These contain the tree of internal evals to named values in the web service call results
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteWebServiceActionInfo._soapInputHeaders">
            <summary>
            Collection of the SOAP input headers
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.ExecuteWebServiceActionInfo._soapOutputHeaders">
            <summary>
            Collection of the SOAP output headers
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRemoveCollectionMemberActionInfo.RemoveMemberIndexEvalInfo">
            <summary>
            Runs in calling context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRemoveCollectionMemberActionInfo.RemoveMembersWhereEvalInfo">
            <summary>
            Runs in member context.  Not currently in use
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RemoveCollectionMemberActionInfo.RemoveMemberIndexEvalInfo">
            <summary>
            Runs in calling context
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RemoveCollectionMemberActionInfo.RemoveMembersWhereEvalInfo">
            <summary>
            Runs in member context.  Not currently in use
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RuleSetParameterInfo.SupportsAuthoredValueAssignment(InRule.Repository.Infos.ISchemaContext,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Checks that this variable supports assighment by authored expressions
            Note that this method identical to VariableInfo except for the error message
            </summary>
            <param name="fromCallingContext"></param>
            <param name="reasonForNotSupporting"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.ISetRulesetActivationActionInfo.TargetRulesetInfo">
            <summary>
            In cases where the activation is ruleset based, this is the ruleset info to activate, otherwise null
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISetRulesetActivationActionInfo.TargetRuleSetInstanceEvalInfo">
            <summary>
            In cases where the activation is instance based, this is the eval path to the target ruleset, otherwise null
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISetRulesetActivationActionInfo.SetActivationByInstance">
            <summary>
            Indicates whether the activation should be done with TargetRuleSetInfo or the eval to the ruleset instance
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SetRulesetActivationActionInfo.TargetRulesetInfo">
            <summary>
            In cases where the activation is ruleset based, this is the ruleset info to activate, otherwise null
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SetRulesetActivationActionInfo.TargetRuleSetInstanceEvalInfo">
            <summary>
            In cases where the activation is instance based, this is the eval path to the target ruleset, otherwise null
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SetRulesetActivationActionInfo.SetActivationByInstance">
            <summary>
            Indicates whether the activation should be done with TargetRuleSetInfo or the eval to the ruleset instance
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISetValueActionInfo.IsRuleValueAssignment">
            <summary>
            Added to indicate to the trace that this assignment is for the assignment of an exclusive rule's value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SetValueActionInfo.TargetSourceOverrideEval">
            <summary>
            When this is not null it is used instead of the target source expression
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SetValueActionInfo.IsRuleValueAssignment">
            <summary>
            Added to indicate to the trace that this assignment is for the assignment of an exclusive rule's value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExclusiveRuleConditionInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExclusiveRuleConditionInfo.ConditionIndex">
            <summary>
            The 0 based condition index under the parent exclusive rule
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExclusiveRuleConditionInfo.ExclusiveRule">
            <summary>
            Exclusive rule this condition is under
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExclusiveRuleConditionInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExclusiveRuleConditionInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Walks the logic tree and assigns incrementing sequence numbers
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleConditionInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleConditionInfo.ConditionIndex">
            <summary>
            The 0 based condition index under the parent exclusive rule
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleConditionInfo.ExclusiveRule">
            <summary>
            Exclusive rule this condition is under
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleConditionInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExclusiveRuleInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExclusiveRuleInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Walks the logic tree and assigns incrementing sequence numbers
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IExclusiveRuleOtherwiseInfo.ExclusiveRule">
            <summary>
            Exclusive rule this condition is under
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExclusiveRuleOtherwiseInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Walks the logic tree and assigns incrementing sequence numbers
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.ExclusiveRuleOtherwiseInfo.ExclusiveRule">
            <summary>
            Exclusive rule this condition is under
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.OptimizedExclusiveOtherwiseRulesInfo">
            <summary>
            Passthrough container holding the group of otherwise rules under an exclusive rule
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.PassthruLogicContainerInfo">
            <summary>
            Used in cases where a container is required for date overrides and passes all other settings directly from parent
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.PassthruLogicContainerInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            OverriddenVersionDateExpressions must have been loaded from VersionSelectionFormulasInfo.Loader.CheckCreateContextVersionDateSettings(engine, ruleSetDef, ruleSetDef);
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.PassthruLogicContainerInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.OptimizedExclusiveRuleInfo">
            <summary>
            Holds the exclusive rule settings for overrides and settings
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.OptimizedExclusiveRuleValueInfo.HasDefaultCondition">
            <summary>
            Returns true if there are actions or rules under the defaults
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IOptimizedRuleInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.OptimizedRuleInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.OptimizedRuleInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Walks the logic tree and assigns incrementing sequence numbers
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.OptimizedRuleInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.OptimizedRuleInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ISimpleRuleInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.SimpleRuleInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.SimpleRuleInfo.SetLogicIntraRingSequence(System.Int32)">
            <summary>
            Walks the logic tree and assigns incrementing sequence numbers
            </summary>
            <param name="nextSequence"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.SimpleRuleInfo.ConditionEval">
            <summary>
            Condition to evaluate for the rules value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.SimpleRuleInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.WhileRuleInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.WhileRuleInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ITransformedSourceDefInfo.ParentAssociatedSourceDefInfo">
            <summary>
            In cases where two transformed source rule are parent child, the parent transformed source rule goes here.  This happens frequently in the case where a language rule contains a decision table.  The language rule becomes the decision table, and the decision table subsqeuently becomes the exclusive rule.
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.TransformedSourceDefInfo">
            <summary>
            Base class for associated source rules.  For decision tables and language rules, which are transformed into somethign else
            This holds the source information and context data overrides
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.TransformedSourceDefInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.TransformedSourceDefInfo.ParentAssociatedSourceDefInfo">
            <summary>
            In cases where two transformed source rule are parent child, the parent transformed source rule goes here.  This happens frequently in the case where a language rule contains a decision table.  The language rule becomes the decision table, and the decision table subsqeuently becomes the exclusive rule.
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.LogicVersionSetInfo">
            <summary>
            Holds the template information for logic that has been generated from a rule template
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.LogicVersionSetInfo.InRule#Repository#Infos#ILogicalContainerInfo#GetRightHandElementId(InRule.Repository.Infos.ValueInfo)">
            <summary>
            Used in cases where a container is required for date overrides and passes all other settings directly from parent
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.LogicVersionSetInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            OverriddenVersionDateExpressions must have been loaded from VersionSelectionFormulasInfo.Loader.CheckCreateContextVersionDateSettings(engine, ruleSetDef, ruleSetDef);
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.LogicVersionSetInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.LogicVersionSetInfo.DefaultVersionName">
            <summary>
            The name of the default version rule element - "Default"
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleSetInfo.InitializeVariablesEvals">
            <summary>
            Holds the collection of set values for initializing variables default values
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleSetInfo.AuthoringElementPath">
            <summary>
            Authoring element path used in trace events related to this ruleset
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.RuleSetInfo._initializeVariablesEvals">
            <summary>
            Holds the collection of set values for initializing variables default values
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RuleSetInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleSetInfo.Vocabulary">
            <summary>
            Holds the function vocabulary templates that have been loaded
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleSetInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleSetInfo.AuthoringElementPath">
            <summary>
            Authoring element path used in trace events related to this ruleset
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.RuleApplicationInfoUniqueId">
            <summary>
            Unique guid for the rule application.  Actual infoId is an integer
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.DataInfos">
            <summary>
            Holds all data elements for rule app
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.ExternalAssemblies">
            <summary>
            Holds all schema and function library assemblies
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.VersionSelectionFormulas">
            <summary>
            When the effective/created dates are in use, their expressions are stored here.  The value is usually 'Today()', but it can also be a field name or other expression which is to be resolved from the context in which the versioning request comes from
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.Errors">
            <summary>
            Contains the list of build errors for this rule application
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.Warnings">
            <summary>
            Contains the list of build warnings for this rule application
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRuleApplicationInfo.RuntimeErrorHandlingPolicy">
            <summary>
            Sets the policy the rule engine will use when it encounters a runtime error.
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.RuleApplicationInfo._dataInfos">
            <summary>
            Holds all data elements for rule app
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.RuleApplicationInfo._externalAssemblies">
            <summary>
            Holds all schema and function library assemblies
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.RuleApplicationInfo._errors">
            <summary>
            Contains the list of build errors for this rule application
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.RuleApplicationInfo._warnings">
            <summary>
            Contains the list of build warnings for this rule application
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RuleApplicationInfo.CreateSourceDefInfo(System.Guid)">
            <summary>
            Creates a source def info, sets the def guid, and adds to source def lookup
            </summary>
            <param name="defGuid"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.RuleApplicationInfo.TryResolveToRulesetInfoByAbsolutePattern(System.String,InRule.Repository.Infos.RuleSetInfo@)">
            <summary>
            Given an absolute path to a ruleset: Ex Entity1.ComplexField1.RuleSet1, returns the first matching ruleset
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RuleApplicationInfo.GetPossibleRulesetContainersFromPathSteps(InRule.Repository.Infos.ContainerInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Iterates the steps in the dot path and returns all possible resolutions of the tail step
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RuleApplicationInfo.GetNextUniqueValueName(System.String)">
            <summary>
             Generates a thread safe rule application unique name for a partial value
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleApplicationInfo.RuleApplicationInfoUniqueId">
            <summary>
            Unique guid for the rule application.  Actual infoId is an integer
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleApplicationInfo.VersionSelectionFormulas">
            <summary>
            When the effective/created dates are in use, their expressions are stored here.  The value is usually 'Today()', but it can also be a field name or other expression which is to be resolved from the context in which the versioning request comes from
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleApplicationInfo.Vocabulary">
            <summary>
            Holds the function vocabularly templates that have been loaded
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleApplicationInfo.RuntimeErrorHandlingPolicy">
            <summary>
            Sets the policy the rule engine will use when it encounters a runtime error.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RuleApplicationInfo.RuleApplicationInfoDebug.ErrorsDebugTable">
            <summary>
            Formatted table of build errors
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IFieldInfo.DefaultValueContainerLiteral">
            <summary>
            Only used for the on-demand creation of Default Value on Entity Fields
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IFieldInfo.ContextContainerInfo">
            <summary>
            Reference to the context container that connects the parent of this field to its assigned member
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IFieldInfo.OnCollectionMemberAdded">
            <summary>
            State event actions to execute if the data type of this field is array and a member is added to the array.  Runs in the context of CurrentContainer and puts the 'NewMember' on the context stack
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IClassificationInfo.ClassificationOwnerInfoId">
            <summary>
            Holds the info id of either the container or the field info that this is a classification for.  Used in container values collection for retrieving child classifications
            </summary>
        </member>
        <member name="F:InRule.Repository.Infos.FieldInfo._onCollectionMemberAdded">
            <summary>
            State event actions to execute if the data type of this field is array and a member is added to the array.  Runs in the context of CurrentContainer and puts the 'NewMember' on the context stack
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.FieldInfo.SupportsAuthoredValueAssignment(InRule.Repository.Infos.ISchemaContext,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Checks that this field supports assighment by authored expressions
            </summary>
            <param name="fromCallingContext"></param>
            <param name="reasonForNotSupporting"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.FieldInfo.DefaultValueContainerLiteral">
            <summary>
            Only used for the on-demand creation of Default Value on Entity Fields
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.FieldInfo.DefaultValueEvalInfo">
            <summary>
            Only used for the GetDefault() function
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.FieldInfo.ImplicitNameResolutionPriority">
            <summary>
            Lower priority numbers come up sooner in the list
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.FieldInfo.ContextContainerInfo">
            <summary>
            Reference to the context container that connects the parent of this field to its assigned member
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ClassificationInfo.ClassificationOwnerInfoId">
            <summary>
            Holds the info id of either the container or the field info that this is a classification for.  Used in container values collection for retrieving child classifications
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContainerInfo.ParentContainerFieldInfo">
            <summary>
            The implicit parent container field is a local field on this container.  It should be automatically set if the field or collection on the parent .AutoCascadeImplicitParentContext = true
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContainerInfo.AnchoredParentCollectionField">
            <summary>
            The implicit parent collection field is on the parent container, not a local field on this container.  To get parent collection, need to get the parent container, and then get the collection off of that.  There can be multiple references to this container on the parent, this one is the one to use when resolving implicit IndexOf requests
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContainerInfo.AnchoredParentFields">
            <summary>
            These hold the list of places on the parent that anchor the container to its parent context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContainerInfo.IsMappedPrimitiveCollectionMember">
            <summary>
            Flag which indicates that this container is a member in a complex collection which maps to an underlying primitive type collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContainerInfo.CanHaveCircularReference">
            <summary>
            Indicates if a descendent of this container can contain a reference back to this container.  Parent context references do not count as a circular reference
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.ContainerInfoValuesCollection">
            <summary>
            Holds the collection of values that hang off a container.  Values contains both logic and schema elements
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfoValuesCollection.GetChildLogicFor(InRule.Repository.Infos.ILogicalContainerInfo,System.String)">
            <summary>
            Returns the logic infos under the logical container matching the logic group key
            If the logic group key is null, returns all under the container
            </summary>
            <param name="logicContainerInfo"></param>
            <param name="logicalGroupKey"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfoValuesCollection.AddMemberToCachedChildLogicByContainerList(InRule.Repository.Infos.ValueInfo)">
            <summary>
            Adds a member to the local list of logic children keyed by parent container
            This is 100% dependent that the only place LogicalParentContainerInfoId gets set is in here
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfoValuesCollection.AddNew``1(InRule.Repository.Infos.ILogicalContainerInfo,System.String)">
            <summary>
            Add a new child with a logical parent that is different than the container that holds it
            </summary>
            <typeparam name="TChildInfoType"></typeparam>
            <param name="logicalParentContainer"></param>
            <param name="logicalGroupKey"></param>
            <returns></returns>
        </member>
        <member name="F:InRule.Repository.Infos.ContainerInfo._anchoredParentFields">
            <summary>
            These hold the list of places on the parent that anchor the container to its parent context.
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfo.GetVersionSelectionFormulas(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Returns the active version date expressions to be used for resolving which version to use
            If the values are specified here, the local value is used
            If the parent container is specified, the values there are used
            Otherwise, the values on the rule application info are used
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfo.GetResolvableLocalNames(System.String)">
            <summary>
            Returns fields and rulests matching the given name
            If the matching name is null, returns all
            </summary>
            <param name="matchingName"></param>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfo.GetItemsToAgenda(System.Int32)">
            <summary>
            Returns the list of items to put on the agenda
            Currently only returns items when using autorules
            </summary>
            <param name="forRingNumber"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.ContainerInfo.GetItemsToExecute(System.Int32)">
            <summary>
            Returns local items in the desired ring and local container fields which have logic in the ring
            </summary>
            <param name="forRingNumber"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.IsReferencedByOtherEntities">
            <summary>
            Flag which indicates that this entity has references from other entities
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.ParentContainerFieldInfo">
            <summary>
            The implicit parent container field is a local field on this container.  It should be automatically set if the field or collection on the parent .AutoCascadeImplicitParentContext = true
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.AnchoredParentCollectionField">
            <summary>
            The implicit parent collection field is on the parent container, not a local field on this container.  To get parent collection, need to get the parent container, and then get the collection off of that.  There can be multiple references to this container on the parent, this one is the one to use when resolving implicit IndexOf requests
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.OverriddenVersionDateExpressions">
            <summary>
            When the effective/created dates have been overridden for a specific entity, the override expressions are stored here.  If null, the effective/created dates should be taken from the parent context info, otherwise, they should come from the rule app info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.Vocabulary">
            <summary>
            Holds the function vocabularly templates that have been loaded
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.IsMappedPrimitiveCollectionMember">
            <summary>
            Flag which indicates that this container is a member in a complex collection which maps to an underlying primitive type collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.CanHaveCircularReference">
            <summary>
            Indicates if a descendent of this container can contain a reference back to this container.  Parent context references do not count as a circular reference
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContainerInfo.InRule#Repository#Infos#IExecutableInfo#ShowInExecutionLog">
            <summary>
            Only authored entities should show up in the execution log
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContextContainerInfo.ContextChildContainerFieldInfo">
            <summary>
            Implicit field set by cascade relating to the child of the context join.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContextContainerInfo.ContextParentContainerFieldInfo">
            <summary>
            Implicit field set by cascade relating to the parent of the context join.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IContextContainerInfo.ContextOwner">
            <summary>
            Holds the field used a the key to this context from the parent
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContextContainerInfo.ContextChildContainerFieldInfo">
            <summary>
            Implicit field set by cascade relating to the child of the context join.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContextContainerInfo.ContextParentContainerFieldInfo">
            <summary>
            Implicit field set by cascade relating to the parent of the context join.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ContextContainerInfo.ContextOwner">
            <summary>
            Holds the field used a the key to this context from the parent
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IVersionSelectionFormulasInfo.EffectiveDateExpression">
            <summary>
            Holds the source expression for current date to be compared the effective date of a specific version from a versioned element
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IVersionSelectionFormulasInfo.CreatedDateExpression">
            <summary>
            Holds the source expression for current date to be compared the created date of a specific version from a versioned element
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.VersionSelectionFormulasInfo.EffectiveDateExpression">
            <summary>
            Holds the source expression for current date to be compared the effective date of a specific version from a versioned element
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.VersionSelectionFormulasInfo.CreatedDateExpression">
            <summary>
            Holds the source expression for current date to be compared the created date of a specific version from a versioned element
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.VersionSelectionFormulasInfo.UseEffectiveDate">
            <summary>
            Indicates that the effective date is in use
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.VersionSelectionFormulasInfo.UseCreatedDate">
            <summary>
            Indicates that the created date is in use
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.VersionSelectionFormulasInfo.VersionDefLoader.CheckCreateContextVersionDateSettings(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.IContainsContextVersionSettings)">
            <summary>
            If the context version settings are specified, creates an instance of the version selection formulas and return
            Returns null if errors occur
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExternalAssemblyInfo.TryGetClassByAlias(System.String,InRule.Repository.Infos.ExternalClassInfo@)">
            <summary>
            Returns a matching external class on this assembly by Alias
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExternalAssemblyInfo.TryGetClassByTypeFullName(System.String,InRule.Repository.Infos.ExternalClassInfo@)">
            <summary>
            Returns a matching external class on this assembly by Type FullName
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.ExternalMethodInfo.IsPerfectMatchForClrArguments(InRule.Repository.Infos.CLRTypeInfo[])">
            <summary>
            Returns true if the clr types defined for the method perfectly match the argument type names specified in the array
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRefreshExternalValueEvalInfo.RefreshTargetEvalInfo">
            <summary>
            Eval info to target value to refresh.  Can be primitive, container, or collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRefreshExternalValueEvalInfo.RefreshTargetRecursivly">
            <summary>
            Indicates that non primitive target types should also have their child values refreshed recursivly
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRefreshExternalValueEvalInfo.SwitchContextToArgument">
            <summary>
            Indicates that the context should be switched to this argument prior to evaluating the refresh info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IRefreshExternalValueEvalInfo.SwitchContextToArgumentIndex">
            <summary>
            The index of the argument to switch the context to.  Will always by a container argument
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RefreshExternalValueEvalInfo.ValuePath">
            <summary>
            Source path defined by author
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RefreshExternalValueEvalInfo.RefreshTargetEvalInfo">
            <summary>
            Eval info to target value to refresh.  Can be primitive, container, or collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RefreshExternalValueEvalInfo.RefreshTargetRecursivly">
            <summary>
            Indicates that non primitive target types should also have their child values refreshed recursivly
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RefreshExternalValueEvalInfo.SwitchContextToArgument">
            <summary>
            Indicates that the context should be switched to this argument prior to evaluating the refresh info
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RefreshExternalValueEvalInfo.SwitchContextToArgumentIndex">
            <summary>
            The index of the argument to switch the context to.  Will always by a container argument
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IValueMappingInfo.ExternalValueName">
            <summary>
            The name of the field on the external object.  Null/Blank indicates that the result object direct
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IValueMappingInfo.AppendToExistingCollection">
            <summary>
            Only applies when the target internal value is a collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.IValueMappingInfo.IgnoreChildMappings">
            <summary>
            Flag indicating that the children of this mapping should be ignored.  Created to compensate for a loading issue with primitive assignments by name, where the name was stored on the first child mapping
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueMappingInfo.ExternalValueName">
            <summary>
            The name of the field on the external object.  Null/Blank indicates that the result object direct
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueMappingInfo.InternalValueExpression">
            <summary>
            The name of the inrule field specified by the author
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueMappingInfo.AppendToExistingCollection">
            <summary>
            Only applies when the target internal value is a collection
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ValueMappingInfo.IgnoreChildMappings">
            <summary>
            Flag indicating that the children of this mapping should be ignored.  Created to compensate for a loading issue with primitive assignments by name, where the name was stored on the first child mapping
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RenderAspectsStub.ClassAspectData.Properties">
            <summary>
            Returns an enumeration of aspects that are property aspects
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RenderAspectsStub.ClassAspectData.EntityConfiguration">
            <summary>
            Returns the instance of the entityConfiguration aspect if it exists
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RenderAspectsStub.ClassAspectData.TableName">
            <summary>
            Returns the table name from the entity configuration aspect
            If the class is derived, it returns the table name from the base class
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.RenderAspectsStub.ClassAspectData.EFConfigCode">
            <summary>
            Returns the code for the ef configuration
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.RenderAspectsStub.AspectParser.IsLineCommentedOut(System.String,System.Int32)">
            <summary>
            Walks backwards to see if there is a commenting token before the aspect on the same line
            </summary>
            <param name="sourceBlock"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Infos.Aspect_IRequiresInfoProviderAttribute">
            <summary>
            Adds reference and implements the IRequiresInfoProvider interface
            Adds property for _infoProvider
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Aspect_PropertyAttribute.AssignForeignKeyAction">
            <summary>
            Lambda action to run against infos added using NewInfo on this collection
            parentInfo is the name for the containing object
            Example: AssignForeignKeyAction = "info=>info.RuleApplicationInfo = parentInfo.RuleApplicationInfo")]
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.Builders._IsInFieldValueListFunctionBuilder">
            <summary>
            Supports the internal function
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.GetDefaultFunctionBuilder.BuildEvalToGetDefault(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Returns the default value eval setup for the field
            Because defaults are only literals or create containers, context does not matter here
            If we ever support expressions for default value, then context could play a role in getting this correct
            </summary>
            <param name="engine"></param>
            <param name="evalToTarget"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.GetIndexFunctionBuilder.Try_BuildEvalToMemberIndex_FromContainer(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.ContainerInfo,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Using the current context of the container, try to resolve member index
            </summary>
            <param name="engine"></param>
            <param name="fromContainerInfo"></param>
            <param name="evalToMemberIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.GetIndexFunctionBuilder.Try_BuildEvalToMemberIndexThroughContainerField(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.FieldInfo,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Tries to resolve member index using the field's value, if found, returns an eval which includes getting the value of the field
            </summary>
            <param name="engine"></param>
            <param name="containerFieldInfo"></param>
            <param name="evalToMemberIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.FunctionBuilderArgUtility.VerifyCanCastToBool(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Ensures that the result of the evalinfo can be cast to a boolean value
            </summary>
            <param name="engine"></param>
            <param name="evalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.CheckForCircularCalculations(InRule.Repository.Infos.Builders.BuildEngine)">
            <summary>
            Checks the calculated fields of an application for circular references
            </summary>
            <param name="engine"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.GenerateCircularCalculationMessageText(InRule.Repository.Infos.FieldInfo,System.Collections.Generic.Stack{InRule.Repository.Infos.FieldInfo})">
            <summary>
            Builds the recursive message text example: A -> B -> C -> A
            The stack does not necessarly begin with the field that has the recursion
            </summary>
            <param name="fieldInfo"></param>
            <param name="stack"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildRuleApplication(InRule.Repository.Infos.IRuleAppInfoProvider,InRule.Repository.RuleApplicationDef)">
            <summary>
            Builds the ruleappinfo on the provider
            Does not throw, all errors are captured in RuleAppInfo
            </summary>
            <param name="provider"></param>
            <param name="ruleAppDef"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.GetBestSourcePathForError(InRule.Repository.Infos.Builders.IBuildErrorOwner)">
            <summary>
            Tries to get the full name from the source info, if not found, uses the full name from the info
            </summary>
            <param name="onInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.CheckVersionSelectionFormulasForErrors(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Infos.Builders.IBuildErrorOwner,InRule.Repository.Infos.VersionSelectionFormulasInfo)">
            <summary>
            Ensures that the version selection expression build correctly
            If they are wrong and being used, it can mislead authors because the errors show up as part of the consuming expression
            </summary>
            <param name="taskFrame"></param>
            <param name="schemaContext"></param>
            <param name="owningInfo"></param>
            <param name="versionFormulas"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.ReplaceTailValueEvalInfo(InRule.Repository.Infos.CheckedEvalToValueInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Replaces the tail value info with the evalInfo passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToIsInvalidFieldAndEnsureIsInvalidFieldInfo(InRule.Repository.Infos.EvalInfo)">
            <summary>
            Returns an eval info for the validity aspect of the target eval - this is used only when writing the validity.
            Seperate functions are used for reading the validity
            </summary>
            <param name="evalToTarget"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalForSetValue(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo,System.Boolean)">
            <summary>
            Ensures that the types are compatable and returns an evalInfo for set value
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsureEvalTypesSupportEqualityComparison(System.Collections.Generic.IEnumerable{InRule.Repository.Infos.EvalInfo})">
            <summary>
             Successivly checkes each eval in the list against it's sibling to the right
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsureEvalTypesSupportEqualityComparison(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Checks the result data types to ensure that they can be compared at runtime
            </summary>
            <param name="leftInfo"></param>
            <param name="rightInfo"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsureEvalTypesSupportScalarComparison(System.Collections.Generic.IEnumerable{InRule.Repository.Infos.EvalInfo})">
            <summary>
             Successivly checkes each eval in the list against it's sibling to the right
            </summary>
            <param name="evalInfos"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsureEvalTypesSupportScalarComparison(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Checks the result data types to ensure that they can be compared with a greater than or lessthan at runtime
            </summary>
            <param name="leftInfo"></param>
            <param name="rightInfo"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsureEvalTypesForSetValue(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Checks the compatability of the target and source and appends inner container fields as necessary
            </summary>
            <param name="targetEvalInfo"></param>
            <param name="sourceEvalInfo"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToExecuteRuleSet(InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates an eval to execute either a contained ruleset or independent ruleset
            </summary>
            <param name="targetRuleSetEvalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToAddCollectionMemberAction(InRule.Repository.Infos.CheckedEvalToCollection,InRule.Repository.Infos.EvalInfo,System.String)">
            <summary>
            Creates an eval action to add a member to the target collection
            If the sourceContainerEvalInfo is not null, it is specified as the value to add
            The caller of this function must ensure
            - The target is a collection
            - the source container can be added to the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToCopyCollection(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Infos.CheckedEvalToComplexOrEntityCollection,InRule.Repository.Infos.CheckedEvalToComplexOrEntityCollection,System.Boolean,System.Boolean,System.Func{InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Infos.EvalInfo})">
            <summary>
            Supports copying complex or entity collections
                Both source and target must be collections
                Both source and target must be complex or entity collections
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToUpdateCollectionAction(InRule.Repository.Infos.CheckedEvalToCollection,System.Boolean,System.String)">
            <summary>
            targetCollection must be a collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToGetContainerElement(InRule.Repository.Infos.CheckedEvalToContainer)">
            <summary>
            Creates an function eval to return the element reference of the container argument
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToUpdateContainerAction(InRule.Repository.Infos.CheckedEvalToContainer,System.String)">
            <summary>
            Builds an eval to update container eval info
            Puts on stack as ObjectKeys.TargetContainer
            </summary>
            <param name="checkedTargetContainer"></param>
            <param name="targetContainerStackKey"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.TryGetAssignableLocalTargetFieldByName(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.ContainerInfo,System.String,InRule.Repository.Infos.EvalInfo@,InRule.Repository.Infos.FieldInfo@)">
            <summary>
            Returns true when a target non-calculated field matching the specified name is found
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToCopyContainer(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.CheckedEvalToContainer,InRule.Repository.Infos.CheckedEvalToContainer)">
            <summary>
            Creates an eval info for a deep copying of the values from one container to another
            The non system fields on the source container are iterated, set value evals are creates for the 
            fields that can be resolved on the target container
            Pushes the value of the source container onto the value stack as "SourceContainer"
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToValueOnStackContainer(System.String,InRule.Repository.Infos.ContainerInfo,InRule.Repository.Infos.FieldInfo)">
            <summary>
            Creates an eval to the field from the "SourceContainer" on the context stack
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToStackValue(System.String,InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Creates an eval info which reads the a value by named from the context objects collection
            This eval requires that an ancestor action put the object into the context objects
            </summary>
            <param name="objectKey"></param>
            <param name="objectDataType"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToTable(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.ExpressionNode,System.Boolean)">
            <summary>
            Creates an eval to a table data container including any version date selection logic
            Runtime name resolution allows the table arg to resolve to a string which is used to determine the table at runtime
            If the table expression resolves to a data element
                If it is not a table, an error is thrown
                The DataElementArg will be null
                The ResultDatatype is the TableInfo it resolved to
            
            If the table expression resolves to a string
                If runtime name resolution is false, throws an error
                Otherwise, the result data type is an instance of UnknownTableInfo
                The DataElementArg will be populated
            </summary>
            <param name="taskFrame"></param>
            <param name="schemaContext"></param>
            <param name="tableExpressionNode"></param>
            <param name="allowRuntimeNameResolution"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToValueList(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.ExpressionNode,System.Boolean,System.Boolean,System.Collections.Generic.List{InRule.Repository.Infos.NamedEvalValuePairInfo})">
            <summary>
            Creates an eval to a value list container including any version date selection logic
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.CheckForPassThruParameters(InRule.Repository.Infos.EvalInfo,System.Collections.Generic.List{InRule.Repository.Infos.NamedEvalValuePairInfo})">
            <summary>
            Checks to see if pass thru parameters need to be append to an eval info
            If there are no pass thru parameters, returns
            If there are parameters and the eval is not a data container eval, throws
            Because parameters are part of the get container function, they can only be added to an expression that is a DataContainerEval
            </summary>
            <param name="dataEvalInfo"></param>
            <param name="passThruParameterList"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToXmlDocument(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.ExpressionNode)">
            <summary>
              Creates an eval to an xml document data container including any version date selection logic
            Runtime name resolution allows the xml document arg to resolve to a string which is used to determine the xml document at runtime
            If the xml document expression resolves to a data element
                If it is not an xml document, an error is thrown
                The DataElementArg will be null
                The ResultDatatype is the TableInfo it resolved to
            </summary>
            <param name="taskFrame"></param>
            <param name="schemaContext"></param>
            <param name="xmlDocumentExpressionNode"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToContextValueEvalInfo(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates an eval info for getting the value of the fieldEvalInfo in the context of the contextEvalInfo
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToContextValueEvalInfo(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.ValueInfo)">
            <summary>
            Creates an eval info for getting the value of a field info in the context of the contextEvalInfo
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToCurrentContainer(InRule.Repository.Infos.ContainerInfo)">
            <summary>
            Returns an eval into to the current context container as the type of the container passed in
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToSchemaContext(InRule.Repository.Infos.EvalSchemaContext)">
            <summary>
            Applies the aspect resolver to the current schema context
            Used for things like GetName or GetInvalid when the argument is the context it is called in
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToRaiseAuthoringError(InRule.Repository.Infos.BuildErrorInfo)">
            <summary>
            Used when there is an error creating and eval info to throw an error at runtime if the eval is consumed
            </summary>
            <param name="associatedBuildError"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalInfoWithErrorCheck(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.IBuildErrorOwner,System.String,System.Func{InRule.Repository.Infos.EvalInfo})">
            <summary>
            Invokes a build eval info delegate and if there is an error records the error and returns and AuthoringErrorEvalInfo
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalInfoForAuthoredValueExpressionWithErrorCheck(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.ValueInfo,System.String,InRule.Repository.Infos.EvalSchemaContext,System.String)">
            <summary>
             Used to build read value expressions created by the author in a context
            Verifies that the expression is well formed
            Verifies that the values used in the expression are accessable from the calling context
            </summary>
            <param name="taskFrame"></param>
            <param name="defOwner"></param>
            <param name="targetAspectName"></param>
            <param name="evalSchemaContext"></param>
            <param name="targetExpression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildPartialValueForAuthoredValueExpressionWithErrorCheck(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.ValueInfo,System.String,InRule.Repository.Infos.ContainerInfo,InRule.Repository.Infos.EvalSchemaContext,System.String)">
            <summary>
              Used to build read value expressions created by the author in a context
            Verifies that the expression is well formed
            Verifies that the values used in the expression are accessable from the calling context
            </summary>
            <param name="taskFrame"></param>
            <param name="engine"></param>
            <param name="defOwner"></param>
            <param name="targetAspectName"></param>
            <param name="parentContainer"></param>
            <param name="evalSchemaContext"></param>
            <param name="targetExpression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.EnsurePartialValueForEvalInfo(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.ContainerInfo,InRule.Repository.Infos.EvalInfo,System.String)">
            <summary>
            Used to build read value expressions created by the author in a context
            Verifies that the expression is well formed
            Verifies that the values used in the expression are accessable from the calling context
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalInfoForAssignableValueWithErrorCheck(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.IBuildErrorOwner,System.String,InRule.Repository.Infos.EvalSchemaContext,System.String)">
            <summary>
            Creates an eval for a value which can be assigned to a field
            If the eval results in a a context container, appends the context conainers child as the source value
            The reason for this is name resolution from a context container can sometimes return a context container when the author indends the actual value
            </summary>
            <param name="taskFrame"></param>
            <param name="owner"></param>
            <param name="targetAspectName"></param>
            <param name="schemaContext"></param>
            <param name="targetExpression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.CheckAppendEvalToChildContainerIfContextContainer(InRule.Repository.Infos.EvalInfo)">
            <summary>
            In cases where a container value is going to be assigned, need to ensure that the value returned is a real container
            </summary>
            <param name="sourceValueEval"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalInfoToCollectionWithErrorCheck(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.IBuildErrorOwner,System.String,InRule.Repository.Infos.EvalSchemaContext,System.String)">
            <summary>
            Builds an eval that records an error if result is blank or not resolved to a collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.ParseRawExpression(System.String)">
            <summary>
            In order to reduce parsing oddities arising from flag usages
            This is the only place where the expression parser should ever be invoked in order to have one set of flags
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.ParseExpression(System.String)">
            <summary>
            Converts empty expression to empty strings and parses accordingly
            </summary>
            <param name="sourceExpression"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalInfo_SkipCheckForAuthoredAccess(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.ExpressionNode)">
            <summary>
            Builds an eval info from the expression node and does not check for authored value access
            Used by meta data functions which are getting meta data from rule elements
            </summary>
            <param name="taskFrame"></param>
            <param name="evalSchemaContext"></param>
            <param name="expressionNode"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToNotFunction(InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates a NotEvalInfo 
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToIsNullFunction(InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates a IsNullEvalInfo 
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToAndOperator(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates a AndEvalInfo 
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildEngine.BuildEvalToOrOperator(InRule.Repository.Infos.EvalInfo,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates a OrEvalInfo 
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.ResultContext.SupportsLocalChildNameResolution">
            <summary>
            Indicates whethor or not a name can be resolved as a child of this context
            
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.GetAllResolvableSchemaNames(System.Boolean,System.String)">
            <summary>
            Returns all matching names from the context.  If matching name is null, returns all
            </summary>
            <param name="localOnly"></param>
            <param name="matchingName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.TryResolveName(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,System.String,System.Boolean,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            From this context, resolves to eval for the value with this name
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.ChangeActiveContext(InRule.Repository.Infos.EvalInfo)">
            <summary>
            Takes the result schema info from the eval and creates a new EvalScemaContext based on that context
            If the result schema info is null or not an ISchemaContext
            Changes the context to reference the result data type of the eval
            This does not push the current context onto the outer context stack
            </summary>
            <param name="toContextOnEvalInfoResult"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.BeginInnerCollectionMemberContext(InRule.Repository.Infos.CheckedEvalToCollection)">
            <summary>
            Looks at the result dataype and schema from from collection arg to create the context for resolving member field values
            Adds an outercontext to the stack for the last active context and changes the context to the member data type of the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.BeginInnerContext(InRule.Repository.Infos.EvalInfo)">
            <summary>
            This is used for the _inward context function.  It takes the result data type of the eval and makes that the current context
            The prior context is added to the outer context stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.EvalSchemaContext.EnsureAuthoredValueAccessPermitted(InRule.Repository.Infos.ValueInfo)">
            <summary>
            Checks to see if one value can access another.  If not, throws and authoring exception
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.CheckedEvalToCollection">
            <summary>
            Class created by the caller of a function
            Guarentees that the caller has ensured that the eval info resolves to a collection
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.CheckedEvalToComplexOrEntityCollection">
            <summary>
            Class created by the caller of a function expecting an eval info which must be a collection with entity or complex members
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DefUsageError">
            <summary>
            Contains the error information for an error which occurred while generating the evaluation relationships network
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DefUsageError.ErrorMessage">
            <summary>
            The error message corresponding to this error
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.BuildException">
            <summary>
            Class for exceptions that arise from invalid authored expressions or references
            Authoring exceptions should be caught and logged with the owning def/info
            The build can optinally continue after most authoring exceptions
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.BuildException.AppendStepToTaskPath(System.String)">
            <summary>
            Appends a named task step to the task path for where the error occurred
            </summary>
            <param name="userStepDescription"></param>
        </member>
        <member name="M:InRule.Repository.Infos.BuildException.RecordInvalidExpressionNode(InRule.Repository.Expressions.ExpressionNode)">
            <summary>
            Append an expression fragment to the stack of where the error occurred
            </summary>
            <param name="expressionNode"></param>
        </member>
        <member name="T:InRule.Repository.CompileError">
            <summary>
            Used to communicate error information back to the author
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DefUsageNetwork">
            <summary>
            Network of the execution and evaluation relationships in a rule application
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.Create(InRule.Repository.RuleApplicationDef)">
            <summary>
            Create a new instance of the network based on a rule application argument
            </summary>
            <param name="ruleApplicationDef"></param>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetInverseOfDefUsage(InRule.Repository.Infos.DefUsageType)">
            <summary>
            Utility method for inverting the usage from left side to right side.  Internal use only
            </summary>
            <param name="defUsageType"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetDefUsages(System.Guid)">
            <summary>
            For the given repository def guid, returns all the def usage pairs in the evaluation network
            <returns></returns>
            </summary>
            <param name="targetDefGuid"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetDefUsages(System.Guid,System.Boolean)">
            <summary>
            For the given repository def guid, returns all the def usage pairs in the evaluation network
            /// If includeChildren flag is true, in cases where the target def contains child logic, also includes the usage pairs for the contained logic
            </summary>
            <param name="targetDefGuid"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetUphillDefUsages(System.Collections.Generic.HashSet{InRule.Repository.Infos.IInfo},InRule.Repository.Infos.IInfo,System.Boolean,InRule.Repository.Infos.InfoUsageTraceStack)">
            <summary>
            Gets all the def usages by joining on the the right side and working backwards
            </summary>
            <param name="checkList"></param>
            <param name="rightInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GenerateUphillExternalDefUsages(System.Collections.Generic.HashSet{InRule.Repository.Infos.IInfo},InRule.Repository.Infos.IInfo,InRule.Repository.Infos.DefUsageType,InRule.Repository.Infos.InfoUsageTraceStack)">
            <summary>
            Walks uphill and for all external defs, creates the relationship type passed in
            </summary>
            <param name="checkList"></param>
            <param name="leftInfo"></param>
            <param name="usingDefUsageType"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetDownhillDefUsages_Internal(System.Collections.Generic.HashSet{InRule.Repository.Infos.IInfo},InRule.Repository.Infos.IInfo,System.Boolean,System.Boolean,InRule.Repository.Infos.InfoUsageTraceStack)">
            <summary>
            Gets all the def usages by joining on the right side and working downwards
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DefUsageNetwork.GetUphillDefsConsuming(InRule.Repository.Infos.IInfo,System.Collections.Generic.HashSet{InRule.Repository.Infos.IInfo},InRule.Repository.Infos.DefUsageType,InRule.Repository.Infos.InfoUsageTraceStack)">
            <summary>
            Only returns the uphill .Consumes which are iDefInfos
            </summary>
            <param name="rightInfo"></param>
            <param name="checkList"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Infos.DefUsageNetwork.Errors">
            <summary>
            Returns a list of errors found in the rule application
            When errors are present the evaluation relationships are frequently incomplete
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DefUsageNetwork.HasErrors">
            <summary>
            Indicates if errors were found in the rule application.  When true, errors can be retrieved using the Errors property.
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DefUsage">
            <summary>
            Contains the evaluation / execution relatinship to a repository def
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DefUsage.Element">
            <summary>
            Element to which the relationship applies
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.DefUsage.UsageType">
            <summary>
            Evaluation / Execution relationship type
            </summary>
        </member>
        <member name="P:InRule.Repository.CompileException.CompileExceptionDebug.ErrorsDebugTable">
            <summary>
            Formatted table of build errors
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.LogicDebugItem">
            <summary>
            This class is use to generate the debug tree dumps of the logic infos
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.VisualDisplayIconNames">
            <summary>
            Constants to relate icon names to visual name constants
            </summary>
        </member>
        <member name="T:InRule.Repository.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Activate_Rule_Set">
            <summary>
              Looks up a localized string similar to Activate Rule Set.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Activate_Rule_Sets_by_Category">
            <summary>
              Looks up a localized string similar to Activate Rule Sets by Category.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Condition">
            <summary>
              Looks up a localized string similar to Condition.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Deactivate_Rule_Set">
            <summary>
              Looks up a localized string similar to Deactivate Rule Set.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Deactivate_Rule_Sets_by_Category">
            <summary>
              Looks up a localized string similar to Deactivate Rule Sets by Category.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.Else">
            <summary>
              Looks up a localized string similar to Else.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.If">
            <summary>
              Looks up a localized string similar to If.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.If_Then">
            <summary>
              Looks up a localized string similar to If Then.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.If_Then_Else">
            <summary>
              Looks up a localized string similar to If Then Else.
            </summary>
        </member>
        <member name="P:InRule.Repository.Strings.While">
            <summary>
              Looks up a localized string similar to While.
            </summary>
        </member>
        <member name="M:InRule.Repository.Utilities.GacUtils.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Performs culture-neutral string equality comparison.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <param name="ignoreCase">Flag indicating whether the comparison is case-sensitive or not.</param>
            <returns>True if the two strings are equivalent.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GacUtils.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Performs culture-neutral string equality comparison.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <param name="ignoreCase">Flag indicating whether the comparison is case-sensitive or not.</param>
            <returns>1 if s1 is greater; -1 if s2 is greater, or 0 if equal.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GacUtils.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Performs culture-neutral string equality comparison.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <param name="ignoreCase">Flag indicating whether the comparison is case-sensitive or not.</param>
            <param name="culture">The culture to use for the comparison.</param>
            <returns>1 if s1 is greater; -1 if s2 is greater, or 0 if equal.</returns>
        </member>
        <member name="E:InRule.Repository.Vocabulary.TemplateDef.DisplayNameChangedEvent">
            <summary>
            Occurs after the display name has changed
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteMethodTemplateDef.AliasName">
            <summary>
            Gets/Sets the method name alias.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteMethodTemplateDef.ParameterValues">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection"/> which contains
            the required method parameters and their values.
            </summary>       
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteMethodTemplateDef.MethodReturnAssignTo">
            <summary>
            Gets/Sets the field name to assign method return value to.
            </summary>
        </member>
        <member name="T:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef">
            <summary>
            
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IExecuteWebServiceOperationActionDef">
            <summary>
            Represents a type which defines a WebService endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteWebServiceOperationActionDef.WebServiceEndPointName">
            <summary>
            Specifies the WebService endpoint name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteWebServiceOperationActionDef.OperationName">
            <summary>
            Specifies the WebService method to execute.
            </summary>
        </member>
        <member name="F:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef._timeoutMs">
            <summary>
            
            </summary>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.BuildActionDef(InRule.Repository.Vocabulary.TemplateValueDef)">
            <summary>
            
            </summary>
            <param name="valueDef"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.FindModifiedDifferences(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Differences.RuleRepositoryDifferenceMessageCollection)">
            <summary>
            
            </summary>
            <param name="editedDef"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.GetInvalidMessagesListInternal(System.Boolean,System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            
            </summary>
            <param name="ruleAppValidation"></param>
            <param name="errors"></param>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.HandleRuleRefactor(InRule.Repository.RuleRefactorEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.CheckForValidTypeMappingType(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.CheckForValidTypeMappingType(InRule.Repository.RuleElements.TypeMappingCollection,InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.TypeMappingType,System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            
            </summary>
            <param name="typeMappings"></param>
            <param name="type"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.CheckForValidationErrors(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.CheckForValidOperationName(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            
            </summary>
            <param name="errors"></param>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.WebServices">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.Operations">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.WebServiceEndPointName">
            <summary>
            Gets/Sets the name of <see cref="T:InRule.Repository.WebServiceDef"/> to use.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.OperationName">
            <summary>
            Gets/Sets the name of the <see cref="T:InRule.Repository.WebServiceDef"/> operation to execute.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.TimeoutMs">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.Inputs">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all input mappings(Ruleapplication Fields:Method parameters) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.Outputs">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all output mappings(Ruleapplication Fields:Method Return) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.RequestHeaders">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all request header mappings(Ruleapplication Fields:Method RequestHeaders) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.ResponseHeaders">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all response header mappings(Ruleapplication Fieldslt:Method ResponseHeaders) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.DefTemplates.ExecuteWebServiceTemplateDef.TemplateType">
            <summary>
            
            </summary>
        </member>
        <member name="M:InRule.Repository.Vocabulary.SortCollectionTemplateDef.CheckForModified(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Checks against another SortCollectionTemplateDef to see if it has been modified.
            </summary>
            <param name="editedDef">
            The other definition.
            </param>
            <param name="forSecurity"></param>
            <returns>
            <c>True</c> if the two definitions are different.
            </returns>
            <remarks>
            Since the base class implementation does not consider collections, this method specifically checks the 
            SortFields property when deciding if the def has been modified.
            </remarks>
        </member>
        <member name="T:InRule.Common.Attributes.ReadOnlyCollectionAttribute">
            <summary>
            Specifies whether the collection property this attribute is bound to
                  is read-only or read/write.
            </summary>
        </member>
        <member name="F:InRule.Common.Attributes.ReadOnlyCollectionAttribute.Yes">
            <summary>
            Specifies that the property this attribute is bound to is read-only and
                  cannot be modified in the server explorer. This <see langword='static '/>field is
                  read-only.
            </summary>
        </member>
        <member name="F:InRule.Common.Attributes.ReadOnlyCollectionAttribute.No">
            <summary>
            Specifies that the property this attribute is bound to is read/write and can
                  be modified at design time. This <see langword='static '/>field is read-only.
            </summary>
        </member>
        <member name="F:InRule.Common.Attributes.ReadOnlyCollectionAttribute.Default">
            <summary>
            Specifies the default value for the <see cref="T:InRule.Common.Attributes.ReadOnlyCollectionAttribute"/> , which is <see cref="F:InRule.Common.Attributes.ReadOnlyCollectionAttribute.No"/>, that is,
                  the property this attribute is bound to is read/write. This <see langword="static"/> field is read-only.
            </summary>
        </member>
        <member name="M:InRule.Common.Attributes.ReadOnlyCollectionAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Common.Attributes.ReadOnlyCollectionAttribute"/> class.
            </summary>
        </member>
        <member name="P:InRule.Common.Attributes.ReadOnlyCollectionAttribute.IsReadOnly">
            <summary>
            Gets a value indicating whether the property this attribute is bound to is
                  read-only.
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryBuildAsParentFunctionCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Internal function builders will not build functions which have a context
            If the function did not resolve to anything else and it's name is parent, assume that it is a a parent function with a context
            </summary>
            <param name="engine"></param>
            <param name="taskFrame"></param>
            <param name="sourceSchemaContext"></param>
            <param name="funcNode"></param>
            <param name="retEvalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryBuildEvalForMemberByIndexAccessorSyntax(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            To use collection name in the syntax expression. E.g. Collection1(1) - ( Identical to GetMemberByIndex(Collection1, 1) )
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryBuildEvalForMemberByDictionaryAccessorSyntax(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            To use collection name in the syntax expression. E.g. Collection1(MemField1, Value1, MemField2, Value2)
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryResolveAsSqlQueryFunctionCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Attempts to resolve the function syntax to a sql query function call
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryResolveAsXPathQueryFunctionCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Attempts to resolve the function syntax to a xPath query function call
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryResolveAsExternalLibraryMethodCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Attempts to resolve the function syntax to a static library method invocation
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryBuildAsInstanceMethodCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Attempts to resolve the function syntax as a method invocation
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.DeferredResolutionFunctionBuilder.TryBuildAsUdfFunctionCall(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Expressions.FunctionNode,InRule.Repository.Infos.EvalInfo@)">
            <summary>
            Attempts to resolve the function syntax to a user defined function call
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildTaskFrame.IsRecursiveTemplateTransform(InRule.Repository.Infos.ExpressionTemplateInfo,InRule.Repository.Expressions.FunctionNode)">
            <summary>
            Checks to see if the current template is already being transformed in a parent stack frame
            </summary>
            <param name="matchingTemplateInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildTaskFrame.BeginTemplateTransformFrame(InRule.Repository.Infos.ExpressionTemplateInfo,InRule.Repository.Expressions.FunctionNode)">
            <summary>
            Begins a build task frame for the transform of an expression template
            Keeps a reference to the template on the frame for subsequent detection via IsRecursiveTemplateTransform
            </summary>
            <param name="matchingTemplateInfo"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildTaskFrame.ProcessException(System.Exception)">
            <summary>
            Process an exception within a frame
            If the exceptoin is an authoring exception, record and continue
            If it is an critical exception, re throw
            If it is an unknown exception, create a critical exception and throw
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.BuildTaskFrame.InvokeWithErrorCheck(System.Action)">
            <summary>
            Executes a load task with an error wrapper that records load errors and throws critical errors when necessary
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Builders.BuildTaskFrame.TaskStack">
            <summary>
            Returns enumeration of task stack starting with deepst frame first
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.WrappedSourceRuleApp.LookupFieldDefByDefGuid(System.Guid)">
            <summary>
            Searched the rule app def for a field by guid and returns null if not found or not a field
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Infos.Builders.InfoLoadEngine">
            <summary>
            The info load engine is used during the load process to provide access to 
            datatypes and the infostore.  The info load engine is seperate from the build engine because
            the load process should not do any expression resolution until all of the loading is complete
            
            Once everything is loaded, each info then goes through what it loaded and builds the 
            appropriate infos for execution
            
            Ultimatly we will be tracking the dependencies between defs and infos such that when a def
            changes we will be able to reload that difference and rebuild the impacted infos
             
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.AddNewContainer``1">
            <summary>
            Adds a new container and sets load sequence to the current container count
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.CreateSourceDefInfo(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Infos.IDefInfo)">
            <summary>
            Sets common info properities for infos that are correlated to defs
            </summary>
            <param name="def"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.EnsureSourceDefInfo(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Ensures that a source def info has been created for this info
            Source Def Info holds all the authored meta information about a def
            A source def info can be associated with more than one info in cases where multiple infos are created from a single def
            The InfoId of a source def is the same as the guid of the def itself
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.ResolveToMailServerEndPoint(InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.RuleElements.SendMailActionDef)">
            <summary>
            Resolves the mail server to a send mail server info
            If the name is not found or is not a mail server, throws an error
            </summary>
            <param name="engine"></param>
            <param name="SendMailServer"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.EnsureArrayDataTypeFor(InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Ensures that an array data type exists in the rule application for a given member type
            Creates the type if not found
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.RecordAuthoringError(InRule.Repository.RuleRepositoryDefBase,System.String,InRule.Repository.Infos.BuildErrorMessage)">
            <summary>
            Records an authoring error which is only associated with a source def because an info could not be created
            </summary>
            <param name="sourceDef"></param>
            <param name="sourceDefAspect"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadEngine.EnsureSourceLogicTemplateInfo(InRule.Repository.Vocabulary.TemplateDef)">
            <summary>
            Ensures that there is a LogicTemplateInfo and Associated SourceDefInfo for the template
            Is only called for templates that are in use
            </summary>
            <param name="templateDef"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadErrorChecker.Ensure_IsValidElementName(System.String,System.Boolean,InRule.Repository.RuleRepositoryDefBase,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns false if no errors are found
            </summary>
            <param name="name"></param>
            <param name="isForCollectionOrFunction"></param>
            <param name="onDef"></param>
            <param name="elementDefaultDisplayName"></param>
            <param name="siblingsList"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadErrorChecker.Ensure_NoInvalidOrDuplicateNames(System.Collections.Generic.IEnumerable{InRule.Repository.RuleRepositoryDefBase},System.Collections.Generic.Dictionary{System.String,InRule.Repository.RuleRepositoryDefBase},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Ensures that there are no duplicate names and that the names of the elements are valid
            </summary>
            <param name="defs"></param>
            <param name="dupNameCheckList"></param>
            <param name="elementDefaultDisplayName"></param>
            <param name="siblingNames"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadErrorChecker.Ensure_ResolveToDatabaseEndpointConnection(InRule.Repository.RuleRepositoryDefBase,System.String,System.String,InRule.Repository.Infos.DatabaseConnectionInfo@)">
            <summary>
            Resolves the endpoint name to a database endpoint
            If the name is not found or is not a database endpoint, throws an error
            </summary>
            <param name="defErrorOwner"></param>
            <param name="sourceAspect"></param>
            <param name="endpointNameToResolve"></param>
            <param name="dbConnectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.InfoLoadErrorChecker.Ensure_ResolveToWebServiceEndpoint(InRule.Repository.RuleRepositoryDefBase,System.String,System.String,InRule.Repository.Infos.WebServiceInfo@)">
            <summary>
            Resolves the endpoint name to a database endpoint
            If the name is not found or is not a database endpoint, throws an error
            </summary>
            <param name="defErrorOwner"></param>
            <param name="sourceAspect"></param>
            <param name="endpointNameToResolve"></param>
            <param name="webServiceInfo"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Infos.BuildErrorMessage">
            <summary>
            Internal class which builds the string error message based on the runtime error code
            Resolves code to message from RuntimeErrorMessageTemplates.resx table
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ActivationTargetRulesetMustBeAutoFire">
            <summary>
              Looks up a localized string similar to Activation target RuleSet &apos;{0}&apos; must be auto-fire.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AmbiguousInlineMethodOverload">
            <summary>
              Looks up a localized string similar to Cannot use ambiguous method overload &apos;{0}.{1}&apos; with {2} parameter(s) in expressions. These methods may only be used in Execute Method Actions..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ArgumentExpressionDoesNotSupportConversionToParameterType">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; for argument &apos;{1}&apos; can not be assigned to parameter type &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ArgumentNameDoesNotMatchAnyExpectedParameter">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; does not match any parameter on the ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AssignmentTargetIsNotAValidQueryAssignmentTarget">
            <summary>
              Looks up a localized string similar to Assignment target &apos;{0}&apos; is not a valid query assignment target.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAccessToLogicElementsIsNotSupported">
            <summary>
              Looks up a localized string similar to Logic elements can not be referenced in expressions.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAccessToSystemFieldIsNotSupported">
            <summary>
              Looks up a localized string similar to System field values can not be referenced in expressions.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfCalculatedFieldsIsNotSupported">
            <summary>
              Looks up a localized string similar to Calculated field &apos;{0}&apos; in the context &apos;{1}&apos; does not support the assignment of values .
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfCollectionsIsNotSupported">
            <summary>
              Looks up a localized string similar to Collections do not support the assignment of values.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfComplexCollectionsIsNotSupported">
            <summary>
              Looks up a localized string similar to Complex collections do not support the assignment of values.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfComplexFieldsIsNotSupported">
            <summary>
              Looks up a localized string similar to Complex fields do not support the assignment of values.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfInternalDatatypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Datatype &apos;{0}&apos; does not support the assignment of values.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfLogicElementsIsNotSupported">
            <summary>
              Looks up a localized string similar to Logic elements are not valid as the target of an assignment.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfReadOnlyFieldsIsNotSupported">
            <summary>
              Looks up a localized string similar to Read-only field &apos;{0}&apos; in the context &apos;{1}&apos; does not support the assignment of values .
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.AuthorAssignmentOfSystemFieldsIsNotSupported">
            <summary>
              Looks up a localized string similar to The internal system fields for the rule engine do not support value assignment.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.BlankMemberFieldAssignment">
            <summary>
              Looks up a localized string similar to Empty expression for member field assignment &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CacheDurationIsInvalid">
            <summary>
              Looks up a localized string similar to The cache duration cannot be less then 0.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CalculationIsRequired">
            <summary>
              Looks up a localized string similar to Calculation is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotAssignMemberValuesWhenLinkingExistingEntity">
            <summary>
              Looks up a localized string similar to Cannot assign member values to collection member when linking from an existing Entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderJsonFromNonEntityContext">
            <summary>
              Looks up a localized string similar to Cannot render JSON because there is no current Entity context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderJsonFromNonTempCalculation">
            <summary>
              Looks up a localized string similar to Cannot render Entity JSON in a Calculation Field that targets the current Entity or parent Entity from the same EndPoint Schema unless state location is set to Temporary, otherwise the call becomes recursive.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderJsonOfNonEntity">
            <summary>
              Looks up a localized string similar to Cannot render JSON of non-Entity Field: {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderXmlFromNonEntityContext">
            <summary>
              Looks up a localized string similar to Cannot render XML because there is no current Entity context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderXmlFromNonTempCalculation">
            <summary>
              Looks up a localized string similar to Cannot render Entity XML in a Calculation Field that targets the current Entity or parent Entity from the same EndPoint Schema unless state location is set to Temporary, otherwise the call becomes recursive.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CannotRenderXmlOfNonEntity">
            <summary>
              Looks up a localized string similar to Cannot render XML of non-Entity Field: {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CascadeChildGuidNotFound">
            <summary>
              Looks up a localized string similar to Cascade child guid not found: {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CascadedEntityContextNameConflictsWithChildFieldname">
            <summary>
              Looks up a localized string similar to Cascaded entity context name &apos;{0}&apos;conflicts with child fieldname &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CascadeSourceAndTargetAreNotCompatable">
            <summary>
              Looks up a localized string similar to Cascade source and target fields are not compatable.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CascadingCollectionFieldIsNotSupported">
            <summary>
              Looks up a localized string similar to Cascading collection fields is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CascadingComplexFieldIsNotSupported">
            <summary>
              Looks up a localized string similar to Cascading complex fields is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CategoryNameIsRequired">
            <summary>
              Looks up a localized string similar to CategoryName is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CategoryNameNotFoundInCategoryList">
            <summary>
              Looks up a localized string similar to Category name &apos;{0}&apos; was not found in the category list.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CircularEntityExplicitRulesetExecute">
            <summary>
              Looks up a localized string similar to Execute ruleset ‘{0}’ is not supported because the action cannot call the same ruleset that is currently executing.  In order to execute the same ruleset, an independent ruleset must be used..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CircularReferenceInCalculation">
            <summary>
              Looks up a localized string similar to Calculation contains a circular reference: {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ClassificationDisplayNameIsNotUnique">
            <summary>
              Looks up a localized string similar to Display name &apos;{0}&apos; is not unique. Each classification on field must have a unique name..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ClassificationDisplayNameIsRequired">
            <summary>
              Looks up a localized string similar to Classification on schema item &apos;{0}&apos; does not has a display name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ClassificationNameMustNotMatchTargetName">
            <summary>
              Looks up a localized string similar to Classification on schema item &apos;{0}&apos; may not also be named &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ClassificationRuleExpressionIsRequired">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; classification &apos;{1}&apos; is missing a rule expression.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ClassMayNotBeMarkedAsBothEntityAndFunctionLibrary">
            <summary>
              Looks up a localized string similar to Class &apos;{0}&apos; may not be marked as both Entity and Function Library.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CollectionDoesNotSupportRulesetsOnMembers">
            <summary>
              Looks up a localized string similar to Collection &apos;{0}&apos; does not support member rulesets.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.CollectionIsNotAComplexOrEntityCollection">
            <summary>
              Looks up a localized string similar to Collection is not a complex or entity collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ConditionIsRequired">
            <summary>
              Looks up a localized string similar to Condition is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ConstructNotSupportedAsRootAutoSequentialMember">
            <summary>
              Looks up a localized string similar to Logic construct is not supported as a root member of a sequential ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ConstructNotSupportedUnderOptimized">
            <summary>
              Looks up a localized string similar to Logic construct is not supported under optimized ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ContextExpressionDoesNotResolveToAValidContainer">
            <summary>
              Looks up a localized string similar to Context expression &apos;{0}&apos; is not a valid context for name resolution.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DatabaseEndpointNameNotFound">
            <summary>
              Looks up a localized string similar to Database connection endpoint &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DatabaseTableMustHaveADatabaseConnection">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; must have a Database Connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DatabaseTableMustHaveADatabaseConnectionWhichIsNotADatabaseSchema">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; must have a Database Connection, which cannot be a Database Schema.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DatasetXsdSchemaNotSupported">
            <summary>
              Looks up a localized string similar to XSD Schema &apos;{0}&apos; which is a Dataset XSD is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DatatypeIsRequiredAndMayNotBeType">
            <summary>
              Looks up a localized string similar to DataType is required and may not be {0}..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DefaultValueCouldNotParseToXml">
            <summary>
              Looks up a localized string similar to Default value could not be parsed to xml.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DefaultValueDidNotParseToLiteralExpression">
            <summary>
              Looks up a localized string similar to Default value &apos;{0}&apos; did not resolve to a literal expression.  Default value expressions can not contain any operators or functions.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DefinitionValidationFailed">
            <summary>
              Looks up a localized string similar to The RuleApplication failed to validate: {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DetailsInvalidVersionName">
            <summary>
              Looks up a localized string similar to {0}  Details: Invalid version name: {1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DomainIsRequiredForNtlmOrKerberosAuthentication">
            <summary>
              Looks up a localized string similar to Domain is required when NTLM or Kerberos is selected for AuthenticationType.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DuplicateMemberFieldAssignment">
            <summary>
              Looks up a localized string similar to Duplicate member field assignment for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DuplicateNameInEntityAndContext">
            <summary>
              Looks up a localized string similar to Context name &apos;{0}&apos; matches existing name on entity &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DuplicateNameInSameContext">
            <summary>
              Looks up a localized string similar to Duplicate name &apos;{0}&apos; in the same context {1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.DuplicateVersionNameOn2OrMoreRuleversions">
            <summary>
              Looks up a localized string similar to Duplicate version name &apos;{0}&apos; on 2 or more RuleVersions..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ElementNameSameAsEntityName">
            <summary>
              Looks up a localized string similar to Element name is the same as its Entity name: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.EndpointIsNotXmlDocumentPath">
            <summary>
              Looks up a localized string similar to Endpoint &apos;{0}&apos; is not a Xml document path endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.EndpointNotSynchronizedToSchemaSinceLastImport">
            <summary>
              Looks up a localized string similar to {0} EndPoint {1} has not been synchronized to schema since last import / reload on {2}&quot;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.EntityTypeFieldMayNotHaveChildFields">
            <summary>
              Looks up a localized string similar to Entity-type Field {0} may not have child fields (has {1}).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.Error_Loading_Source_Definition">
            <summary>
              Looks up a localized string similar to An error occurred while loading source definition.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ExecuteWebServiceMappingDatatypeInvalid">
            <summary>
              Looks up a localized string similar to Execute Web Service {3} mapping datatype of &apos;{0}&apos; for &apos;{1}&apos; does not match the actual datatype of &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ExecuteWebServiceOperationNameInvalid">
            <summary>
              Looks up a localized string similar to Execute Web Service selected operation &apos;{0}&apos; for &apos;{1}&apos; does not match the available operations for Web Service &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ExpectedParameterWasNotSpecified">
            <summary>
              Looks up a localized string similar to Expected parameter &apos;{0}&apos; was not specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ExpressionCouldNotBeResolvedToAnAssignableElement">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; could not be resolved to an assignable element.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ExpressionIsNotAValidAssignmentTarget">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; is not a valid assignment target.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FailedToLoadXsdFromUri">
            <summary>
              Looks up a localized string similar to Failed to load XSD from Uri(&apos;{0}&apos;).  {1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FieldCalculationNotSupported">
            <summary>
              Looks up a localized string similar to Calculations are not supported on this type of field.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FieldDefaultValueNotSupported">
            <summary>
              Looks up a localized string similar to Default values are not supported on this type of field.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FieldDoesNotHaveAssociatedValueList">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; does not have an associated value list.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FromCollectionIsRequired">
            <summary>
              Looks up a localized string similar to From collection is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FromFieldIsRequired">
            <summary>
              Looks up a localized string similar to From field is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FunctionNameExpectsMaximumNumberOfArgs">
            <summary>
              Looks up a localized string similar to Function {0} expects maximum of {1} argument(s).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FunctionNameExpectsMinimumNumberOfArgs">
            <summary>
              Looks up a localized string similar to Function {0} expects minimum of {1} argument(s).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.FunctionNameExpectsNumberOfArgs">
            <summary>
              Looks up a localized string similar to Function {0} expects {1} argument(s).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.HttpStatusCodesInvalidFormat">
            <summary>
              Looks up a localized string similar to The HTTP status codes need to be in the format xxx-yyy (i.e. 200-299).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InlineTableColumnNameIsInvalid">
            <summary>
              Looks up a localized string similar to Column {0}: Column &apos;{1}&apos; contains one or more illegal characters.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InlineXomlWorkflowsAreNoLongerSupported">
            <summary>
              Looks up a localized string similar to Inline XOML workflows are no longer supported..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InternalErrorUnhandledDataInfoType">
            <summary>
              Looks up a localized string similar to Internal Error.  Unhandled data info type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InternalErrorValidatingRuleApplication">
            <summary>
              Looks up a localized string similar to An internal error has occurred.  {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidArgumentCountRequiresMany">
            <summary>
              Looks up a localized string similar to Invalid argument count.  {0} function only accepts {1} arguments.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidArgumentCountRequiresMin">
            <summary>
              Looks up a localized string similar to Invalid argument count.  {0} function requires {1} or more arguments.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidArgumentCountRequiresMinToMax">
            <summary>
              Looks up a localized string similar to Invalid argument count.  {0} function only accepts {1} to {2} arguments.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidArgumentCountRequiresOne">
            <summary>
              Looks up a localized string similar to Invalid argument count.  {0} function only accepts 1 argument.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidAssemblyboundPrimitiveFieldDefaultValueUsage">
            <summary>
              Looks up a localized string similar to Assembly bound primitive Field cannot have a Default Value because it is not nullable..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidCacheDuration">
            <summary>
              Looks up a localized string similar to Cache duration must be zero or larger.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidNumberOfQueryFunctionParameters">
            <summary>
              Looks up a localized string similar to Invalid number of query parameters.  Query &apos;{0}&apos; expects {1} and was given {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidNumberOfRetriesSpecified">
            <summary>
              Looks up a localized string similar to Invalid number of retries specified. Only zero or one retry is permitted..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidNumberOfUdfFunctionArguments">
            <summary>
              Looks up a localized string similar to Invalid number of function arguments.  User defined function &apos;{0}&apos; expects {1} and was given {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidRecursiveVocabularyExpressionTemplate">
            <summary>
              Looks up a localized string similar to Invalid recursive expression in vocabulary expression template &apos;{0}&apos;. A template may not call itself recursively.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidServiceFieldMappingChildFieldsUnderFieldWithNoChildren">
            <summary>
              Looks up a localized string similar to Invalid service field mapping.  Child fields were authored under a field which does not have children..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidStartingContextInChildentityexistsFunction">
            <summary>
              Looks up a localized string similar to Invalid starting context in ChildEntityExists function.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidTimeoutValueSpecified">
            <summary>
              Looks up a localized string similar to Invalid timeout value specified. Any values less than 1 will be ignored..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidUri">
            <summary>
              Looks up a localized string similar to Invalid URI.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidUriProtocol">
            <summary>
              Looks up a localized string similar to Invalid uri protocol.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.InvalidWebServiceFieldMapping">
            <summary>
              Looks up a localized string similar to &quot;Invalid web service field mapping.  Expected one root field mapping per argument&quot;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.LanguageRuleInnerContentIsNull">
            <summary>
              Looks up a localized string similar to The inner content for language rule &apos;{0}&apos; is missing.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.LegacyErrorMessage">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MemberIndexIsRequired">
            <summary>
              Looks up a localized string similar to Member index is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MessageIsRequired">
            <summary>
              Looks up a localized string similar to Message is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MethodContextIsRequired">
            <summary>
              Looks up a localized string similar to Method container name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MethodNameIsRequired">
            <summary>
              Looks up a localized string similar to Method name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MethodOverloadedDatatypesRequired">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has &apos;{1}&apos; overloads but the data types for the parameters &apos;{2}&apos; has not been supplied. Please modify your SDK call to supply the data types..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MissingSourceColumnForTargetField">
            <summary>
              Looks up a localized string similar to Missing source column for target field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MissingTargetFieldForSourceColumn">
            <summary>
              Looks up a localized string similar to Missing target field for source column &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.MultipleMatchingMethodsFoundWithNoneMatchingSourceTypes">
            <summary>
              Looks up a localized string similar to Multiple matching methods for &apos;{0}&apos; were found and none matched source parameter types.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NameIsInvalid">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is not valid.  Names must begin with a letter or an underscore and can contain only letters, numbers, or underscores.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NameIsRequired">
            <summary>
              Looks up a localized string similar to Name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NameIsReservedFunctionName">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is a reserved function name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NameIsReservedWord">
            <summary>
              Looks up a localized string similar to Reserved word &apos;{0}&apos; is not a valid element name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NameIsTooLong">
            <summary>
              Looks up a localized string similar to Name length &apos;{0}&apos; is greater than maximum size of 255.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.NewMemberSourceMustBeComplexOrEntity">
            <summary>
              Looks up a localized string similar to New member source expression must resolve to a complex or entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.OnlyInputParametersAreSupportedOnExecuteXpathQuery">
            <summary>
              Looks up a localized string similar to Only input parameters are supported on Execute XPath Query.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.OperationNameIsRequired">
            <summary>
              Looks up a localized string similar to Operation name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.OperatorNameExpectsLhsOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; expects a left-hand operand.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.OperatorNameExpectsRhsOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; expects a right-hand operand.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.OuterContextIsNotAvailable">
            <summary>
              Looks up a localized string similar to Outer context is not available..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ParameterExpressionIsRequired">
            <summary>
              Looks up a localized string similar to Expression for parameter &apos;{0}&apos; is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ParameterNameIsNotUnique">
            <summary>
              Looks up a localized string similar to Parameter name &apos;{0}&apos; is not unique.  All parameter names must be unique.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ParametersAreNotSupportedOnAutoRulesets">
            <summary>
              Looks up a localized string similar to Parameters are not supported on auto rulesets.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ParentContextIsNotAccessable">
            <summary>
              Looks up a localized string similar to Parent context is not accessable from this context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ParentContextIsNotAccessableFromContext">
            <summary>
              Looks up a localized string similar to Parent context is not accessable from &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.PropertyIsBlank">
            <summary>
              Looks up a localized string similar to Expression for {0} is blank.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryParameterDatatypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Data type &apos;{0}&apos; for query parameter &apos;{1}&apos; is not supported.  Only primitive datatypes are supported for query parameters..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryParameterNameDoesNotStartWithAtSign">
            <summary>
              Looks up a localized string similar to Query parameter name &apos;{0}&apos; does not start with @.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryParameterNameIsBlank">
            <summary>
              Looks up a localized string similar to Query parameter name is blank.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryParameterNameIsInvalid">
            <summary>
              Looks up a localized string similar to Query parameter name &apos;{0}&apos; contains invalid characters.  Parameter names must begin with @ and may only contain underscore letters, numbers, or underscores.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QuerySettingsAreNull">
            <summary>
              Looks up a localized string similar to Query settings for &apos;{0}&apos; are null.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryTextIsRequired">
            <summary>
              Looks up a localized string similar to Query is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryValueListSourceIsRequired">
            <summary>
              Looks up a localized string similar to The query value list &apos;{0}&apos; must have a list source.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.QueryValueValueColumnNameIsRequired">
            <summary>
              Looks up a localized string similar to The query value list &apos;{0}&apos; must have a value column name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RecursiveUseOfChildentityexistsFunctionNotSupported">
            <summary>
              Looks up a localized string similar to Recursive use of ChildEntityExists function not supported. Entity &apos;{0}&apos; cannot contain descendents of itself.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ReferencedCategoryNotInMasterList">
            <summary>
              Looks up a localized string similar to Referenced Category &apos;{0}&apos; is not in master Categories list.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RuleAppVersionCreatedDateExpressionIsRequired">
            <summary>
              Looks up a localized string similar to VersionCreatedDateFieldName must be specified when UseRuleVersions=true and UseVersionCreationDates=true - Either a field such as Entity1.Field1, or use &quot;Today()&quot; to use current date.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RuleAppVersionEffectiveDateExpressionIsRequired">
            <summary>
              Looks up a localized string similar to VersionEffectiveDateFieldName must be specified when UseRuleVersions=true - Either a field such as Entity1.Field1, or use &quot;Today()&quot; to use current date.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RuleElementIsNotValidInRuleSetContext">
            <summary>
              Looks up a localized string similar to {0} is not valid in this rule set context: {1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RuleElementIsNotValidInRuleSetFolder">
            <summary>
              Looks up a localized string similar to {0} is not valid in this rule set context: Actions or Rule Sets folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RulesetParametersCanOnlyBeAccessedByElementsInTheSameRuleset">
            <summary>
              Looks up a localized string similar to Ruleset parameters can only be accessed by elements in the same ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.RunawayCycleCountMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to RunawayCycleCount must be &gt; 0.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SortCollectionActionRequiresOneOrMoreSortFields">
            <summary>
              Looks up a localized string similar to At least one field must be specified to sort on.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SourceExpressionIsRequired">
            <summary>
              Looks up a localized string similar to Source expression is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SourceMustResolveToDataType">
            <summary>
              Looks up a localized string similar to Source expression must resolve to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryCommandTypeMustBeExecuteWhenUsingOutputParms">
            <summary>
              Looks up a localized string similar to Command type &apos;{0}&apos; is not validfor query.  Command type must be execute when using output parameters..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryMustHaveADatabaseConnection">
            <summary>
              Looks up a localized string similar to SQL Query &apos;{0}&apos; must have a Database Connection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryMustHaveADatabaseConnectionWhichIsNotADatabaseSchema">
            <summary>
              Looks up a localized string similar to SQL Query &apos;{0}&apos; must have a Database Connection, which cannot be a Database Schema.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryMustHaveAtLeastOneSelectField">
            <summary>
              Looks up a localized string similar to Query did not have at least one field in SELECT ... FROM.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryNotMatchSelectFromPattern">
            <summary>
              Looks up a localized string similar to Query did not match SELECT ... FROM ... pattern.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryParameterNameIsBlankWithSuggest">
            <summary>
              Looks up a localized string similar to Sql query parameter name is blank.  (suggested name: &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryParameterNameIsInvalidWithSuggest">
            <summary>
              Looks up a localized string similar to Invalid sql query parameter name: &apos;{0}&apos; (suggested name: &apos;{1}&apos;).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryParameterTypeIsInvalid">
            <summary>
              Looks up a localized string similar to Invalid SQL Query param type for param &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryParameterTypeReturnvalueIsNotSupported">
            <summary>
              Looks up a localized string similar to Query parameter type &apos;return value&apos; is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.SqlQueryParameterValueIsInvalid">
            <summary>
              Looks up a localized string similar to Expression must be enclosed in {0} for parameter {1}: {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TableSettingsAreNull">
            <summary>
              Looks up a localized string similar to Table settings for &apos;{0}&apos; are null.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetCollectionDoesNotSupportAddingMembersOfSourceType">
            <summary>
              Looks up a localized string similar to Target collection &apos;{0}&apos; does not support adding members of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetCollectionDoesNotSupportMemberValueAssignments">
            <summary>
              Looks up a localized string similar to Target collection &apos;{0}&apos; does not support setting individual member values.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetCollectionIsRequired">
            <summary>
              Looks up a localized string similar to Target collection is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetCollectionPrototypeIsRequired">
            <summary>
              Looks up a localized string similar to Target collection prototype is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetDataElementDoesNotAcceptPassThruParameters">
            <summary>
              Looks up a localized string similar to Target data element does not accept pass thru parameters.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetExpressionDidNotResolveToACollection">
            <summary>
              Looks up a localized string similar to Target expression did not resolve to a collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetExpressionDoesNotSupportAssignment">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not support value assignments.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetExpressionIsRequired">
            <summary>
              Looks up a localized string similar to Target expression is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetFieldNameIsRequired">
            <summary>
              Looks up a localized string similar to Field name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetIsRequired">
            <summary>
              Looks up a localized string similar to Target is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetQueryIsRequired">
            <summary>
              Looks up a localized string similar to Target query is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetQueryNotFound">
            <summary>
              Looks up a localized string similar to Target query &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetRulesetIsRequired">
            <summary>
              Looks up a localized string similar to Target ruleset is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetRulesetMustHaveFiremodeExplicit">
            <summary>
              Looks up a localized string similar to Target ruleset &apos;{0}&apos; does not have fire more set to explicit.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetRulesetParameterCountMismatch">
            <summary>
              Looks up a localized string similar to Target ruleset &apos;{0}&apos; expects {1} parameters and provided {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetRulesetParameterExpressionIsRequired">
            <summary>
              Looks up a localized string similar to Missing required value for parameter &apos;{0}&apos;. Use null to specify a null value..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetRulesetRequiredParameterIsNotSpecified">
            <summary>
              Looks up a localized string similar to Missing required parameter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TargetTypeDoesNotSupportAssignmentFromSourceType">
            <summary>
              Looks up a localized string similar to Data type &apos;{0}&apos; can not be assigned values of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TemplateHasBlankExpressionPrototype">
            <summary>
              Looks up a localized string similar to Template &apos;{0}&apos; has a blank expression prototype.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TemplateHasInvalidFunctionName">
            <summary>
              Looks up a localized string similar to Template &apos;{0}&apos; has an invalid function name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.TimeoutMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Timeout must be &gt; 0.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ToCollectionIsRequired">
            <summary>
              Looks up a localized string similar to To collection is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ToFieldIsRequired">
            <summary>
              Looks up a localized string similar to To field is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UdfCannotHaveOutArg">
            <summary>
              Looks up a localized string similar to UDF &apos;{0}&apos; is configured with output argument &apos;{1}&apos;. Out args are not supported for UDFs..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UdfParameterTypeNotSupported">
            <summary>
              Looks up a localized string similar to Udf parameter type &apos;{0}&apos; not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UdfReturnTypeNotSupported">
            <summary>
              Looks up a localized string similar to Udf return type &apos;{0}&apos; not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToParseExpression">
            <summary>
              Looks up a localized string similar to Unable to parse expression &apos;{0}&apos; {1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToParseQuery">
            <summary>
              Looks up a localized string similar to Unable to parse query &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveCascadeSource">
            <summary>
              Looks up a localized string similar to Unable to resolve cascade source.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveCascadeTarget">
            <summary>
              Looks up a localized string similar to Unable to resolve cascade target.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveClassification">
            <summary>
              Looks up a localized string similar to Unable to resolve classification &apos;{0}&apos; on &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveDatatype">
            <summary>
              Looks up a localized string similar to Unable to resolve data type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpression">
            <summary>
              Looks up a localized string similar to Unable to resolve expression syntax &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToABooleanValue">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a boolean value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToACollection">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToADatabaseEndpoint">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a database endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToADataElement">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a data element.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAField">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a field.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAMailserverEndpoint">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a mail server endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAnEntity">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to an entity.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAnExplicitRuleset">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to an explicit ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAQuery">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a query.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToARuleset">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToATable">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a table.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToAValueList">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a value list.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToElementThatSupportsValidity">
            <summary>
              Looks up a localized string similar to Unable to resolve expression to an element which supports validity.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToRestService">
            <summary>
              Looks up a localized string similar to Unable to resolve expression &apos;{0}&apos; to a rest service.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToValueListOrFieldWithAValueList">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; did not resolve to a value list or a field with a value list.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToWebService">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a web service endpoint.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToWorkflow">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a workflow.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToXmlDocument">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to a xml document.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExpressionToXmlDocumentOrXmlString">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; to an xml document or xml string.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveExternalMethod">
            <summary>
              Looks up a localized string similar to Unable to resolve external method {0}.{1}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveFunctionName">
            <summary>
              Looks up a localized string similar to Unable to resolve function name &apos;{0}&apos; .
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveNameInContext">
            <summary>
              Looks up a localized string similar to Unable to resolve &apos;{0}&apos; in context &apos;{1}&apos;{2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveSchemaAspectFromNonSchemaElement">
            <summary>
              Looks up a localized string similar to Unable to resolve schema aspect from non-schema element.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveToElementSupportingEntityIdAttribute">
            <summary>
              Looks up a localized string similar to Unable to resolve to an element which supports entity id attribute.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveToElementSupportingEntityNameAttribute">
            <summary>
              Looks up a localized string similar to Unable to resolve to an element which supports entity name attribute.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveValueListSource">
            <summary>
              Looks up a localized string similar to Unable to resolve value list source &apos;{0}&apos; to a table or query.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveValueRefreshFromStaticFunction">
            <summary>
              Looks up a localized string similar to Unable to refresh all child values from this function.  For function libraries value refresh paths must start with the name of an entity argument.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveValueRefreshPath">
            <summary>
              Looks up a localized string similar to Unable to resolve value refresh path &apos;{0}&apos;.  For function libraries value refresh paths must start with the name of an entity argument.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnableToResolveValueRefreshPathToASchemaElement">
            <summary>
              Looks up a localized string similar to Value refresh path did not resolve to a schema element.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnaryOperatorNameExpectsOperand">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0}&apos; expects an operand.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedDataElementType">
            <summary>
              Looks up a localized string similar to Unexpected data element def &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedDataTableSourcetype">
            <summary>
              Looks up a localized string similar to Unexpected data table source type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedExpressionSyntax">
            <summary>
              Looks up a localized string similar to Unexpected expression syntax: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedLogicElementType">
            <summary>
              Looks up a localized string similar to Unexpected logic element type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedRepositoryElement">
            <summary>
              Looks up a localized string similar to Unexpected repository {0} element &apos;{1}&apos; at &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedSqlQuerySourcetype">
            <summary>
              Looks up a localized string similar to Unexpected sql query source type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnexpectedXmlDocumentSourcetype">
            <summary>
              Looks up a localized string similar to Unexpected xml document source type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnknownDatabaseProviderType">
            <summary>
              Looks up a localized string similar to Unknown database provider type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnmatchedParameterName">
            <summary>
              Looks up a localized string similar to No matching parameter was found for parameter name &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnmatchedValueListPassThruParameterCounts">
            <summary>
              Looks up a localized string similar to Unmatched pass thru parameter counts.  Value list &apos;{0}&apos; expects {1} and received {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedAssignmentOfCollectionFromMethodResult">
            <summary>
              Looks up a localized string similar to Assignment of &apos;{0}&apos; is not supported.  Method return values cannot be assigned to collections.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedAssignmentOfPrimitiveCollectionFromSetValue">
            <summary>
              Looks up a localized string similar to Primitive collections can not be assigned using set value action.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedCollectionActionOnPrimitiveCollection">
            <summary>
              Looks up a localized string similar to Collection action type &apos;{0}&apos; is not supported on this type of collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedCollectionComparisonOperation">
            <summary>
              Looks up a localized string similar to Collections do not support comparison operations.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedEqualityComparison">
            <summary>
              Looks up a localized string similar to Equality comparison between &apos;{0}&apos; and &apos;{1}&apos; is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedEqualityComparisonActionOnPrimitiveCollection">
            <summary>
              Looks up a localized string similar to Primitive collections do not support equality comparison.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedFieldDatatype">
            <summary>
              Looks up a localized string similar to Datatype &apos;{0}&apos; is not supported as a field data type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedRulesetParameterDatatype">
            <summary>
              Looks up a localized string similar to Datatype &apos;{0}&apos; is not supported as a rule set parameter data type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedRulesetRunModeFireModeCombination">
            <summary>
              Looks up a localized string similar to Ruleset run mode &apos;{1}&apos; is not supported under fire mode &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedScalerComparison">
            <summary>
              Looks up a localized string similar to Scaler comparison between &apos;{0}&apos; and &apos;{1}&apos; is not supported.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UnsupportedVariableDatatype">
            <summary>
              Looks up a localized string similar to Datatype &apos;{0}&apos; is not supported as a variable data type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UriRetryMustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Retry value of &apos;{0}&apos; is not valid, retry value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UriTimeoutMustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Timeout value of &apos;{0}&apos; is not valid, timeout value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.UserAttributesAreNotAvailableInThisContext">
            <summary>
              Looks up a localized string similar to User attributes are not available in this context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ValueIsRequired">
            <summary>
              Looks up a localized string similar to Value is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ValueListItemDisplayNameIsNotUnique">
            <summary>
              Looks up a localized string similar to List item display name &apos;{0}&apos; is not unique.  All non-blank display names must be unique.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ValueListItemValueIsNotUnique">
            <summary>
              Looks up a localized string similar to List item value &apos;{0}&apos; is not unique.  All values in the list must be unique.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ValueRefreshPathIsBlank">
            <summary>
              Looks up a localized string similar to The refresh path is blank on value refresh for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.ValueRefreshPathsFromParameterOnlyAllowedOnEntityParameters">
            <summary>
              Looks up a localized string similar to Invalid value refresh path &apos;{0}&apos;.  Value refresh paths starting with parameter names can only be specified on entity type parameters.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.VariablesCanOnlyBeAccessedByElementsInTheSameRuleset">
            <summary>
              Looks up a localized string similar to Variables can only be accessed by elements in the same ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WebServiceEndpointNameIsRequired">
            <summary>
              Looks up a localized string similar to Web service end point name is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WebServiceFieldMappingTargetIsCollection">
            <summary>
              Looks up a localized string similar to Web service field mapping target &apos;{0}&apos; is collection, but source value &apos;{1}&apos; is not.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WebServiceFieldMappingTargetIsEntity">
            <summary>
              Looks up a localized string similar to Web service field mapping target &apos;{0}&apos; is not a primitive data type, but source value &apos;{1}&apos; is.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WebServiceFieldMappingTargetNotCollection">
            <summary>
              Looks up a localized string similar to Web service field mapping target &apos;{0}&apos; is not a collection, but source value &apos;{1}&apos; is.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WebServiceFieldMappingTargetNotEntity">
            <summary>
              Looks up a localized string similar to Web service field mapping target &apos;{0}&apos; is a primitive data type, but source value &apos;{1}&apos; is not.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.WorkflowEndpointNameNotConfigured">
            <summary>
              Looks up a localized string similar to WorkflowEndPointName not configured..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XmlDocumentEndpointPathWasNotFound">
            <summary>
              Looks up a localized string similar to Xml document path endpoint &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XmlDocumentSettingsAreNull">
            <summary>
              Looks up a localized string similar to Xml document settings for &apos;{0}&apos; are null.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryAssignmentTargetIsRequired">
            <summary>
              Looks up a localized string similar to Assignment target is required..
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryIsRequired">
            <summary>
              Looks up a localized string similar to XPath Query is required.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryNameNotFound">
            <summary>
              Looks up a localized string similar to XPath query &apos;{0}&apos; was not found.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryParameterCountMismatch">
            <summary>
              Looks up a localized string similar to Target xpath query &apos;{0}&apos; expects {1} parameters and provided {2}.
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryParameterNameIsBlankWithSuggest">
            <summary>
              Looks up a localized string similar to XPath query parameter name is blank.  (suggested name: &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:InRule.Repository.Infos.Errors.AuthoringErrorMessageTemplates.XpathQueryParameterNameIsInvalidWithSuggest">
            <summary>
              Looks up a localized string similar to Invalid xpath query parameter name: &apos;{0}&apos; (suggested name: &apos;{1}&apos;).
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.CriticalBuildException">
            <summary>
            Exception class for unexpected exceptions withing the build code which are due to defect.  Once an error of this type is thrown, no additional exceptions with internal exceptions should be thrown.
            Once thrown, it should be rethrown all the way to the top of the build where it is logged as a build error info.  Throwing this stops the build.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType">
            <summary>
            Represents the node type of a <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail"/>  syntax expression fragment.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.None">
            <summary>
            Unhandled node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.Literal">
            <summary>
            A literal expression node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.Value">
            <summary>
            A Field/Variable value node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.Function">
            <summary>
            A function node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.UserFunction">
            <summary>
            A vocabulary function node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.AlternativeConcatFunction">
            <summary>
            An alternative concat function node (E.g. &lt;%Field1&gt;)
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.Operator">
            <summary>
            A binary operator node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.UnaryOperator">
            <summary>
            A unary operator node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.ContextOperator">
            <summary>
            A context operator node. (E.g. Entity1:1.Field1)
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.CollectionMemberSet">
            <summary>
            An aggregated collection member set node.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.EvaluationDetailNodeType.ShortCircuitMetadata">
            <summary>
            A short-circuited expression node. (I.e. The rhs of an expression that did not evaluate at runtime)
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.DataTypesAccessor">
            <summary>
            Provides a short cut for accessing primitive types without have to look them up
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.DataTypesAccessor.ResolveToPrimitiveDataType(InRule.Repository.DataType)">
            <summary>
            If the datatype maps to a primitive type, returns that, otherwise throws
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DataTypesAccessor.ResolveCLRTypeToInfoDataType(InRule.Repository.Infos.Builders.InfoLoadEngine,System.String,System.Boolean)">
            <summary>
            Resolves a type name to a info type in the rule application
            Can resolve to both entity types and primitive types.  If not resolved, returns unknown data type
            </summary>
            <param name="clrTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.FunctionIds.AppendFunctionNames(System.Collections.Generic.Dictionary{System.Guid,System.String},System.Type)">
            <summary>
            Reads the static function id fields and adds them to a key to name lookup list
            </summary>
            <param name="functionList"></param>
            <param name="type"></param>
        </member>
        <member name="T:InRule.Repository.Infos.IInfoResolver">
            <summary>
            Represents a type that can resolve an Info identifier to a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> identifier.
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetActiveVersions(System.Collections.Generic.IEnumerable{InRule.Repository.RuleVersion},InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns only the active members of the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetActiveClassifications(System.Collections.Generic.IEnumerable{InRule.Repository.Classifications.ClassificationDef},InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns only the active members of the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetActiveFields(InRule.Repository.FieldDefCollection,InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns only the active members of the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetActiveUDFs(InRule.Repository.UDFs.UdfDefCollection,InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns only the active members of the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetActiveRuleElements(System.Collections.Generic.IEnumerable{InRule.Repository.RuleElements.RuleElementDef},InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns only the active members of the collection
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.DefLoadingExtensions.GetFolderFlattenedActiveDataElements(System.Collections.Generic.IEnumerable{InRule.Repository.RuleRepositoryDefBase},InRule.Repository.Infos.Builders.InfoLoadEngine)">
            <summary>
            Returns the active members recursivly found in ruleset and data element golders
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.Loaders.LogicDefLoadContext">
            <summary>
            Logic def load context
            - carries all the heirarchical flags from logical parent to child
            - has factory methods for adding children to logical containers
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.LogicDefLoadContext.AddChildInfo``1(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Creates a new info and also sets the base def properities
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.LogicDefLoadContext.AddChildInfo``1">
            <summary>
            Creates a new info and sets the dependency flags, activation settings, and any other settings
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.LogicDefLoadContext.ForChildLogicContainer(InRule.Repository.Infos.ILogicalContainerInfo,System.String)">
            <summary>
            Creates a new load context for a child logic info
            </summary>
            <param name="childContainer"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.LogicDefLoadContext.RepairBadElementNames(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.ILogicalContainerInfo)">
            <summary>
            Replaces and duplicate names with auto generated names
            </summary>
            <param name="logicContainer"></param>
        </member>
        <member name="P:InRule.Repository.Infos.Loaders.LogicDefLoadContext.ChildLogic">
            <summary>
            Returns the direct child logic currently loaded into this load context
            Child logic is keyed by the parent container and the logic group in which it sits
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.EntityDefLoader.LoadEntityDataType(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.EntityDef)">
            <summary>
            Creates a container info for the entity
            Does not load fields yet
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.AppendNewFieldInfoFromDef(InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.Infos.ContainerInfo,InRule.Repository.FieldDef)">
            <summary>
            Makes a new field info, sets the container info and common props
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.CreateImplicitParentField(InRule.Repository.Infos.FieldInfo)">
            <summary>
            Creates a parent container field on the target type of the referencing field
            If the data type is of array, creates the parent field on the member type
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.HasContextFieldsLogicOrVocab(InRule.Repository.FieldDef)">
            <summary>
            Returns true if a field has context fields, logic, or vocabularly
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.Load_Entity_Field(InRule.Repository.Infos.Builders.BuildTaskFrame,InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.Infos.ContainerInfo,InRule.Repository.FieldDef,InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Creates a datatype for the composite entity represeting the context and the referenced entity
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.EnsureContextContainer(InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.Infos.FieldInfo,InRule.Repository.Infos.ContainerInfo)">
            <summary>
            If not found, creates a context container linking the entity field's parent context to the entity field's data type context
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.TryResolveCascadedFieldDefs(InRule.Repository.Infos.Builders.InfoLoadEngine,InRule.Repository.CascadedReferenceDef,InRule.Repository.Infos.IInfo,InRule.Repository.FieldDef,InRule.Repository.FieldDef@,InRule.Repository.FieldDef@)">
            <summary>
            Tries to resolve the parent and child fields of a cascaded reference
            If unable to resolve, appends error to the entityFieldInfo and returns false
            </summary>
            <param name="engine"></param>
            <param name="cascadeDef"></param>
            <param name="cascadeOwner"></param>
            <param name="entityFieldDef"></param>
            <param name="sourceFieldDef"></param>
            <param name="targetFieldDef"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.GetImplicitParentContextCascade(InRule.Repository.FieldDef)">
            <summary>
            Figures out if there is an entity to entity parent context cascade setup for this field
            Parent context implicit cascades are not stored on the field, they are stored on the child entity
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Loaders.FieldDefLoader.AppendNewFieldInfo(InRule.Repository.Infos.ContainerInfo,System.String,InRule.Repository.Infos.DataTypeInfo)">
            <summary>
            Creates a new field info, sets the name, full name, and parent container then adds it to the containers field colleciton
            </summary>
            <param name="containerInfo"></param>
            <param name="fieldName"></param>
            <param name="fieldDataType"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Infos.FunctionArgumentExtensions">
            <summary>
            Provides faster string resolution of enum than calling .ToString().
            </summary>
        </member>
        <member name="T:InRule.Repository.Infos.SkipEvalSchemaContextChecksForAuthoredValueAccess">
            <summary>
            Wraps the eval context and flips the switch permitting access to rules by name
            Used when using meta data functions against rule elements
            Without this, author error is created for trying to access rule element
            Upon dispose, sets the flag back to the initial value
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.DictionaryExtensions.FailedToAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Returns true if the key already exists in the dictionary
            Adds the key value combo if the key does not exist
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.DictionaryExtensions.FailedToAdd``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Returns true if the key already exists in the hashset
            Adds the key value combo if the key does not exist
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="hashSet"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.RepositoryDefExtentions.AddBoundAssemblySchemaFromInstanceOfTypes(InRule.Repository.RuleApplicationDef,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Action{InRule.Repository.EndPoints.AssemblyDef.ClassInfo})">
            <summary>
            Adds a bound schema and selects all dependent entities for the type passed in
            </summary>
            <param name="ruleAppDef"></param>
            <param name="schemaName"></param>
            <param name="forTypes"></param>
            <param name="setClassSettings"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.RepositoryDefExtentions.AddCondition(InRule.Repository.DecisionTables.DecisionDef,System.String)">
            <summary>
            Adds a condition node in the next open column with a name matching the display name
            </summary>
            <param name="decisionDef"></param>
            <param name="valueDisplayName"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.RepositoryDefExtentions.AddInlineValueListWithAutoGenDisplayText(InRule.Repository.RuleApplicationDef,System.String,System.String[])">
            <summary>
            Creates a value list and populates the display text with "DisplayTextFor_" prefixing the value
            </summary>
            <param name="ruleApplicationDef"></param>
            <param name="valueListName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Licensing.MachineUtility.Is64BitProcess">
            <summary>
            Gets <b>true</b> if this process is running in a 64 bit
            environment, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:InRule.Repository.Licensing.MachineUtility.Is64BitWindows">
            <summary>
            Gets <b>true</b> if this is a 64 bit Windows.
            </summary>
        </member>
        <member name="P:InRule.Repository.Licensing.MachineUtility.IsWow64Process">
            <summary>
            Returns <b>true</b> if this is a 32-bit process 
            running on a 64-bit server.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.PROCESSOR_CACHE_TYPE.UnifiedCache">
            <summary>
            The cache is unified.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.PROCESSOR_CACHE_TYPE.InstructionCache">
            <summary>
            InstructionThe cache is for processor instructions.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.PROCESSOR_CACHE_TYPE.DataCache">
            <summary>
            The cache is for data.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.PROCESSOR_CACHE_TYPE.TraceCache">
            <summary>
            TraceThe cache is for traces.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.RelationProcessorCore.RelationProcessorCore">
            <summary>
            The specified logical processors share a 
            single processor core.    
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.RelationProcessorCore.RelationNumaNode">
            <summary>
            The specified logical processors are part 
            of the same NUMA node.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.RelationProcessorCore.RelationCache">
            <summary>
            The specified logical processors  share a cache. 
            Windows Server 2003:  This value is not supported 
            until Windows Server 2003 SP1 and Windows XP 
            Professional x64 Edition.
            </summary>
        </member>
        <member name="F:InRule.Repository.Licensing.MachineUtility.RelationProcessorCore.RelationProcessorPackage">
            <summary>
            The specified logical processors share a physical 
            package (a single package socketed or soldered 
            onto a motherboard may contain multiple processor 
            cores or threads, each of which is treated as a 
            separate processor by the operating system). 
            Windows Server 2003:  This value is not 
            supported until Windows Vista.
            </summary>
        </member>
        <member name="M:InRule.Repository.Infos.Builders.IsInvalidFunctionBuilder.BuildEvalToReadIsInvalidForTarget(InRule.Repository.Infos.Builders.BuildEngine,InRule.Repository.Infos.EvalInfo)">
            <summary>
            Creates a function which returns the opposite of the value for the IsValid field
            </summary>
            <param name="engine"></param>
            <param name="evalToTarget"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Infos.Builders._fieldNodeFunctionBuilder.EnsureAuthoredAccessIsPermitted(InRule.Repository.Infos.EvalSchemaContext,InRule.Repository.Infos.EvalInfo)">
            <summary>
            this is a check to make sure when resolving complex paths, variables in another ruleset can not be addressed
            </summary>
            <param name="schemaContext"></param>
            <param name="fieldEvalInfo"></param>
        </member>
        <member name="M:InRule.Repository.Infos.DataTypeInfoExtentions.DataTypeSupportsAuthoredValueAssignment(InRule.Repository.Infos.DataTypeInfo,InRule.Repository.Infos.BuildErrorMessage@)">
            <summary>
            Returns true if elements of this datatype support assigment by author expressions
            System elements of the data type might support assignment, this is just whether or not an author can do it
            </summary>
            <param name="dataType"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.MethodArgumentDef">
            <summary>
            MethodArgument repository definition
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsMethodArguments">
            <summary>
            IContainsMethodArguments base interface (implemented by MethodArgumentDef, EntityDef et al.)
            </summary>
        </member>
        <member name="T:InRule.Repository.MethodArgumentDefCollection">
            <summary>
            Collection of MethodArgumentDef
            </summary>
        </member>
        <member name="T:InRule.Repository.MethodDef">
            <summary>
            Method repository definition
            </summary>
        </member>
        <member name="M:InRule.Repository.MethodDef.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid engine field name.
            </summary>
            <param name="candidateName"></param>
            <returns>Valid engine field name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
        <member name="T:InRule.Repository.MethodDefCollection">
            <summary>
            Collection of MethodDef
            </summary>
        </member>
        <member name="T:InRule.Repository.NameExpressionPairDef">
            <summary>
            General purpose Name Expression pair.
            </summary>
        </member>
        <member name="T:InRule.Repository.NameExpressionPairDefCollection">
            <summary>
            Collection of NameExpressionPairDef
            </summary>
        </member>
        <member name="T:InRule.Repository.SortOrder">
            <summary>
            Identifies the sort order of a list.
            </summary>
        </member>
        <member name="F:InRule.Repository.SortOrder.Ascending">
            <summary>
            Sort in ascending order, low to high.
            </summary>
        </member>
        <member name="F:InRule.Repository.SortOrder.Descending">
            <summary>
            Sort in descending order, high to low.
            </summary>
        </member>
        <member name="F:InRule.Repository.SortOrder.ByIndex">
            <summary>
            In a decision table, use the index to sort.
            </summary>
        </member>
        <member name="T:InRule.Repository.NameSortOrderDef">
            <summary>
            General purpose Name SortOrder pair.
            </summary>
        </member>
        <member name="T:InRule.Repository.NameSortOrderDefCollection">
            <summary>
            Collection of NameSortOrderDef
            </summary>
        </member>
        <member name="T:InRule.Repository.NotificationType">
            <summary>
            Possible values for NotificationType.
            </summary>
        </member>
        <member name="T:InRule.Repository.NotificationMode">
            <summary>
            Denotes the mode in which messages will be logged.
            </summary>
        </member>
        <member name="F:InRule.Repository.NotificationMode.Single">
            <summary>
            Message is logged only once, irrespective of the number of times the rule containing
            notification is fired.
            </summary>
        </member>
        <member name="F:InRule.Repository.NotificationMode.Multiple">
            <summary>
            Message is logged every time the rule containing notification is fired.
            </summary>
        </member>
        <member name="T:InRule.Repository.NotificationDef">
            <summary>
            Specifies a Notification that can be logged using <see cref="T:InRule.Repository.RuleElements.FireNotificationActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.NotificationDef.GetFullName">
            <summary>
            Returns the name of the notification since notifications cannot be addressed directly.
            </summary>
        </member>
        <member name="M:InRule.Repository.NotificationDef.GetNotificationTypeListDisplayNames">
            <summary>
            Get possible values for <see cref="P:InRule.Repository.NotificationDef.NotificationType"/> display list (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="P:InRule.Repository.NotificationDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Notification'.
            </summary>
        </member>
        <member name="P:InRule.Repository.NotificationDef.ParentCollection">
            <summary>
            Gets the parent collection of notifications to which this notification belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.NotificationDef.Message">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the notification message.
            </summary>
        </member>
        <member name="P:InRule.Repository.NotificationDef.MessageText">
            <summary>
            Gets/Sets the <see cref="P:InRule.Repository.NotificationDef.Message"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.IContainsNotifications">
            <summary>
            IContainsNotifications base interface (implemented by EntityDef, NotificationDef et al.)
            </summary>
        </member>
        <member name="T:InRule.Repository.NotificationDefCollection">
            <summary>
            Collection of NotificationDef.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleApplicationDef">
            <summary>
            Specifies a Rule Application def.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IContainsRuleSets">
            <summary>
            Represents a type that contains <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>s)
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.IContainsRuleSets.GetAllRuleSets">
            <summary>
            Get all rule sets for this def.
            </summary>
            <returns>The list of RuleSet collections</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.IContainsRuleSets.RuleSets">
            <summary>
            Gets or sets the rule sets.
            </summary>
            <value>The rule sets.</value>
        </member>
        <member name="F:InRule.Repository.RuleApplicationDef.CurrentCompatibilityVersion">
            <summary>
            Indicates the Forward Compatibility version of repository structure. Used by runtime to determine Forward Compatibility (loading newer ruleapp in older runtime).
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.#ctor">
            <overloads>Creates a new <see cref="T:InRule.Repository.RuleApplicationDef"/></overloads>
            <summary>
            Create a new unnamed <see cref="T:InRule.Repository.RuleApplicationDef"/>
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:InRule.Repository.RuleApplicationDef"/> with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetContentCode">
            <summary>
            Get Content Hashcode for ruleapp. Use to determine whether content has changed.
            </summary>
            <remarks>
            The following are ignored when determining whether content has changed:
            <list type="bullet">
            	<item><description>/RuleApplicationDef/AuthoringSettings/ModifiedDateTime</description></item>
            	<item><description>/RuleApplicationDef/AuthoringSettings/CreatedDateTime</description></item>
            	<item><description>/RuleApplicationDef/AuthoringSettings/SelectedAuthoringItemGuid</description></item>
            	<item><description>//@AuthoringIsExpanded</description></item>
            	<item><description>//@Revision</description></item>
            	<item><description>//@Guid</description></item>
            	<item><description>//@Id</description></item>
            	<item><description>//@RepositoryAssemblyFileVersion</description></item>
            	<item><description>Newline-format differences in innertext (all are mapped to same newline format)</description></item>
            </list>
            <para>Non-top-level Guids are ignored since irAuthor doesn't currently preserve many sub-element guids, difficult to preserve these.</para>
            </remarks>
            <returns>32bit hashcode </returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.LoadXml(System.String)">
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/> from XML.
            </summary>
            <param name="xml">The XML to use to create the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <returns>A new <see cref="T:InRule.Repository.RuleApplicationDef"/> object.</returns>
            <exception cref="T:InRule.Repository.RuleAppUpgraderException">If any upgrader issues.</exception>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">If invalid XML.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.LoadXml(System.String,System.DateTime)">
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/> from XML.
            </summary>
            <param name="xml">The XML to use to create the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <param name="lastValidateDateTime">Last validation date time.</param>
            <returns>A new <see cref="T:InRule.Repository.RuleApplicationDef"/> object.</returns>
            <exception cref="T:InRule.Repository.RuleAppUpgraderException">If any upgrader issues.</exception>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">If invalid XML.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Load(System.IO.Stream)">
            <overloads>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </overloads>
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/> from a stream.
            </summary>
            <param name="stream">The stream to use to create the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <returns>A new <see cref="T:InRule.Repository.RuleApplicationDef"/> object.</returns>
            <exception cref="T:InRule.Repository.RuleAppUpgraderException">If any upgrader issues.</exception>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">If invalid XML.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Load(System.Xml.XmlReader)">
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/> from an xml reader.
            </summary>
            <param name="reader">The reader to use to create the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <returns>A new <see cref="T:InRule.Repository.RuleApplicationDef"/> object.</returns>
            <exception cref="T:InRule.Repository.RuleAppUpgraderException">If any upgrader issues.</exception>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">If invalid XML.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Load(System.String)">
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleApplicationDef"/> from a file.
            </summary>
            <param name="filename">The name of the file to use to create the <see cref="T:InRule.Repository.RuleApplicationDef"/>.</param>
            <returns>A new <see cref="T:InRule.Repository.RuleApplicationDef"/> object.</returns>
            <exception cref="T:InRule.Repository.RuleAppUpgraderException">If any upgrader issues.</exception>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">If invalid XML.</exception>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If file does not exist.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Load(System.String,System.Boolean)">
            <summary>
            Created RuleApplicationDef from a file and provides the option of resetting
            the license cache. This is in response to case 11317, so this method is
            intended for the installer.
            </summary>
            <param name="filename"></param>
            <param name="resetLicenseCache">License cache is reset. This is useful for the installer since a license key is provided by the user.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Load(System.String,System.DateTime)">
            <summary>
            Loads a rule application def from file, specifying the date/time the ruleapp's LastValidateDateTimeUtc should
            be compared to.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleApplicationDef.CurrentFeatureVersion">
            <summary>
            Indicates the "Feature" version of repository structure. Used by runtime to determine backward compatibility.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Copy">
            <summary>
            Creates a copy of this rule application def (same guid).
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetAllRuleSets">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s containing all Independent Rulesets authored in this Rule application.
            The list is a flattened list that also contains all the rule sets located in sub-folders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Validate(System.Boolean)">
            <overloads>
            Validate a ruleapp for global namespace collisions, etc.
            </overloads>		
            <summary>
            Validate a ruleapp for global namespace collisions, etc. using useOriginalContentCode as specified
            </summary>
            <returns>Null if ok, validation message string otherwise.</returns>
            <remarks>The following validations are performed:
            <para>**Duplicate name checks:</para>
            <list type="bullet">
            	<item><description>No two entities within a ruleapp may have the same name.</description></item>
            	<item><description>No entity items may have the same name as any data or endpoint items</description></item>
            	<item><description>No field names may be reused at a given entity folder level (but field names may be reused between different levels)</description></item>
            	<item><description>No field names may have the same name as any data or endpoint items</description></item>
            	<item><description>No two actions defined in an entity-scope actions folder may have the same name.</description></item>
            	<item><description>No actions defined in an entity-scope actions folder may have the same name as any data or endpoint items</description></item>
            	<item><description>No two user interface containers defined in an entity User Interface folder may have the same name.</description></item>
            	<item><description>No user interface containers defined in an entity User Interface folder may have the same name as any data or endpoint items</description></item>
            	<item><description>No two rule sets for a given entity may have the same name.</description></item>
            	<item><description>No rule sets may have the same name as any data or endpoint items</description></item>
            	<item><description>No rule sets for an entity may have the same name as any action folder actions for the entity.</description></item>
            	<item><description>No two rule element names (action or rule) within a ruleset may be reused at a given folder level.</description></item>
            	<item><description>No two data folders may have the same name.</description></item>
            	<item><description>No two <see cref="P:InRule.Repository.RuleApplicationDef.Categories"/> may have the same name.</description></item>
            	<item><description>Note that rule element names are not checked for duplication except at the peer folder level, since they are not referenced anywhere.</description></item>
            	<item><description>Note that data subfolder items are included in the data names list.</description></item>
            </list>		
            <para>**Field validity for names:</para>
            <list type="bullet">
            	<item><description>All endpoints must have valid (non-blank and a-z, 0-9, _) names.</description></item>
            	<item><description>All data elements must have valid (non-blank and a-z, 0-9, _) names.</description></item>
            	<item><description>All entities must have valid (non-blank and a-z, 0-9, _) names.</description></item>
            	<item><description>All fields must have valid (non-blank and a-z, 0-9, _) names.</description></item>
            	<item><description>All actions defined in an entity-scope actions folder must have valid (non-blank and a-z, 0-9, _) names.</description></item>
            	<item><description>All ruleset names must be valid if non-blank (a-z, 0-9, _)</description></item>
            	<item><description>Note that ruleset-scope rule element names (action or rule) are not checked for "valid" naming as with other items above.</description></item>
            </list>		
            <para>**Field validity for other params:</para>
            <list type="bullet">
            	<item><description>SQL Query parameter names must be of the form @varname, where varname is comprised only of digits, letters or the underscore _</description></item>
            	<item><description>SQL Query parameter types names must be non-blank</description></item>
            	<item><description>Any entities referenced by fields as their type must exist.</description></item>
            </list>		
            <para>**Schema Definition Endpoints:</para>
            <list type="bullet">
            	<item><description>There may be no more than one active Schema Definition Endpoint.</description></item>
            	<item><description>The schema-import-selected entities and fields must match 1:1 with those in the ruleapp, including name and type.</description></item>
            </list>		
            </remarks>
            <param name="useOriginalContentCode">Indicates whether a new content code is generated if no errors are found. This value is usually false.</param>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.Validate">
            <summary>
            Validate a ruleapp for global namespace collisions, etc., forcing recalc of content code
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetSchemaEndPoints">
            <summary>
            Gets an array containing all Schema-defining endpoints.
            </summary>
            <returns>an array containg all Schema-defining endpoints, if none are defined the array will be zero-length.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.ApplySchema(InRule.Repository.EndPoints.ISchemaEndPoint)">
            <overloads>
            Apply schema (defined by an endpoint) to ruleapp
            </overloads>
            <param name="schemaEndPoint"></param>
            <returns>List of changes/drops made to ruleapp, if any.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.ApplySchema(System.String)">
            <param name="schemaEndPointName"></param>
            <returns>List of changes/drops made to ruleapp, if any.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.SetVersionToLatest">
            <summary>
            Sets schema version to latest "Feature" and "Compatibility" version #s.
            </summary>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item>
                    <description><see cref="P:InRule.Repository.RuleApplicationDef.CompatibilityVersion"/> set to current "Compatibility" repository schema version #.</description>
            		</item>
            		<item>
                    <description><see cref="P:InRule.Repository.RuleApplicationDef.FeatureVersion"/> set to current "Feature" repository schema version #.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.SaveToFile(System.String)">
            <overloads>
            Save ruleapp to file.
            </overloads>
            <summary>
            Validate, then save.
            </summary>
            <param name="filename">The path to use when saving the file.</param>
            <exception cref="T:InRule.Repository.ValidationFailureException">Thrown if validation fails.</exception>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If a permissions or other problem prevents saving.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.SaveToFile(System.String,System.Boolean)">
            <summary>
            Save specifying filename, whether to to validate before saving.
            </summary>
            <param name="filename">The path to use when saving the file.</param>
            <param name="validate">Indicates whether validation will be attempted before saving.</param>
            <remarks>
            	<para>PostConditions:</para>
            	<list type="number">
            		<item><description><see cref="P:InRule.Repository.RuleApplicationDef.CompatibilityVersion"/> set to current "Compatibility" repository schema version #.</description></item>
            		<item><description><see cref="P:InRule.Repository.RuleApplicationDef.FeatureVersion"/> set to current "Feature" repository schema version #.</description></item>
            		<item><description><see cref="P:InRule.Repository.RuleApplicationAuthoringSettings.ModifiedDateTime"/> set to current time.</description></item>
            	</list>
            </remarks>
            <exception cref="T:InRule.Common.Exceptions.RuleException">If a permissions or other problem prevents saving.</exception>
            <exception cref="T:InRule.Repository.ValidationFailureException">Thrown when ="validate" is true and validation fails.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetXml">
            <summary>
            Get XML for a rule application.No formatting is used by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetXml(System.Boolean)">
            <overloads>
            Get XML for rule application.
            </overloads>
            <summary>
            Get XML for ruleapp specifying if formatting is to be used.
            </summary>
            <returns>Xml string</returns>
            <remarks>
            <see cref="M:InRule.Repository.RuleApplicationDef.Validate"/> should generally be called beforehand to at least warn of any validation problems.
            	<para>PostConditions:</para>
            	<list type="number">
            		<item><description><see cref="P:InRule.Repository.RuleApplicationDef.CompatibilityVersion"/> set to current "Compatibility" repository schema version #.</description></item>
            		<item><description><see cref="P:InRule.Repository.RuleApplicationDef.FeatureVersion"/> set to current "Feature" repository schema version #.</description></item>
            		<item><description><see cref="P:InRule.Repository.RuleApplicationAuthoringSettings.ModifiedDateTime"/> set to current time.</description></item>
            	</list>
            </remarks>
            <exception cref="T:System.SystemException">On any problem saving.</exception>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write Rule application Xml to specified writer, omitting empty strings, 0-length arrays etc.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetEndPointsDisplayNames(System.Type)">
            <summary>
            Get available entity-scope endpoints display list  (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetDataElementsDisplayNames(System.Type)">
            <summary>
            Get available entity-scope data elements display list  (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.IsModified">
            <summary>
            Determine if RuleApp is modified since "Load", "LoadXml" or "Create" call.
            </summary>
            <remarks><seealso cref="M:InRule.Repository.RuleApplicationDef.GetContentCode"/>, which may be used to get a content-uniqueness code at any time.</remarks>
            <returns>True if has been modified.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.InitNonPersistedProperties">
            <summary>
            Initializes non-persisted properties (including some used by authoring tools).
            </summary>
            <remarks>
            Must be called if ruleapp de-serialized outside the repository functions (<see cref="M:InRule.Repository.RuleRepositoryServices.LoadRuleAppXml(System.String)"/>
            <para>PostConditions:</para>
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.LookupItem(System.Guid)">
            <summary>
            Lookup item by its <see cref="P:InRule.Repository.RuleRepositoryDefBase.Guid"/>.
            </summary>
            <param name="guid"></param>
            <returns>Def if found, otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.LookupItemByFullName(System.String)">
            <summary>
            Lookup item by its fullname(dot-notation like RuleAppName.EntityName.FieldName)
            </summary>
            <param name="fullName"></param>
            <returns>Def if found, otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.LookupItem(System.String)">
            <summary>
            Lookup item by its name.
            </summary>
            <param name="name"></param>
            <returns>Def if found, otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.SetSelectedAuthoringItem(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Set specified model node as the last-selected node.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetSelectedAuthoringItem">
            <summary>
            Get last-selected model node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.UsesObjectState">
            <summary>
            Determine whether this rule application has an active assembly endpoint def in it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.ExportInternalSchemaToXsd(System.IO.FileInfo,System.Boolean)">
            <summary>
            Exports all internal-schema entities to XSD
            </summary>
            <param name="targetXsd">Target path to which to write out XSD. Is written even if compile errors occur.</param>
            <param name="useSeq">Use sequence (strict ordering) of elements.</param>
            <returns>0-length array if no xsd-compile errors; otherwise one or more XSD compile errors</returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetAllRuleElements">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>(excluding Actions) for this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleApplicationDef.GetRuleSet(System.String)">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>) contained in this def as specified by its name.
            </summary>
            <param name="ruleSetName">the name of the rule set to retrieve</param>
            <returns>the rule set found or null if not found</returns>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.UpgraderMessageList">
            <summary>
            Retrieves any information logged during the  Upgrade process.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.RuntimeEngine">
            <summary>
            Denotes the rule engine this rule application was initially authored to run against
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleApplicationDef.DefRenaming">
            <summary>
            Occurs before a def is renamed. 
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleApplicationDef.DefRenamed">
            <summary>
            Occurs after a def has been renamed.
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleApplicationDef.DefDisplayNameChanged">
            <summary>
            Occurs after a display name has changed
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleApplicationDef.DefIncludeInBusinessLanguageChanged">
            <summary>
            Occurs after an IncludeInBusinessLanguage flag has been changed on any given def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.FeatureVersion">
            <summary>
            "Feature" version of repository - used to determine backward compatibility
            	(newer runtime runs upgraders as needed on older ruleapp schema).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.CompatibilityVersion">
            <summary>
            "Compatibility" version of repository - used to determine direct forward compatibility
            	(whether older runtime can load and run a newer repos schema ruleapp).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.AuthoringSettings">
            <summary>
            Settings specific to authoring (not used by runtime).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.EnableXsdValidationOnInternalSchema">
            <summary>
            Specifies whether XSD schema validation will be performed on load for internal-schema entities.
            </summary>
            <remarks>
            <para>The default setting is true, in which case any fields in loaded XML for an internal-schema entity that
            are not present as Entity StateLocation fields will result in an xsd validation exception.</para>
            <para>When this setting is false, any extraneous fields will simply be ignored on load, with no error.</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.AllowGetXmlWithDupInstancesOnInternalSchema">
            <summary>
            Specifies whether Xml rendering of duplicate instances is allowed at runtime for internal schema entities.
            </summary>
            <remarks>
            <para>The default setting is false, in which case an error occurs on Xml render
            when a given instance (EntityId) appears more than once in the hierarchical graph being rendered.</para>
            <para>When this setting is true, duplicate instances are rendered with no error - note that if this xml is loaded back in, it results in distinct
            instances (EntityIds) rather than shared ones.</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.AllowRuleInactivation">
            <summary>
            Indicates if a def in the Rule application can be marked inactive(disabled).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.UseRuleVersions">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.HasContextVersionSettings">
            <summary>
            Indicates if this Rule application has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.RuntimeErrorHandlingPolicy">
            <summary>
            Sets the RuntimeErrorHandlingPolicy that is used to determine how the engine proceeds when it encounters an error.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.Entities">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.EntityDefCollection"/> containing all entities in this Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.HasLangaugeRules">
            <summary>
            Indicates if any Entity/Independent Ruleset in this rule application contains a <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.RuleSets">
            <summary>
            Gets/Sets <see cref="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection"/> containing all Independent <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>)/<see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/> in the Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.EntitiesRoot">
            <summary>
            Gets/Sets the logical representation of the owner of the collection of entities. Used primarily for indicating Entities folder was last selected folder.
            The <see cref="P:InRule.Repository.RuleElements.EntityRootDef.Entities"/> property off of 
            <see cref="T:InRule.Repository.RuleElements.EntityRootDef"/> returns the same thing as the 
            <see cref="P:InRule.Repository.RuleApplicationDef.Entities"/> property on <see cref="T:InRule.Repository.RuleApplicationDef"/>
            which is the preferred way to access the entities.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.DataElementsRoot">
            <summary>
            Gets or sets the logical representation of the owner of the collection of data elements. 
            The <see cref="P:InRule.Repository.DataElementsRootDef.DataElements"/> property off of 
            <see cref="T:InRule.Repository.DataElementsRootDef"/> returns the same thing as the 
            <see cref="P:InRule.Repository.RuleApplicationDef.DataElements"/> property on <see cref="T:InRule.Repository.RuleApplicationDef"/>
            and is the preferred way to access the data elements.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.EndPointsRoot">
            <summary>
            Provided for manipulation of logical "EndPoints" folder (both Schemas and Endpoints are part of <see cref="P:InRule.Repository.RuleApplicationDef.EndPoints"/> collection which actually stores them).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemasRoot">
            <summary>
            Provided for manipulation of logical "Schemas" folder (both Schemas and Endpoints are part of <see cref="P:InRule.Repository.RuleApplicationDef.EndPoints"/> collection which actually stores them).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.DataElements">
            <summary>
            Gets/Sets the collection of data elements in the rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.EndPoints">
            <summary>
            Gets/Sets the collection of Endpoints in the Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.CategoryRoot">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CategoryRootDef"/> containing all the Categories available in the Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.Categories">
            <summary>
            Gets/Sets a collection of categories authored in this Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.LastValidateContentCode">
            <summary>
            The most recent content code correlated with a successful call to "Validate".
            </summary>
            <exclude />
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.Name">
            <summary>
            Gets/Sets the ruleapplication name.
            Returns 'NewApplication' as default name if no name specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.IsolatedTestDomain">
            <summary>
            Indicates if irVerify will run in a separate AppDomain.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Rule Application'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.IsRootItem">
            <summary>
            Indicates if this def is a root-only placeholder for tree-navigation purposes.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.RuleAppSerializeInProgress">
             <summary>
             Used to flag when serialization in progress, to optimize for excluding empty strings and empty arrays in the serialized xml
             </summary>
             <remarks>
             "GetXml" or "SaveToFile" must be used to get this optimized behavior, rather than external serialization.
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.OriginalContentCode">
            <summary>
            The original hashcode for this def from when it was opened.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.UdfLibraries">
            <summary>
            Gets/Sets a collection of udf libraries authored in this Rule application.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaGuid">
            <summary>
            Uniquely identifies ruleapp schema in catalog instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaRevision">
            <summary>
            Internal schema revision number (in version-control history), within a specific catalog instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaPublicRevision">
            <summary>
            External schema revision number (in version-control history), within a specific catalog instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaCatalogState">
            <summary>
            Gets or sets the state of the catalog.
            </summary>
            <value>The state of the catalog.</value>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.CatalogEditState">
            <summary>
            indicating whether ruleapp from catalog is in edit state.
            </summary>
            <value><c>true</c> if [catalog edit state]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.CatalogPartialCheckinAllowed">
            <summary>
            Indicating whether ruleapp partial checkin is allowed.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaSecurityPermissions">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.SecurityPermissionCollection"/> for the rule application schema.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationDef.SchemaRelevantPermissions">
            <summary>
            Gets a list of <see cref="T:InRule.Security.RuleUserRolePermissions"/> applicable to the rule application schema.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ActivateCategoryActionDef">
            <summary>
            Action which sets elements assigned to the target category as active.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateCategoryActionDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ActivateCategoryActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateCategoryActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action Name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateCategoryActionDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying Action Name and Target Category Name used to activate elements assigned to it.
            </summary>
            <param name="name"></param>
            <param name="targetCategoryName"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.RuleActionType">
            <summary>
            Returns Action type as 'ActivateCategory'
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Activate Rule Sets By Category'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;Activate Rule Sets By Category&gt; or 
            'Activate Rule Sets By Category &lt;TargetCategoryName&gt;' if <see cref="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.Target"/> not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateCategoryActionDef.Target">
            <summary>
            Gets/Sets Target category name.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetActivationType.ByName">
            <summary>
            Activates or deactivates a rule set for all applicable Entity instances.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetActivationType.ByInstance">
            <summary>
            Activates or deactivates a rule set only for the current Entity instance.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ActivateRuleSetActionDef">
            <summary>
            Action which sets a rule set as active.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ActivateRuleSetActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action name.
            </summary>
            <param name="name">The name of the action.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying Action Name and Target RuleSet Name to be activated.
            </summary>
            <param name="name"></param>
            <param name="targetRuleSetName"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.#ctor(System.String,System.String,InRule.Repository.RuleElements.RuleSetActivationType)">
            <summary>
            Create def specifying Action Name, Target RuleSet Name to be activated and ActivationType.
            </summary>
            <param name="name"></param>
            <param name="targetRuleSetName"></param>
            <param name="activationType"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.GetTargetRuleSet">
            <summary>
            Gets the target <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> which is set active by this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ActivateRuleSetActionDef.GetPossibleRuleSets">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s which can be set to active by this action.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.RuleActionType">
            <summary>
            Returns Action type as 'ActivateRuleSet'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Activate Rule Set'
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Activate Rule Set&gt; or
            'Activate Rule Set &lt;TargetRuleSetName&gt;' if <see cref="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.Target"/> not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.Target">
            <summary>
            Gets/Sets the name of the target Ruleset to activate.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ActivateRuleSetActionDef.ActivationType">
            <summary>
            Activate the RuleSet on the current Entity instance, versus on all applicable Entity instances.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.AddCollectionMemberActionDef">
            <summary>
            Action which adds a collection member to the specified collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.AddCollectionMemberActionDef.#ctor(System.String)">
            <summary>
            Create def specifying the Collection Name to add a member to.
            </summary>
            <param name="collectionName"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.RuleActionType">
            <summary>
            Returns Action Type as 'AddCollectionMember'
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.MemberValues">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which specifies 
            the name and value expression for each field on the collection member being added.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.FromEntityFieldName">
            <summary>
            Gets/Sets an entity field to copy from (optional)
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.Collection">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the collection to which member is added.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.CreateNewLinkedToLinked">
            <summary>
            Specifies that when <see cref="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.Collection"/> is linked as well as <see cref="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.FromEntityFieldName"/>, create new then copy rather than referencing <see cref="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.FromEntityFieldName"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.CollectionName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.Collection"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Add Collection Member'
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Add Collection Member&gt; or
            'Add member to &lt;CollectionName&gt;' if <see cref="P:InRule.Repository.RuleElements.AddCollectionMemberActionDef.Collection"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ClearCollectionActionDef">
            <summary>
            Action which removes all members from the specified collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ClearCollectionActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Collection name to remove members from.
            </summary>
            <param name="collectionName"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.RuleActionType">
            <summary>
            Returns Action type as 'ClearCollection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.Collection">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the collection which is cleared.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.CollectionName">
            <summary>
            Gets/Sets the FormulaText property of the <see cref="P:InRule.Repository.RuleElements.ClearCollectionActionDef.Collection"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Clear Collection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ClearCollectionActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Clear Collection&gt; or
            'Clear &lt;CollectionName&gt;' if <see cref="P:InRule.Repository.RuleElements.ClearCollectionActionDef.Collection"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.CopyCollectionActionDef">
            <summary>
            Action which copies members from one collection to another.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.CopyCollectionActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.CopyCollectionActionDef.#ctor(System.String,System.String,System.String)">
            <summary>
            Create def specifying Action name, name of collection to copy from and name of collection to copy to.
            </summary>
            <param name="name"></param>
            <param name="fromCollectionName"></param>
            <param name="toCollectionName"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.RuleActionType">
            <summary>
            Returns Action type as 'CopyCollection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.FromCollection">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the collection to copy from.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.ToCollection">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the collection to copy to.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.CopyFromCollectionMemberFilter">
            <summary>
            Specifies optional filter to apply against <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.FromCollection"/> members.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.CreateNewLinkedToLinked">
            <summary>
            Indicates that when both <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.FromCollection"/> and <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.ToCollection"/> are linked, create new then copy rather than referencing <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.FromCollection"/> member instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.SortFields">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameSortOrderDefCollection"/> of zero or more fields to sort on.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.AppendToTargetCollection">
            <summary>
            Indicates that <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.ToCollection"/> should be appended-to rather than cleared first.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Copy Collection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyCollectionActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Copy Collection&gt; or
            'Copy &lt;FromCollectionName&gt; to &lt;ToCollectionName&gt;' if <see cref="P:InRule.Repository.RuleElements.CopyCollectionActionDef.FromCollection"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.CopyEntityActionDef">
            <summary>
            Action which copies one entity to another.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.CopyEntityActionDef.#ctor(System.String,System.String)">
            <summary>
            Create a def specifying name of the entity to copy from and name of the entity to copy to.
            </summary>
            <param name="copyFrom"></param>
            <param name="copyTo"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.RuleActionType">
            <summary>
            Returns Action type as 'CopyEntity'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyFromField">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the entity to copy from.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyToField">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the entity to copy to.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyFromFieldName">
            <summary>
            Gets/Sets the FormulaText property of the <see cref="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyFromField"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyToFieldName">
            <summary>
            Gets/Sets the FormulaText property of the <see cref="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyToField"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Copy Entity'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.CopyEntityActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Copy Entity&gt; or
            'Copy &lt;FromEntityName&gt; to &lt;ToEntityName&gt;' 
            if <see cref="P:InRule.Repository.RuleElements.CopyEntityActionDef.CopyFromField"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.DeactivateCategoryActionDef">
            <summary>
            Action which sets elements assigned to the target category as inactive.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeactivateCategoryActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeactivateCategoryActionDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying Action name and Target Category name.
            </summary>
            <param name="name"></param>
            <param name="targetCategoryName"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.RuleActionType">
            <summary>
            Retturns Action type as 'DeactivateCategory'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Deactivate Rule Sets By Category'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;Deactivate Rule Sets By Category&gt; or 
            'Deactivate Rule Sets By Category &lt;TargetCategoryName&gt;' if <see cref="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.Target"/> not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateCategoryActionDef.Target">
            <summary>
            Gets/Sets the Target Category Name.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.DeactivateRuleSetActionDef">
            <summary>
            Action which sets a Ruleset as inactive.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying Action name and Target Ruleset name.
            </summary>
            <param name="name"></param>
            <param name="targetRuleSetName"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.GetPossibleRuleSets">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>s which can be set inactive by this action.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.RuleActionType">
            <summary>
            Returns Action type as 'DeactivateRuleSet'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Deactivate Rule Set'
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Deactivate Rule Set&gt; or
            'Deactivate Rule Set &lt;TargetRuleSetName&gt;' if <see cref="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.Target"/> not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.Target">
            <summary>
            Gets/Sets the name of the target Ruleset to deactivate.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeactivateRuleSetActionDef.ActivationType">
            <summary>
            Deactivate the RuleSet on the current Entity instance, versus on all applicable Entity instances.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.DeclareVariableActionDef">
            <summary>
            Action which declares a variable that can be used in rules.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeclareVariableActionDef.#ctor">
            <summary>
            Create a new instance of the <see cref="T:InRule.Repository.RuleElements.DeclareVariableActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeclareVariableActionDef.#ctor(System.String,InRule.Repository.DataType)">
            <summary>
            Create a new instance of the <see cref="T:InRule.Repository.RuleElements.DeclareVariableActionDef"/> specifying name and data type.
            </summary>
            <param name="name">The name of this variable.</param>
            <param name="dataType">The <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataType"/> of this variable.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeclareVariableActionDef.#ctor(System.String,InRule.Repository.DataType,System.String)">
            <summary>
            Create a new instance of the <see cref="T:InRule.Repository.RuleElements.DeclareVariableActionDef"/> specifying variable name, datatype and name of the entity.
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <param name="dataTypeEntityName"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.DeclareVariableActionDef.GetDataTypeListDisplayNames">
            <summary>
            Get possible values for <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataType"/> display list (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            (the displayed datatype or entityname)
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            (the underlying <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataType"/> or dummy value-keys Entity0, Entity1...).
            </returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.RuleActionType">
            <summary>
            Returns Action type as 'DeclareVariable';
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataType">
            <summary>
            Gets/Sets the datatype of the variable.
            On Set raises event <see cref="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler"/> event.
            </summary>
        </member>
        <member name="E:InRule.Repository.RuleElements.DeclareVariableActionDef.DataTypeChanged">
            <summary>
            Occurs after datatype has changed
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataTypeEntityName">
            <summary>
            Gets/Sets the Entity name for an Entity type variable.
            On Set raises the <see cref="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler"/> event.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DefaultValue">
            <summary>
            Gets/Sets the variable value.
            </summary>
            <remarks>
            By default this is null, which means no default value (value.IsNull == true at runtime).
            If == <see cref="F:System.String.Empty"/>, the default value for the <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DataType"/> will be used 
            (0, 0001-01-02, "" etc.).
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.UseDefaultValue">
            <summary>
            Gets a Boolean value indicating if <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.DefaultValue"/> is set for the variable.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.IsValueTypeField">
            <summary>
            Gets a Boolean value indicating variable has a primitive data type. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.IsAnEntityDataType">
            <summary>
            Gets a Boolean value indicating variable has a Complex/Entity data type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Declare Variable'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.DeclareVariableActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;Variable&gt; or 
            'Variable &lt;Name&gt;(Entity:&lt;EntityName&gt;)' if <see cref="P:InRule.Repository.RuleElements.DeclareVariableActionDef.IsAnEntityDataType"/> or else
            'Variable &lt;Name&gt;(&lt;DataType&gt;)'.
            </summary>
            <remarks>Added the code of check datatype of string. if the type is string then we return the name</remarks>
        </member>
        <member name="T:InRule.Repository.RuleElements.EntityRootDef">
            <summary>
            Authoring root folder for Rule Sets. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.EntityRootDef.IsRootItem">
            <summary>
            Indicates if this def is  a root-only placeholder for tree-navigation purposes.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExclusiveRuleDef">
            <summary>
            Specifies an Exclusive(if...Then...Else) Rule.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IContainsConditions">
            <summary>
            Represents a type that contains SimpleRuleDefs.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IContainsConditions.Conditions">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> of this type that contains conditions.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.IRuleFlowCondition.Condition">
            <summary>
            Returns the condition definition.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.IRuleFlowCondition.TrueRules">
            <value>
            Returns the rules to run when the condition is true.
            </value>
        </member>
        <member name="P:InRule.Repository.RuleFlow.IRuleFlowCondition.FalseRules">
            <value>
            Returns the exclusive rules to run when the condition is false.
            </value>
        </member>
        <member name="P:InRule.Repository.RuleFlow.IRuleFlowCondition.IsExclusive">
            <summary>
            Returns whether the true rules and false rules are exclusive
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExclusiveRuleDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExclusiveRuleDef.#ctor(System.String)">
            <summary>
            Create a def specifying rule name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExclusiveRuleDef.GetAllRootItems">
            <summary>
            Gets a list of all <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> items authored under this rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExclusiveRuleDef.GetAllChildCollections">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/> containing all <see cref="P:InRule.Repository.RuleElements.ExclusiveRuleDef.Conditions"/> 
            and <see cref="P:InRule.Repository.RuleElements.ExclusiveRuleDef.DefaultSubRules"/> of this rule.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.IsAllowedInParentContext">
            <summary>
            Indicates if this rule can be authored under the Ruleset where it is defined.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.RuleElementType">
            <summary>
            Returns element type as 'ExclusiveRule'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.DefaultSubRulesRoot">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDefaultRootDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.Conditions">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> containing all Conditions under this rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.DefaultSubRules">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.RuleElementDefCollection"/> containing all default sub rules for this def.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.ParentCollection">
            <summary>
            Gets the parent collection of ruleelements to which this rule belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;If Then Else&gt;
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'If Then Else'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.HasContextVersionSettings">
            <summary>
            Indicates if this rule has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExclusiveRuleDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the rule.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExclusiveRuleDefaultRootDef">
            <summary>
            Authoring root folder for Exclusive Rule default node. Is used solely to store comments specific to the default node.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteActionDef">
            <summary>
            Action which invokes a specified Ruleset/Action.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IExecuteActionDef">
            <summary>
            Represents a type that implements the <see cref="T:InRule.Repository.RuleElements.IExecuteActionDef"/> and supports executable actions.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteActionDef.Target">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.CalcDef"/> for a type which implements the <see cref="T:InRule.Repository.RuleElements.IExecuteActionDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteActionDef.TargetName">
            <summary>
            Gets or sets the name of the target for this type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IExecuteActionDef.ParameterValues">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> which contains parameter values 
            used when this action invokes an Independent Ruleset with its linked entity field arguments.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionDef.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionDef.#ctor(System.String)">
            <summary>
             Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/> specifying Action name.
            </summary>
            <param name="name">The name of this action.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionDef.#ctor(System.String,System.String)">
            <summary>
             Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/> specifying Action name, target RuleSet/Action name.
            </summary>
            <param name="name">The name of this action.</param>
            <param name="targetName">The target RuleSet/Action to execute.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionDef.GetOtherRuleSetsAndEntityActionsDisplayNames">
            <summary>
            Get available entity-scope actions and rulesets display list  (e.g., combo box), other than this one.
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionDef.GetSyncedParameterValuesList">
            <summary>
            Get <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> sync'd with latest <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>s.
            </summary>
            <returns>Newly created <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/>. Is typically assigned to <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> by caller.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.RuleActionType">
            <summary>
            Returns action type as 'ExecuteAction'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.Target">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the target <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>)/Action.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.ParameterValues">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> which specifies all input parameters for the target <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.TargetName">
            <summary>
            Gets/Sets the target <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>)/Action name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute RuleSet / Action'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;Execute&gt; or
            'Apply &lt;Targetname&gt;' if <see cref="P:InRule.Repository.RuleElements.ExecuteActionDef.Target"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteActionParamDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/>.
            Defines a parameter required to invoke RuleSets using ExecuteActionDef. 
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDef.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> specifying parameter name and value expression.
            </summary>
            <param name="parameterName">The name of the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> to map to.</param>
            <param name="parameterExpression">The expression to pass to this parameter.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDef.ContainsText(InRule.Repository.RuleTextSearchContext,System.String,System.Boolean)">
            <summary>
            Searches all searchable fields of item for specified text.
            </summary>
            <param name="searchMode">The types of content to search while looking for specified search text.</param>
            <param name="searchText">The text to search for.</param>
            <param name="recurseIntoChildren">Whether to include children in search.</param>
            <returns>True if text found.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionParamDef.ArgValue">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> value expression.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionParamDef.ArgExpression">
            <summary>
            Gets or sets the <see cref="P:InRule.Repository.RuleElements.ExecuteActionParamDef.ArgValue"/>.FormulaText which defines the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> value expression.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef">
            <summary>
            Action which executes an Explicit RuleSet for each member of an Entity type Collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef"/>.
            </summary>
            <param name="name">The name of this action.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef"/>.
            </summary>
            <param name="name">The name of this action.</param>
            <param name="targetName">The target RuleSet/Action to execute.</param>
            <param name="collectionName">The Entity collection to execute against.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.GetSyncedParameterValuesList">
            <summary>
            Get <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> synchronized with latest <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>s.
            </summary>
            <returns>Newly created <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/>. Is typically assigned to <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> by caller.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.RuleActionType">
            <summary>
            Returns action type as 'ExecuteMemberRuleSet'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.Collection">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the collection to run rules across.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.CollectionName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.Collection"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.RuleSet">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the Ruleset to run on each collection member
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.RuleSetName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.RuleSet"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.FilteredBy">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines expression to filter collection members.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.FilteredByExpression">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.FilteredBy"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute Member Rule Set'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;Execute Member Rule Set&gt; or
            'Execute Member Rule Set &lt;RuleSetName&gt;' if <see cref="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.RuleSet"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMemberRuleSetActionDef.ParameterValues">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> which specifies all input parameters for the target <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteMethodActionDef">
            <summary>
            Execute Method (.NET Static or Instance method) as defined in a .NET Assembly Schema or
            a Function Library Endpoint.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.#ctor(System.String)">
            <summary>
            Create def specifying Action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetSyncedParameterValuesList(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Gets <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection"/> which contains parameters list sync'd with latest schema method signature info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetAliasNames">
            <summary>
            Get available aliases.
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetAliasNameList">
            <summary>
            Gets available aliases.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetMethodNames">
            <summary>
            Get available methodnames for currently selected alias.
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetMethodNamesWithSig">
            <summary>
            Get available methodnames for currently selected alias with sig.
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetClassInfo">
            <summary>
            Get details for currently selected <see cref="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.AliasName"/>
            </summary>
            <returns>null if invalid, otherwise the details.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionDef.GetMethodInfo">
            <summary>
            Get details for currently selected <see cref="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.MethodName"/>
            </summary>
            <returns>null if invalid, otherwise the details.</returns>
            <remarks><para>Attempts to match method using the following scenarios:</para>
            	<list type="number">
            		<item><description>Exact type signature match: # of args, arg types match exactly in sequence.</description></item>
            		<item><description>Best match by argName: If multiple overloads, and have at least one named arg, return the overload having the max # of matches by argname.</description></item>
            		<item><description>Best match by argName: If multiple overloads, and have no named args and at least least one un-named arg, return the first overload if any having matching # args.</description></item>
            		<item><description>First overload: If there is at least one usable match by name, return this if neither of the above.</description></item>
            	</list> 
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.RuleActionType">
            <summary>
            Returns Action type as 'ExecuteMethod'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.AliasName">
            <summary>
            Gets/Sets the method name alias.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.MethodName">
            <summary>
            Gets/Sets the method name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.MethodReturnAssignTo">
            <summary>
            Gets/Sets the field name to assign method return value to.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.ParameterValues">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDefCollection"/> which contains
            the required method parameters and their values.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute Method'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteMethodActionParamDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionDef"/>.
            Specifies a method parameter. 
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a parameter def specifying its name,value expression,typename,assemblyname and
            if its an out parameter(returning values).
            </summary>
            <param name="argExpression"></param>
            <param name="argName"></param>
            <param name="fullTypeName"></param>
            <param name="fullDisplayTypeName"></param>
            <param name="assemblyName"></param>
            <param name="isOut"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.ArgName">
            <summary>
            Gets/Sets the name of the method parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.FullTypeName">
            <summary>
            Gets/Sets the typename for the method parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.AssemblyName">
            <summary>
            Gets/Sets the assembly name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.AssemblyQualifiedName">
            <summary>
            Gets assemblyQualifiedName (but without strong name portion), with &amp; suffix on typename if byref arg
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.IsOut">
            <summary>
            Gets/Sets if parameter is an out parameter(can passback a value from the method).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.ArgExpression">
            <summary>
            Gets/Sets argument value expression as defined by <see cref="P:InRule.Repository.RuleElements.ExecuteMethodActionParamDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef">
            <summary>
            Action which executes a Sql Query as defined by the <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQueryDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.#ctor(System.String)">
            <summary>
            Create def spefiying action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.GetSqlQuerySyncedParameterValuesList">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDefCollection"/> contains parameters list sync'd with latest 
            schema <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQuery"/> used.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.RuleActionType">
            <summary>
            Returns action type as 'ExecuteSqlQuery'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.ColumnMappings">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which optionally specifies column mappings (relevant only for Complex or Collection queries)
            </summary>
            <remarks>
            Name may be either an integer position or the column name returned from the query.
            <para>Expression is the field name to map to.</para>
            <para>When there are 0 mappings the default mapping is used (all query columns assigned in order).</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.OutputParameterColumnMappings">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which optionally specifies output mappings (relevant only for Complex or Collection queries)
            </summary>
            <remarks>
            Name may be either an integer position or the column name returned from the query.
            <para>Expression is the field name to map to.</para>
            <para>When there are 0 mappings the default mapping is used (all query columns assigned in order).</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQuery">
            <summary>
            Gets/Sets the name of <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQueryDef"/> to use.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.DefaultReturnValue">
            <summary>
            Gets/Sets a default value, applicable only to single column / single-row returns assigned to a field
            </summary>
            <remarks>Empty string interpreted as non-null default value for type; null interpreted as no default value.</remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.QueryReturnAssignTo">
            <summary>
            Gets/Sets Field name to assign query return value(s) to, which may be a <see cref="F:InRule.Repository.FieldDefType.Field"/> or <see cref="F:InRule.Repository.FieldDefType.Collection"/>
            </summary>
            <remarks>
            <see cref="T:InRule.Repository.FieldDef"/> may be a value or <see cref="F:InRule.Repository.DataType.Entity"/>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.ParameterValues">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDefCollection"/> which contains expression for each <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQueryDef"/> parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.AppendToTargetCollection">
            <summary>
            Gets/Sets a Boolean value which indicates that target collection should be appended-to rather than cleared first.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.ReturnFirstRow">
            <summary>
            Gets/Sets a Boolean value which indicates if only first row for query results is returned.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQueryDef">
            <summary>
            Gets the <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.SqlQueryDef"/> used.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute SQL Query'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef"/>.
            Specifies the values for the used <see cref="T:InRule.Repository.SqlQueryDef"/> parameters, if any.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.#ctor(System.String,System.String,InRule.Repository.DataType,InRule.Repository.SqlQueryParmDef.ParameterDirection)">
            <overloads>
            Create sql query param arg
            </overloads>
            <summary>
            Create sql query param arg specifying parameter name, value expression, data type, direction
            </summary>
            <param name="argName"></param>
            <param name="argExpression"></param>
            <param name="parameterDirection"></param>
            <param name="paramType"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.#ctor(System.String,System.String)">
            <summary>
            Create sql query param arg specifying parameter name, value expression.
            </summary>
            <param name="argName"></param>
            <param name="argExpression"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ArgName">
            <summary>
            Gets/Sets the parameter name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ParamType">
            <summary>
            Gets/Sets the parameter type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ParameterDirection">
            <summary>
            Gets/Sets the parameter direction.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the query parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ArgExpression">
            <summary>
            Gets/Sets the parameter value expression as defined by <see cref="P:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionParameterValueDefCollection">
            <summary>
            Collection of ExecuteSqlQueryActionParameterValueDef.Contains all sql query parameters.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef">
            <summary>
            Action which executes a WebService operation as defined by <see cref="T:InRule.Repository.WebServiceDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.#ctor(System.String)">
            <summary>
            Create a def specifying action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.FindModifiedDifferences(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Differences.RuleRepositoryDifferenceMessageCollection)">
            <summary>
            
            </summary>
            <param name="editedDef"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.TimeoutMs">
            <summary>
            Gets or sets the timeout interval in milliseconds of the WSDL retrieval.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.Retry">
            <summary>
            Gets or sets the retry attempts of the WSDL retrieval if the timeout interval is exceeded.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute Web Service'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.WebServiceEndPointName">
            <summary>
            Gets/Sets the name of <see cref="T:InRule.Repository.WebServiceDef"/> to use.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.OperationName">
            <summary>
            Gets/Sets the name of the <see cref="T:InRule.Repository.WebServiceDef"/> operation to execute.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.Inputs">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all input mappings(Ruleapplication Fields:Method parameters) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.Outputs">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all output mappings(Ruleapplication Fields:Method Return) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.ResponseHeaders">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all response header mappings(Ruleapplication Fieldslt:Method ResponseHeaders) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.RequestHeaders">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.TypeMappingCollection"/> which contains 
            all request header mappings(Ruleapplication Fields:Method RequestHeaders) for the operation.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.IsAllowedInParentContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef.RuleActionType">
            <summary>
            Returns action type as 'ExecuteWebServiceOperation'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef">
            <summary>
            Action which executes a XPath query as defined by <see cref="T:InRule.Repository.XPathQueryDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.#ctor(System.String)">
            <summary>
            Create def specifying action name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.GetXPathQuerySyncedParameterValuesList">
            <summary>
            Gets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which contains parameters list sync'd with latest 
            schema <see cref="T:InRule.Repository.XPathQueryDef"/> used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.GetXPathQueryNames">
            <summary>
            Get available XPath Query elements
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.RuleActionType">
            <summary>
            Gets action type as 'ExecuteXPathQuery'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.ColumnMappings">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which optionally specifies column mappings (relevant only for Complex or Collection queries)
            </summary>
            <remarks>
            Name may be either an integer position or the column name returned from the query.
            <para>Expression is the field name to map to.</para>
            <para>When there are 0 mappings the default mapping is used (all query columns assigned in order).</para>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.XPathQuery">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.XPathQuery"/> to use.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.DefaultReturnValue">
            <summary>
            Gets/Sets a default value, applicable only to single column / single-row returns assigned to a field
            </summary>
            <remarks>Empty string interpreted as non-null default value for type; null interpreted as no default value.</remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.QueryReturnAssignTo">
            <summary>
            Gets/Sets a field name to assign query return to, which may be a <see cref="F:InRule.Repository.FieldDefType.Field"/> or <see cref="F:InRule.Repository.FieldDefType.Collection"/>
            </summary>
            <remarks>
            <see cref="T:InRule.Repository.FieldDef"/> may be a value or <see cref="F:InRule.Repository.DataType.Entity"/> field
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.ParameterValues">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameExpressionPairDefCollection"/> which contains an an expression for each <see cref="T:InRule.Repository.XmlDocumentDef"/> parameter.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.ReturnFirstRow">
            <summary>
            Gets/Sets a Boolean value which indicates if only first row for query results is returned.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.AppendToTargetCollection">
            <summary>
            Gets/Sets a Boolean Value indicating that target collection should be appended-to rather than cleared first.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute XPath Query'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.FireEventActionArgDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.FireEventActionDef"/>.
            Specifies an event argument. 
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.FireEventActionArgDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying argument name and expression value.
            </summary>
            <param name="argName"></param>
            <param name="argExpression"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionArgDef.ArgName">
            <summary>
            Gets/Sets the event argument name.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionArgDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the argument.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionArgDef.ArgExpression">
            <summary>
            Gets/Sets argument value expression as defined by <see cref="P:InRule.Repository.RuleElements.FireEventActionArgDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.FireEventActionArgDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.FireEventActionArgDef"/>. Conatins all event arguments.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.FireEventActionDef">
            <summary>
            Action which raises the specified event.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionDef.RuleActionType">
            <summary>
            Returns action type as 'FireEvent'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionDef.EventName">
            <summary>
            Gets/Sets the name of the event to raise.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionDef.Arguments">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.FireEventActionArgDefCollection"/> containing event arguments, if any.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireEventActionDef.AuthoringElementTypeName">
            <summary>
            Gets typename as 'Raise Event'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.FireNotificationActionDef">
            <summary>
            Action which displays a notification message on execution.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.FireNotificationActionDef.GetNotificationTypeListDisplayNames">
            <summary>
            Get possible values for <see cref="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationType"/> display list (e.g., combo box).
            </summary>
            <returns>Fieldnames in returned <see cref="T:System.Data.DataTable"/> are specified by <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataTextField"/> 
            and  <see cref="F:InRule.Common.Config.RuleRepositoryConstants.DataValueField"/> 
            </returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.RuleActionType">
            <summary>
            Returns action type as 'FireNotification'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationToFire">
            <summary>
            Gets/Sets the name of notification conatined in list of <see cref="T:InRule.Repository.NotificationDef"/> to use.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationType">
            <summary>
            Gets/Sets the <see cref="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationType"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationMode">
            <summary>
            Gets/Sets the <see cref="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationMode"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationMessage">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the Notification.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationMessageText">
            <summary>
            Gets/Sets the message to display when notification is fired specified by <see cref="P:InRule.Repository.RuleElements.FireNotificationActionDef.NotificationMessage"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.FireNotificationActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Fire Notification'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.HaltRuleSetActionDef">
            <summary>
            Action which halts rule execution for the rules contained in the specified Ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.HaltRuleSetActionDef.RuleActionType">
            <summary>
            Returns action type as 'HaltRuleSet'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.HaltRuleSetActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.HaltRuleSetActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Halt Rule Set'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.HaltRuleSetActionDef.HaltAllRuleExecution">
            <summary>
            Gets/Sets a value indicating if the action should halt execution of all Rulesets.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.HaltRuleSetActionDef.MessageText">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the message to display when rule execution is halted.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.LanguageRuleDef">
            <summary>
            Specifies a LanguageRule.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.LanguageRuleDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.LanguageRuleDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/> specifying its name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/>.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.LanguageRuleDef.GetAllChildCollections">
            <summary>
            Get a <see cref="T:InRule.Repository.RuleRepositoryDefCollection"/> containing all rules defined under this LanguageRule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.LanguageRuleDef.ConvertToSyntax">
            <summary>
            Converts this <see cref="T:InRule.Repository.RuleElements.LanguageRuleDef"/> into syntax form.
            </summary>
            <returns>The converted <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> RuleElement.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Language Rule'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.ParentCollection">
            <summary>
            Gets the parent collection of ruleelements to which this rule belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.RuleElementType">
            <summary>
            Gets ruleelement type as 'LanguageRule'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.RuleElement">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> this rule contains.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.HasContextVersionSettings">
            <summary>
            Indicates if this rule has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.VersionEffectiveDateFieldNameSpecified">
            <summary>
            Indicates if the property VersionEffectiveDateFieldName is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.LanguageRuleDef.VersionCreatedDateFieldNameSpecified">
            <summary>
            Indicates if the property VersionCreatedDateFieldName is specified.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RefreshFieldsActionDef">
            <summary>
            Refresh Fields Action repository definition.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RefreshFieldsActionDef.IncludeChildren">
            <summary>
            Indicates whether the elementidentifer (Field Names )can be recursed. This property recurses along 
            the field's child objects/fields if present.
            </summary>
            <value><c>true</c> if [include children]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef">
            <summary>
            Action which removes a collection memebr from a collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.#ctor(System.String,System.String)">
            <summary>
            Create def specifying collection name and expression specifying index of memebr to remove.
            </summary>
            <param name="collectionName"></param>
            <param name="memberIndexExpression"></param>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.RuleActionType">
            <summary>
            Retruns action type as 'RemoveCollectionMember'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.Collection">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the collection from which member is removed.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.MemberIndex">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.CalcDef"/> which defines the index of the collection member to remove.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.CollectionName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.Collection"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.MemberIndexExpression">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.MemberIndex"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Remove Collection Member'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Remove Collection Member&gt; or
            'Remove &lt;CollectionName&gt;(&lt;MemberIndexExpression&gt;)' if <see cref="P:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef.CollectionName"/> not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleActionRootDef">
            <summary>
            Authoring root folder for Actions. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleActionRootDef.GetAllRuleElements">
            <summary>
            Gets a list of all <see cref="T:InRule.Repository.RuleElements.RuleActionDef"/>s authored under the entity containing this actions folder. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleActionRootDef.RuleElements">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleElements.RuleElementDefCollection"/> containing all Actions authored under entity containing this actions folder.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleActionType">
            <summary>
            Possible values for RuleAction Type like SetValue,ExecuteMethod etc.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleElementDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> specifying its parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.Add(InRule.Repository.RuleElements.RuleElementDef)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> to the collection.
            </summary>
            <param name="value">The new <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.IsLast(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Indicates if a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the last item in the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to verify.</param>
            <returns>True if the specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the last item in the collection.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.IsFirst(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Indicates if a <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the first item in the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> to verify.</param>
            <returns>True if the specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> is the first item in the collection.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.MoveUp(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Moves the <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item in a collection up one item, so that it is before the item that originally preceded it.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item to move up.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.MoveDown(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Moves the <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item in a collection down one item, so that it is after the item that originally followed ir.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> item to move down.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.GetCount(System.Type)">
            <summary>
            Gets the number of items in this collection of the specified type.
            </summary>
            <param name="defType">The type of the items to count.</param>
            <returns>the number of items in this collection of the specified type. Returns 0 if none.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.GetNextItemIfThisWereDeleted(InRule.Repository.RuleRepositoryDefBase,System.Type)">
            <summary>
            Get next item in this collection that should appear as current if this one were deleted.
            </summary>
            <param name="def"></param>
            <param name="defTypeFilter"></param>
            <returns>null if none remaining in this collection of this defType</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementDefCollection.GetExecutionContext">
            <summary>
            Returns either the RuleApplicationDef, EntityDef, or FieldDef under which these rules run
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of a <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>.</returns>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleElementType">
            <summary>
            Possible values for RuleElement Types.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleElementVersion">
            <summary>
            Specifies version for a <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> indicating its effective date, created date.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementVersion"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementVersion"/> specifying its name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.RuleElementVersion"/>.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.#ctor(InRule.Repository.RuleElements.RuleElementDef)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleElementVersion"/> specifying its RuleElement.
            </summary>
            <param name="ruleElement">The <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> for which this version is to be applied. .</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> specifying its parent.
            </summary>
            <param name="isDefault">The flag which indicates if this version is to be applied to a <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> by default.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.GetEffectiveDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleElementVersion.GetImplementedDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.EffectiveDate">
            <summary>
            Gets/Sets a Date from which this version is to be applied to a ruleelement.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.ImplementedDate">
            <summary>
            Gets/Sets a Date on which this version is implemented for a ruleelement.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.Active">
            <summary>
            Gets/Sets a value to indicate is this version is active(enabled).
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.RuleElement">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> this version applies to.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.IsDefault">
            <summary>
            Gets/Sets value indicating if default dates are to be used for this version.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.EffectiveDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleElementVersion.ImplementedDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleElementVersionCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.RuleElementVersion"/> applicable to a <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetDef">
            <summary>
            Rule Set repository definition.
            Specifies an entity or independent Ruleset with its fire mode,run mode and the list of all rule elements(Rules/Actions/UIActions) it contains.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetDefBase">
            <summary>
            Base class for <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>, <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/>
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.IContainsRuleSetParameters">
            <summary>
            Represents a type that contains RuleSetParameters.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.IContainsRuleSetParameters.Parameters">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDefCollection"/> of this type that contains RuleSet parameters.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> specifying its action name.
            </summary>
            <param name="name">The action name of the <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetRuleSet(System.String)">
            <summary>
            Get Independent or Entity Ruleset as specified by the Ruleset name.
            </summary>
            <param name="relativeRuleSetPath">The relative dot-notation path of the Rule</param>
            <returns>RuleSetDef if exists otherwise null.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetAllRuleElements">
            <summary>
            Get a list of all <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>s contained in this def.
            </summary>
            <returns>The list of all <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>s contained in this def.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.ClearAllLanguageRuleHintTables">
            <summary>
            Recursively clears the hint tables for all language rules contained in this rule set and its sub rules.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetFieldOrEntity(System.String)">
            <summary>
            Find a field or entity given its relative path (. addressing). Works for collection formats like field1.collection1(2).field2, field1.collection2(3)
            </summary>
            <param name="relName">dot-notation name from this entity context.</param>
            <returns>Null if not found, otherwise the field.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetExecutionContext">
            <summary>
            Returns either the RuleApplicationDef, EntityDef, or FieldDef under which this rule set runs
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetChildCollection(System.Type)">
            <summary>
            Gets a list of all child collections contained in this def with the specified member type. The valid member
            types are <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/> and <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>; for all other types this method throws
            an <see cref="T:System.ApplicationException"/> exception with the "Unsupported type" message.
            </summary>
            <returns>The list of all child colections contained in this def with the specified member type.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.GetAllChildCollections">
            <summary>
            Gets a list of all child collections contained in this def.
            </summary>
            <returns>The list of all child colections contained in this def.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDef.CheckForValidationErrors(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Gets the list of validation messages for this def.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.IsIndependent">
            <summary>
            Gets/Sets a Boolean Value indicating if this def is an Independent Ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.IsContextRuleSet">
            <summary>
            Indicates if this def is authored under a Field.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.Fields">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.FieldDefCollection"/> in whose context this Independent Ruleset runs.
            On set, raises the <see cref="E:InRule.Repository.RuleElements.RuleSetDef.FieldsChanged"/> event.
            </summary>
            <remarks>This property is ignored in case of Entity RuleSets.
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.Parameters">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDefCollection"/> which specifies all parameters for this <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.ParametersSpecified">
            <summary>
            Gets a value indicating if this <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> has any parameters.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.DefaultActivation">
            <summary>
            Gets/Sets a value indicating if this Ruleset is active by default.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.DefaultActivationSpecified">
            <summary>
            Gets a value indicating whether active by default is specified for this <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.FireMode">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.RuleSetFireMode"/> for an Entity Ruleset.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Independent RuleSets always run in an Explicit FireMode.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:InRule.Repository.RuleElements.RuleSetDef.FireModeChanged">
            <summary>
            Occurs when the fire mode of the Rule Set changes to a different value
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.RunMode">
            <summary>
            Gets/Sets the <see cref="T:InRule.Repository.RuleElements.RuleSetRunMode"/> for an Entity Ruleset.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Independent RuleSets always run in a SequentialRunOnce RunMode.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.Rules">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.RuleElements.RuleElementDefCollection"/> which specifies all rules contained under this Ruleset.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.ParentCollection">
            <summary>
            Gets the parent collection of Rulesets/Ruleset folders to which this ruleset belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.AuthoringElementTypeName">
            <summary>
            Gets the authoring name of the element type.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.HasContextVersionSettings">
            <summary>
            Indicates if ContextVersionSettings are enabled for this Ruleset. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this Ruleset version.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this Ruleset version.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDef.Vocabulary">
            <summary>
            Returns the <see cref="T:InRule.Repository.Vocabulary.VocabularyDef"/> contained in this def.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/>
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDefBaseCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDefBaseCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection"/> specifying its parent.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetDefBaseCollection.Add(InRule.Repository.RuleElements.RuleSetDefBase)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/> to the collection.
            </summary>
            <param name="value">The new <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetDefBaseCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of a <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/>.</returns>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetFolderDef">
            <summary>
            Specifies a Ruleset folder which acts as a conatiner for entity/Independent Rulesets.Used solely for authoring purposes.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetFolderDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetFolderDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/> specifying the action name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/>.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetFolderDef.GetAllRuleSets">
            <summary>
            Gets a list of RuleSets <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> contained in this Ruleset folder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetFolderDef.RuleSets">
            <summary>
            Gets/Sets <see cref="T:InRule.Repository.RuleElements.RuleSetDefBaseCollection"/> specifying the Rulesets and Ruleset Folders contained in this Ruleset folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetFolderDef.ParentCollection">
            <summary>
            Gets the parent collection of ruleelements to which this folder belongs if there is one. 
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetRootDef">
            <summary>
            Authoring root folder for Rule Sets. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetRootDef.GetAllRuleElements">
            <summary>
            Gets a list of <see cref="T:InRule.Repository.RuleElements.RuleElementDef"/>(excluding Actions) for this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetRootDef.GetAllRuleSets">
            <summary>
            Gets a list of all RuleSets contained in this def.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetRootDef.GetRuleSet(System.String)">
            <summary>
            Gets a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> (includes <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/>) contained in this def as specified by its name.
            </summary>
            <param name="ruleSetName">the name of the rule set to retrieve</param>
            <returns>the rule set found or null if not found</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetRootDef.IsRootItem">
            <summary>
            Indicates if this def is a root-only placeholder for tree-navigation purposes.
            Returns true is this def parent is not an <see cref="T:InRule.Repository.EntityDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetRootDef.RuleSets">
            <summary>
            Gets or sets the rule sets.
            </summary>
            <value>The rule sets.</value>
        </member>
        <member name="T:InRule.Repository.RuleElements.SendMailActionAttachmentDef">
            <summary>
            Used by <see cref="T:InRule.Repository.RuleElements.SendMailActionDef"/>.
            Specifies detais for Attachment files sent with a mail.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionAttachmentDef.ArgValue">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the attachment file.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionAttachmentDef.ArgText">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.SendMailActionAttachmentDef.ArgValue"/>.FormulaText.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SendMailActionAttachmentDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.SendMailActionAttachmentDef"/>.Contains details of all attachement files for
            a <see cref="T:InRule.Repository.RuleElements.SendMailActionDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SendMailActionDef">
            <summary>
            Action which sends a mail using the <see cref="T:InRule.Repository.EndPoints.SendMailServerDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.RuleActionType">
            <summary>
            Returns action type as 'SendMail'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.SendMailServer">
            <summary>
            Gets/Sets the name of the <see cref="T:InRule.Repository.EndPoints.SendMailServerDef"/> used.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.From">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the email address from which mail is sent.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.FromFriendlyName">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the  the name of the sender.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.To">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the email address to which mail is sent.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.Subject">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the email subject.
            </summary>odelProperty]
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.Message">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the email message.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.Attachments">
            <summary>
            Gets/Sets a collection of <see cref="T:InRule.Repository.RuleElements.SendMailActionAttachmentDefCollection"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SendMailActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Send Mail Action'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SetFieldInvalidActionDef">
            <summary>
            Action which sets a specified field as invalid and logs a message.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.Message">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the message logged when field is marked invalid.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.FieldName">
            <summary>
            Gets/Sets the name of field to mark as invalid.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Set Field Invalid'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;ield name&gt; or 
            'Mark &lt;field name&gt; inactive' if <see cref="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.FieldName"/> not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetFieldInvalidActionDef.RuleActionType">
            <summary>
            Returns action type as 'SetFieldInvalid'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SetValueActionDef">
            <summary>
            Action which sets specified field to specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SetValueActionDef.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.SetValueActionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SetValueActionDef.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleElements.SetValueActionDef"/>.
            </summary>
            <param name="elementName">The name of the element to set.</param>
            <param name="valueExpression">The expression of the value to set the element to.</param>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.RuleActionType">
            <summary>
            Returns action type as 'SetValue'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.Element">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines field whose value is set.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.Value">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the field value expression.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.ElementName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.SetValueActionDef.Element"/>.FormulaText
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.ValueExpression">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.SetValueActionDef.Value"/>.FormulaText
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Set Value'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SetValueActionDef.AuthoringContextName">
            <summary>
            Gets default context name as as &lt;Set Value&gt; or
            'Set &lt;FieldName&gt; to &lt;Value&gt;' 
            if <see cref="P:InRule.Repository.RuleElements.SetValueActionDef.Element"/>.FormulaText not empty.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SimpleRuleDef">
            <summary>
            Specifies a Simple(if...Then) Rule.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> specifying the expression.
            </summary>
            <param name="conditionExpression">The cond-expression to evaluate.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> specifying its name and expression.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/>.</param>
            <param name="conditionExpression">The cond-expression to evaluate.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.AddOverride(System.String,System.String)">
            <summary>
            Adds an override to this rule specified with the override condition and its formula.
            </summary>
            <param name="overrideWhen">The override condition.</param>
            <param name="formula">The formula to use for this rule when the override condition evaluates to true.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleOverride"/> representing the override.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.AddVersion(System.String,System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Adds a new version to this rule with a new formula valid from the specified effective date.
            </summary>
            <param name="name">The name of the rule version.</param>
            <param name="createdDate">The creation date.</param>
            <param name="createdDateFormula">The creation date formula.</param>
            <param name="effectiveDate">The effective date.</param>
            <param name="effectiveDateFormula">The effective date formula when the override is activated.</param>
            <param name="formula">The formula to use for this rule when the effective date is current.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleVersion"/> representing the override.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.AddVersion(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new version to this rule with a new formula valid from the specified effective date.
            </summary>
            <param name="name">The name of the rule version.</param>
            <param name="createdDate">The creation date.</param>
            <param name="createdDateFormula">The creation date formula.</param>
            <param name="effectiveDate">The effective date.</param>
            <param name="effectiveDateFormula">The effective date formula when the override is activated.</param>
            <param name="formula">The formula to use for this rule when the effective date is current.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleVersion"/> representing the override.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDef.ContainsText(InRule.Repository.RuleTextSearchContext,System.String,System.Boolean)">
            <summary>
            Searches for the specified text within this rule.
            </summary>
            <param name="searchMode">The search mode of type <see cref="T:InRule.Repository.RuleTextSearchContext"/>.</param>
            <param name="searchText">The text to search.</param>
            <param name="recurseIntoChildren">The flag indicating whether search should be recursive.</param>
            <returns>The <see cref="T:InRule.Repository.RuleTextSearchContext"/> result.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.RuleElementType">
            <summary>
            Returns rule type as 'SimpleRule'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.Condition">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the rule condition.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.ConditionExpression">
            <summary>
            Gets/Sets the <see cref="P:InRule.Repository.RuleElements.SimpleRuleDef.Condition"/>.FormulaText
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.SubRules">
            <summary>
            Gets/Sets a collection containing all rule elements under this rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.SubRulesSpecified">
            <summary>
            Indicates if the property SubRules is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.InRule#Repository#RuleElements#IContainsRuleElements#RuleElements">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.SimpleRuleDef.SubRules"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.ParentCollection">
            <summary>
            Gets the parent collection of ruleelements to which this rule belongs if there is one. 
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;If Then&gt; or &lt;Condition&gt;
            if this rule is authored under an <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDef"/> when <see cref="P:InRule.Repository.RuleElements.SimpleRuleDef.Condition"/>.FormulaText
            is empty else 'If conditionname';
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'If Then'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.HasContextVersionSettings">
            <summary>
            Indicates if this rule has context version settings.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionEffectiveDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the effective date for this version of the rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionEffectiveDateFieldNameSpecified">
            <summary>
            Indicates if the property <see cref="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionEffectiveDateFieldName"/> is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionCreatedDateFieldName">
            <summary>
            Gets/Sets the FieldName which dictates the created date for this version of the rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionCreatedDateFieldNameSpecified">
            <summary>
            Indicates if the property <see cref="P:InRule.Repository.RuleElements.SimpleRuleDef.VersionCreatedDateFieldName"/> is specified.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.SimpleRuleDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDefCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDefCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> specifying its parent.
            </summary>
            <param name="parent">The parent def for this instance.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.SimpleRuleDefCollection.Add(InRule.Repository.RuleElements.SimpleRuleDef)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> to the collection.
            </summary>
            <param name="value">The <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> to add.</param>
            <returns>The <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> added to the collection.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.SimpleRuleDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of the <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.SimpleRuleDefCollection"/>.</returns>
        </member>
        <member name="T:InRule.Repository.RuleElements.SortCollectionActionDef">
            <summary>
            Action which sorts the specified Collection members.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.IsAllowedInParentContext">
            <summary>
            Indicates if this rule can be authored under the Ruleset where it is defined.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.RuleActionType">
            <summary>
            Gets action type as 'SortCollection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Sort Collection'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;Sort Collection&gt; or
            'Sort CollecitonName'if <see cref="P:InRule.Repository.RuleElements.SortCollectionActionDef.CollectionToSort"/>.FormulaText is not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.CollectionToSort">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.CalcDef"/> which defines the collection to be sorted.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.CollectionName">
            <summary>
            Gets/Sets <see cref="P:InRule.Repository.RuleElements.SortCollectionActionDef.CollectionToSort"/>.FormulaText.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.SortCollectionActionDef.SortFields">
            <summary>
            Gets/Sets a <see cref="T:InRule.Repository.NameSortOrderDefCollection"/> which contains one or more fields to sort on.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.WhileRuleDef">
            <summary>
            Specifies a While rule.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.WhileRuleDef.IsAllowedInParentContext">
            <summary>
            Indicates if this rule is valid under the Ruleset it is defined.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.WhileRuleDef.RuleElementType">
            <summary>
            Returns rule type as 'WhileRule'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.WhileRuleDef.AuthoringContextName">
            <summary>
            Gets the default context name as &lt;While&gt; or
            'While conditionname'if condition is not empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.WhileRuleDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'While'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleOverride">
            <summary>
            Used by RuleExceptionValue
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleVersion">
            <summary>
            Used by RuleExceptionValue
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersion.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersion"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersion.#ctor(System.String,System.DateTime,System.DateTime,System.String,System.String,InRule.Repository.RuleExceptionValue)">
            <summary>
            Adds a new version to this rule exception with a new exception value created as of specific date and effective from certain date.
            </summary>
            <param name="name">The name of the rule version.</param>
            <param name="createdAsOfDate">The created as of date.</param>
            <param name="effectiveDate">The effective date.</param>
            <param name="createdAsOfDateFormula">The created as of date formula.</param>
            <param name="effectiveDateFormula">The effective date formula when the rule exception is activated.</param>
            <param name="exceptionValue">The rule exception value.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleVersion"/> representing the timed rule exception value.</returns>
        </member>
        <member name="M:InRule.Repository.RuleVersion.#ctor(System.String,System.String,System.String,System.String,System.String,InRule.Repository.RuleExceptionValue)">
            <summary>
            Adds a new version to this rule exception with a new exception value created as of specific date and effective from certain date.
            </summary>
            <param name="name">The name of the rule version.</param>
            <param name="createdAsOfDate">The created as of date.</param>
            <param name="effectiveDate">The effective date.</param>
            <param name="createdAsOfDateFormula">The created as of date formula.</param>
            <param name="effectiveDateFormula">The effective date formula when the rule exception is activated.</param>
            <param name="exceptionValue">The rule exception value.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleVersion"/> representing the timed rule exception value.</returns>
        </member>
        <member name="M:InRule.Repository.RuleVersion.RuleTextForEffectiveDate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersion.RuleTextForCreatedAsOfDate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersion.AddVersionOverride(System.String,System.DateTime,System.DateTime)">
            <summary>
            Adds an override to this rule specified with the override condition and its formula.
            </summary> 
            <param name="overrideWhen">The override condition.</param>
            <param name="createdAsOfDate">The created as of date.</param>
            <param name="effectiveDate">The effective date when this version is activated.</param>
            <returns>The strongly-typed instance of the <see cref="T:InRule.Repository.RuleVersionOverride"/> representing the override.</returns>
        </member>
        <member name="P:InRule.Repository.RuleVersion.EffectiveDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.EffectiveDateFormulaSpecified">
            <summary>
            Indicates if the property EffectiveDateFormula is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.CreatedAsOfDateFormula">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.ImplementedDateFormula">
            <summary>
            For internal use only; same as CreatedAsOfDateFormula.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.CreatedAsOfDateFormulaSpecified">
            <summary>
            Indicates if the property CreatedAsOfDateFormula is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.EffectiveDate">
            <summary>
            Gets or sets the effective date when a rule exception version is activated.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.CreatedAsOfDate">
            <summary>
            Gets or sets a created as of date for a rule exception version.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.RequiresVersionOverride">
            <summary>
            Gets or sets flag which indicates if a rule exception version requires version override.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.VersionOverrides">
            <summary>
            Gets or sets a collection of rule version overrides.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.VersionOverridesSpecified">
            <summary>
            Indicates if the property VersionOverrides is non-empty.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleVersion.ExceptionValue">
            <summary>
            Gets or sets an exception value.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleVersionOverride">
            <summary>
            Version Override
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersionOverride.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionOverride"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersionOverride.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionOverride"/> specifying the effective and created as of date.
            </summary>
            <param name="effectiveDate">The effective date when a rule version override is activated.</param>
            <param name="createdAsOfDate">The created as of date.</param>
        </member>
        <member name="M:InRule.Repository.RuleVersionOverride.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionOverride"/> specifying the effective and created as of date.
            </summary>
            <param name="effectiveDate">The effective date when a rule version override is activated.</param>
            <param name="createdAsOfDate">The created as of date.</param>
        </member>
        <member name="M:InRule.Repository.RuleVersionOverride.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionOverride"/> specifying the override condition, effective date, and created as of date.
            </summary>
            <param name="overrideWhen">The override condition.</param>
            <param name="effectiveDate">The effective date when a rule version override is activated.</param>
            <param name="createdAsOfDate">The created as of date.</param>
        </member>
        <member name="M:InRule.Repository.RuleVersionOverride.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionOverride"/> specifying the override condition, effective date, and created as of date.
            </summary>
            <param name="overrideWhen">The override condition.</param>
            <param name="effectiveDate">The effective date when a rule version override is activated.</param>
            <param name="createdAsOfDate">The created as of date.</param>
        </member>
        <member name="T:InRule.Repository.RuleOverrideCollection">
            <summary>
            Collection of RuleOverride
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleOverrideCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleOverrideCollection"/> specifying its parent.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:InRule.Repository.RuleOverrideCollection.Add(InRule.Repository.RuleOverride)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleOverride"/> to the collection.
            </summary>
            <param name="value">The new <see cref="T:InRule.Repository.RuleOverride"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleElements.RuleSetDefBase"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleOverrideCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleOverride"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of a <see cref="T:InRule.Repository.RuleOverride"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleOverride"/>.</returns>
        </member>
        <member name="T:InRule.Repository.RuleVersionCollection">
            <summary>
            Collection of RuleVersion
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersionCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleVersionCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleVersionCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of the <see cref="T:InRule.Repository.RuleVersionCollection"/> specifying its parent.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="T:InRule.Repository.RuleVersionOverrideCollection">
            <summary>
            Collection of RuleVersionOverride
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryServices">
            <summary>
            Repository Service methods.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryServices.LoadRuleAppXml(System.String)">
            <summary>
            Load ruleapp from xml string.
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">On any problem loading the xml string.</exception>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryServices.GetDataTypeFromTypeCode(System.Type,InRule.Repository.DataType)">
            <summary>
            Get equivalent rule engine <see cref="T:InRule.Repository.DataType"/> from a value-type <see cref="T:System.TypeCode"/> 
            </summary>
            <param name="type">Specifies a <see cref="T:System.TypeCode"/> from which to derive.</param>
            <param name="defaultDateTimeTypeToUse"></param>
            <returns>Rule Engine datatype</returns>
            <exception cref="T:InRule.Repository.RuleRepositoryException">When unsupported typecode is passed.</exception>
        </member>
        <member name="M:InRule.Repository.RuleRepositoryServices.GetDataTypeFromTypeCode(System.Type)">
            <summary>
            Get equivalent rule engine <see cref="T:InRule.Repository.DataType"/> from a value-type <see cref="T:System.TypeCode"/>, using Date for any datetimes
            </summary>
            <param name="type">Specifies a <see cref="T:System.TypeCode"/> from which to derive.</param>
            <returns>Rule Engine datatype</returns>
            <exception cref="T:InRule.Repository.RuleRepositoryException">When unsupported typecode is passed.</exception>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportAttributeType">
            <summary>
            Enumeration of the SDK import attribute types
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportRuleWriteTarget">
            <summary>
            Enumeration of the SDK import RuleWrite target types
            </summary>
        </member>
        <member name="F:InRule.Repository.Import.Control.InRuleImportRuleWriteTarget.This">
            <summary>
            Specifies that path is relative to the containing type. Collection syntax for a specific member is collName(#).
            </summary>
        </member>
        <member name="F:InRule.Repository.Import.Control.InRuleImportRuleWriteTarget.Parameter">
            <summary>
            Specifies the path is an absolute path beginning with a parameter name, which optionally can be followed by a path to an inner member. Collection syntax for a specific member is collName(#).
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportAttributeBase">
            <summary>
            Abstract base class for SDK import attributes
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportAttributeBase.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportAttribute">
            <summary>
            Attribute specifying an argument which controls the SDK import for the target
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="argument">Argument used to control or modify SDK import for the target</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportAttribute.Argument">
            <summary>
            Argument used to control or modify SDK import for the target
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportSerializerAttribute">
            <summary>
            Attribute specifying a fully qualified type name of a serializer to be used by imported schema objects
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportSerializerAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fullyQualifiedSerializerTypeName">Fully qualified type name of a serializer to be used by imported schema objects</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportSerializerAttribute.SerializerName">
            <summary>
            Fully qualified type name of a serializer to be used by imported schema objects
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportSerializerAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportIncludeMethodsAttribute">
            <summary>
            Attribute specifying whether methods on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeMethodsAttribute.#ctor">
            <summary>
            Constructor specifying that methods on the target type WILL be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeMethodsAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="includeMethodsByDefault">Specifies whether methods on the target type will be 'included' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeMethodsAttribute.IncludeMethods">
            <summary>
            Specifies whether methods on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeMethodsAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportIncludePropertiesAttribute">
            <summary>
            Attribute specifying whether properties on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludePropertiesAttribute.#ctor">
            <summary>
            Constructor specifying that properties on the target type WILL be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludePropertiesAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="includePropertiesByDefault">Specifies whether properties on the target type will be 'included' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludePropertiesAttribute.IncludeProperties">
            <summary>
            Specifies whether properties on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludePropertiesAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportIncludeFieldsAttribute">
            <summary>
            Attribute specifying whether fields on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeFieldsAttribute.#ctor">
            <summary>
            Constructor specifying that fields on the target type WILL be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeFieldsAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="includeFieldsByDefault">Specifies whether fields on the target type will be 'included' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeFieldsAttribute.IncludeFields">
            <summary>
            Specifies whether fields on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeFieldsAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportIncludeBaseMethodsAttribute">
            <summary>
            Attribute specifying whether methods on the base classes of the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeBaseMethodsAttribute.#ctor">
            <summary>
            Constructor specifying that methods on the base classes on the target type WILL be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeBaseMethodsAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="includeBaseMethodsByDefault">Specifies whether methods on the base classes on the target type will be 'included' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeBaseMethodsAttribute.IncludeBaseMethods">
            <summary>
            Specifies whether methods on the base classes on the target type will be 'included' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeBaseMethodsAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportAvailableAttribute">
            <summary>
            Attribute specifying whether the target will be 'available' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportAvailableAttribute.#ctor">
            <summary>
            Constructor specifying that the target WILL be 'available' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportAvailableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="availableToImport">Specifies whether the target will be 'available' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportAvailableAttribute.Available">
            <summary>
            Specifies whether the target will be 'available' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportAvailableAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportIncludeAttribute">
            <summary>
            Attribute specifying whether the target will be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeAttribute.#ctor">
            <summary>
            Constructor specifying that the target WILL be 'included' for SDK import
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportIncludeAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="includedForImport">Specifies whether the target will be 'included' for SDK import</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeAttribute.Include">
            <summary>
            Specifies whether the target will be 'included' for SDK import
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportIncludeAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportRuleWriteAllAttribute">
            <summary>
            Attribute specifying whether method or property calls within the target scope cause all bound objects to be refreshed.
            
            Values:
             true (default) - all bound objects will be refreshed based on calls within the target scope
             false - no bound objects will be refreshed based on calls within the target scope
            
            Notes:
             1) Multiple applications of this attribute are considered from the outermost scope to the innermost scope
                with inner applications overriding the behavior of outer applications
             2) When an individual object is refreshed, rules dependent on the object are placed back onto the agenda 
                for rule execution as appropriate
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportRuleWriteAllAttribute.#ctor">
            <summary>
            Constructor specifying that method or property calls within the target scope WILL cause all bound objects to be refreshed
            </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportRuleWriteAllAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="rulesRefreshAllFields">Specifies whether method or property calls within the target scope cause all bound objects to be refreshed</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAllAttribute.RuleWriteAll">
            <summary>
            Specifies whether method or property calls within the target scope cause all bound objects to be refreshed
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAllAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute">
             <summary>
             Attribute specifying whether method or property calls within the target scope cause the specified bound object to be refreshed
            
             Notes:
              1) Multiple applications of this attribute are considered for a given scope in addition to any applications
                 in the containing scope
              2) When an individual object is refreshed, rules dependent on the object are placed back onto the agenda 
                 for rule execution as appropriate
             </summary>
        </member>
        <member name="M:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute.#ctor(System.String,InRule.Repository.Import.Control.InRuleImportRuleWriteTarget,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="path">Specifies an object to be refreshed when a method or property within the target scope is called</param>
            <param name="target">Specifies whether the target is part of a method parameter or part of 'this'</param>
            <param name="enableRecursion">if set to <c>true</c> [enable recursion].</param>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute.Path">
            <summary>
            Specifies an object to be refreshed when a method or property within the target scope is called
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute.EnableRecursion">
            <summary>
            Specifies an object to be refreshed along with its child objects.
            </summary>
            <value><c>true</c> if [enable recursion]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute.Target">
            <summary>
            Specifies whether the target of the RuleWrite is part of a method parameter or part of 'this'
            </summary>
        </member>
        <member name="P:InRule.Repository.Import.Control.InRuleImportRuleWriteAttribute.InRuleImportAttributeType">
            <summary>
            Identifies the type of import attribute for this instance
            </summary>
        </member>
        <member name="T:InRule.Repository.SchemaOperations.RuleAppValidation">
            <summary>
            Validate rule application before compile
            </summary>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.RuleAppValidation.ValidateRuleApp(InRule.Repository.RuleApplicationDef)">
            <summary>
            Validate a ruleapp for global namespace collisions, etc.
            </summary>
            <param name="ruleAppDef"></param>
            <returns>null if ok, non-null message string on any validation problems.</returns>
            <remarks>Used by <see cref="M:InRule.Repository.RuleApplicationDef.Validate(System.Boolean)"/> - see here for more details.</remarks>
            <exception cref="T:System.SystemException">On any unexpected logic issue.</exception>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.RuleAppValidation.CreateCompileErrorForTargetElementName(InRule.Repository.RuleApplicationDef,System.String,InRule.Repository.Infos.BuildErrorMessage)">
            <summary>
            Tries to find the element by name, and if found uses the discovered def, otherwise uses Guid.Empty
            </summary>
            <param name="ruleAppDef"></param>
            <param name="name"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.RuleAppValidation.ValidateName(System.String,System.Boolean)">
            <summary>
            Validate name
            </summary>
            <param name="name"></param>
            <param name="required"></param>
            <returns>null if OK, err-msg otherwise</returns>
        </member>
        <member name="M:InRule.Repository.SchemaOperations.SchemaUtils.MergePriorEntityWithNew(InRule.Repository.EntityDefsInfo,InRule.Repository.EntityDefsInfo,System.Boolean)">
            <summary>
            Merge the prior into the new info
            </summary>
            <param name="prevInfo"></param>
            <param name="newInfo"></param>
            <param name="deselectNewIfPriorSelected"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.SchemaOperations.XsdLoader">
            <summary>
            Responsible for creating XsdDirective objects from either an XSD document (and its linked import/include/redefine documents)
            or unbound/object-bound <see cref="T:InRule.Repository.EntityDef"/> instances.
            Once generated, the objects are Silverlight-compatible and represent a compressed version of the XmlSchema objects.
            These objects are linked to ContainerInfo and FieldInfo instances (via a lookup table) on demand (GetXml()/ReadXml()) to assist
            XML serialization and deserialization at Runtime using the StateContainerXmlSerializer class.
            An <see cref="T:InRule.Repository.SchemaOperations.XsdLoader"/> instance can also generate the <see cref="T:InRule.Repository.EntityDefsInfo"/> structure for an <see cref="T:InRule.Repository.EndPoints.XmlSchemaDef"/>. This is
            used to generate the XSD-bound <see cref="T:InRule.Repository.EntityDef"/> schema.
            This class replaces the XsdSchemaParser class in InRule v3.x.
            </summary>
        </member>
        <member name="T:InRule.Repository.SchemaOperations.XsdLoaderSettings">
            <summary>
            Settings for the <see cref="T:InRule.Repository.SchemaOperations.XsdLoader"/> which certain aspects of EntityDef, FieldDef, ValueList and Constraint generation.
            </summary>
        </member>
        <member name="T:InRule.Repository.SchemaOperations.XsdLoaderState">
            <summary>
            State that should be used by all <see cref="T:InRule.Repository.SchemaOperations.XsdLoader"/> instances for a single <see cref="T:InRule.Repository.Infos.Loaders.RuleAppDefLoader"/> pass.
            </summary>
        </member>
        <member name="T:InRule.Security.RuleUserRolePermissions">
            <summary>
            Specifies the permission that can be set for a <see cref="T:InRule.Security.RuleUserRole"/>.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.ManageUsersAndRoles">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can add/delete/modify users and roles.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.MarkDefsInactive">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can mark defs as inactive.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.RemoveDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can delete defs.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.ModifyDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can modify defs.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.UndoAnyDefCheckout">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can undo checkouts.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.FileSystemDefsAccess">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can access FileSystem Rule applications.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.LabelDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can set labels for Rule applications.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.UseEngineService">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can use Engine service to evaluate rules.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.AdministerDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can administer defs.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.InsertDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can insert defs.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.OpenDefs">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can open defs.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.ModifyDefSchemas">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can modify def schema.
            </summary>
        </member>
        <member name="F:InRule.Security.RuleUserRolePermissions.ModifySharedElements">
            <summary>
            <see cref="T:InRule.Security.RuleUserRole"/> can modify shared elements.
            </summary>
        </member>
        <member name="T:InRule.Security.Identifier">
            <summary>
            Strongly-typed identity.
            </summary>
        </member>
        <member name="M:InRule.Security.Identifier.CompareTo(InRule.Security.Identifier)">
            <summary>
            Compares this Identifier to another Identifier, returning an integer that
            indicates the relationship. This method returns a value less than 0 if this is less than value, 0
            if this is equal to value, or a value greater than 0 
            if this is greater than value. 
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:InRule.Security.Identifier.CompareTo(System.Object)">
            <summary>
            Compares this object to another object, returning an integer that
            indicates the relationship. This method returns a value less than 0 if this is less than value, 0
            if this is equal to value, or a value greater than 0 
            if this is greater than value.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>The result of the comparison.</returns>
            <exception cref="T:System.ArgumentException">The ArgumentException is thrown if the <paramref name="obj"/>
            parameter is not of type Identifier.</exception>
        </member>
        <member name="T:InRule.Security.InvalidIdentifierValueException">
            <summary>
            The exception that is thrown when an invalid value is used to create an Identifier or set its value.
            </summary>
        </member>
        <member name="T:InRule.Security.IUnique">
            <summary>
            Unique identifier interface
            </summary>
        </member>
        <member name="T:InRule.Security.UniqueObject">
            <summary>
            Base class for objects that have a unique identifier.
            </summary>
        </member>
        <member name="M:InRule.Security.RuleUser.GetHashCode">
            <summary>
            Returns the hashcode of lowercase Username.
            </summary>
            <returns>The hashcode of lowercase Username.</returns>
        </member>
        <member name="T:InRule.Repository.Service.AlreadyCheckedOutException">
            <summary>
            The exception thrown when an attempt to check out is made for a def that is already checked out by another user.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.CheckOutException">
            <summary>
            The exception thrown when a check out fails for a reason specific to checking out.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.CheckOutException.#ctor(System.String,System.String)">
            <summary>
            Creates a CheckOutException object.
            </summary>
            <param name="defName">The name of the def that is being checked out.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:InRule.Repository.Service.AlreadyCheckedOutException.#ctor(System.String,System.String)">
            <summary>
            Creates an AlreadyCheckedOutException object.
            </summary>
            <param name="defName"></param>
            <param name="userName"></param>
        </member>
        <member name="T:InRule.Repository.Service.AuthenticationException">
            <summary>
            The exception that is thrown when authentication fails.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.AuthorizationException">
            <summary>
            The exception that is thrown when authorization fails.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.CheckInException">
            <summary>
            The exception thrown when a check in fails for a reason specific to checking in.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.CheckInException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a CheckInException object.
            </summary>
            <param name="defId">The ID of the def that is being checked in.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:InRule.Repository.Service.DifferentRevisionException">
            <summary>
            The exception thrown when a check in is attempted and the revision number of the def is different
            from the revision number in the repository.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.DifferentRevisionException.#ctor(System.Int32)">
            <summary>
            Creates a DifferentRevisionException object.
            </summary>
            <param name="defId">The ID of the def that is being checked in.</param>
        </member>
        <member name="T:InRule.Repository.Service.DuplicateNameException">
            <summary>
            The exception that is thrown when a duplicate name exists.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.DuplicateNameException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the DuplicateNameException.
            </summary>
            <param name="typeName">The name of the item that has a duplicate name.</param>
            <param name="name">The duplicate name.</param>
        </member>
        <member name="T:InRule.Repository.Service.InvalidIdException">
            <summary>
            The exception that is thrown when an invalid id is encountered.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.InvalidIdException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the InvalidIdException class and creates the message from the parameter info.
            </summary>
            <param name="id">The invalid id.</param>
            <param name="itemName">The name of the item with the invalid id; for example, a parameter name.</param>
        </member>
        <member name="M:InRule.Repository.Service.InvalidIdException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the InvalidIdException class.
            </summary>
            <param name="id">The invalid id.</param>
            <param name="itemName">The name of the item with the invalid id; for example, a parameter name.</param>
            <param name="message">A String that describes the error. The content of message is intended to be understood by humans.</param>
        </member>
        <member name="T:InRule.Repository.Service.InvalidRequestException">
            <summary>
            The exception that is thrown when a web service method receives a request other than the one it expects.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.InvalidRevisionException">
            <summary>
            The exception that is thrown when an invalid id is encountered.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.InvalidRevisionException.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of the InvalidRevisionException class and creates the message from the parameter info.
            </summary>
            <param name="defName"></param>
            <param name="revision"></param>
        </member>
        <member name="T:InRule.Repository.Service.NoIdException">
            <summary>
            The exception that is thrown when an ID is required but is NoValue.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.NoIdException.#ctor(System.String)">
            <summary>
            Creates an instance of the NoIdException.
            </summary>
            <param name="itemName">The name of the item that requires the ID.</param>
        </member>
        <member name="P:InRule.Repository.Service.NoIdException.ItemName">
            <summary>
            The name of the item that has no ID.
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.NotCheckedOutException">
            <summary>
            The exception thrown when a check in is attempted on a file that is not checked out.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.NotCheckedOutException.#ctor(System.Int32)">
            <summary>
            Creates a NotCheckedOutException object.
            </summary>
            <param name="defId">The ID of the def that is being checked in.</param>
        </member>
        <member name="T:InRule.Repository.Service.SaveException">
            <summary>
            The exception thrown when a save fails for a reason specific to saving.
            </summary>
        </member>
        <member name="M:InRule.Repository.Service.SaveException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a SaveException object.
            </summary>
            <param name="defId">The ID of the def that is being saved out.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:InRule.Repository.Service.ServiceCommunicationException">
            <summary>
            The exception that is thrown when communication fails to the service.
            </summary>
        </member>
        <member name="P:InRule.Repository.Templates.LoaderTemplateDef.NameAlias">
            <summary>
            An alias name for the template definition.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.GetEventPage(System.Int32,System.Int32)">
            <summary>
            Gets a page of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances.
            </summary>
            <param name="startEvent">The starting event identifier.</param>
            <param name="length">The maximum number of events to return in the page.</param>
            <returns>A page of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.GetXml(InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings)">
            <summary>
            Generates an XML representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection.
            Attributes and evaluations are also included.
            </summary>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
            <returns>A <see cref="T:System.String"/> representing the XML of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.GetXml">
            <summary>
            Generates an XML representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection using the default <see cref="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings"/>.
            Attributes and evaluations are also included.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the XML of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.WriteXml(System.Xml.XmlWriter,InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings)">
            <summary>
            Writes an XML representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection to an <see cref="T:System.Xml.XmlWriter"/>.
            Attributes and evaluations are also included.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.WriteXml(System.String,InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings)">
            <summary>
            Writes an XML representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection to a file.
            Attributes and evaluations are also included.
            </summary>
            <param name="path">The path of the file to write to.</param>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.WriteXml(System.String)">
            <summary>
            Writes an XML representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection to a file using the default <see cref="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings"/>.
            Attributes and evaluations are also included.
            </summary>
            <param name="path">The path of the file to write to.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.WriteTabDelimited(System.IO.TextWriter)">
            <summary>
            Writes a tab-delimited representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.ITraceEventCollection.WriteTabDelimited(System.String)">
            <summary>
            Writes a tab-delimited representation of all the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in the collection to a file.
            </summary>
            <param name="path">The path of the file to export to.</param>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.ITraceEventCollection.EventCount">
            <summary>
            Gets the number of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances in this collection.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.TraceEvent">
            <summary>
            Represents an event in rule execution derived from a combination of <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> instances.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.EventId">
            <summary>
            Gets the identifier of the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.ParentEventId">
            <summary>
            Gets the identifier of the parent <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.Timestamp">
            <summary>
            Gets the timestamp of the original <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> from which the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> was generated.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.EventFrameId">
            <summary>
            Gets the identifier of the original <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> from which the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> was generated.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.DisplayName">
            <summary>
            Gets the event's display name.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.Result">
            <summary>
            Gets the event's result.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.ValueChanged">
            <summary>
            Gets whether the value of this event was changed by the rule engine.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.SourceDefId">
            <summary>
            Gets the source <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> identifier on which the rule engine was operating.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.StateIdentifier">
            <summary>
            Gets the textual representation of the state identifier on which the rule engine was operating.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.ActivityType">
            <summary>
            Gets the activity type of the event.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.AttributeCount">
            <summary>
            Gets the number of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventAttribute"/> instances generated by the event.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.EvaluationCount">
            <summary>
            Gets the number of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> instances generated by the event.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.Context">
            <summary>
            Gets the name of the context under which the event occurred.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEvent.NestedEventId">
            <summary>
            Gets the hierarchical representation of the event's ancestors.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.TraceEventAttribute">
            <summary>
            Represents an attribute of a <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventAttribute.EventId">
            <summary>
            Gets the identifier of the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventAttribute.Name">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventAttribute.Value">
            <summary>
            Gets the value of the attribute.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation">
            <summary>
            Represents the function evaluation of a <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluation.EventId">
            <summary>
            Gets the identifier of the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluation.RootFrameId">
            <summary>
            Gets the identifier of the original <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> from which the <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> was generated.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluation.DisplayName">
            <summary>
            Gets the display name of the evaluation.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings">
            <summary>
            Configures the XML rendering features of the <see cref="T:InRule.Runtime.Tracing.Events.ITraceEventCollection"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.InRuleTraceEventXmlVersion">
            <summary>
            The version of the InRule event tracing XML schema.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings"/> with default settings.
            This will create a default <see cref="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.XmlWriterSettings"/> instance, set its Indent to true, IncludeParentEventId to true, IncludeStateId to true, IncludeAttributes to true, and IncludeEvaluations to true. 
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings"/>.
            </summary>
            <param name="indent">Sets the Indent property on the default <see cref="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.XmlWriterSettings"/>.</param>
            <param name="includeParentEventId">Whether to include the parent event identifier.</param>
            <param name="includeRootFrameId">Whether to include the identifier of the event's root frame.</param>
            <param name="includeTimestamp">Whether to include the timestamp of the event's root frame.</param>
            <param name="includeStateId">Whether to include the state identifier.</param>
            <param name="includeAttributes">Whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventAttribute"/> instances.</param>
            <param name="includeEvaluations">Whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> instances.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.#ctor(System.Xml.XmlWriterSettings,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings"/>.
            </summary>
            <param name="xmlWriterSettings">Fine-grained <see cref="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.XmlWriterSettings"/> to use.</param>
            <param name="includeParentEventId">Whether to include the parent event identifier.</param>
            <param name="includeRootFrameId">Whether to include the identifier of the event's root frame.</param>
            <param name="includeTimestamp">Whether to include the timestamp of the event's root frame.</param>
            <param name="includeStateId">Whether to include the state identifier.</param>
            <param name="includeAttributes">Whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventAttribute"/> instances.</param>
            <param name="includeEvaluations">Whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> instances.</param>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.XmlWriterSettings">
            <summary>
            Gets the <see cref="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.XmlWriterSettings"/> which controls the fine-grained settings of XML writing.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeParentEventId">
            <summary>
            Gets whether to include the parent event identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeRootFrameId">
            <summary>
            Gets whether to include the identifier of the event's root frame.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeTimestamp">
            <summary>
            Gets whether to include timestamp of the event's root frame.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeStateId">
            <summary>
            Gets whether to include the state identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeAttributes">
            <summary>
            Gets whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventAttribute"/> instances.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventXmlWriterSettings.IncludeEvaluations">
            <summary>
            Gets whether to include <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> instances.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.ITraceAspect">
            <summary>
            Defines an aspect of a <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceAspect.Name">
            <summary>
            Gets the name of the aspect.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceAspect.Value">
            <summary>
            Gets the value of the aspect.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceAspect.DataType">
            <summary>
            Gets the <see cref="T:InRule.Runtime.Tracing.TraceDataType"/> of the aspect.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.ITraceAspectCollection">
            <summary>
            Defines a collection of <see cref="T:InRule.Runtime.Tracing.Frames.ITraceAspect"/> instances.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.ITraceFrame">
            <summary>
            Defines a trace frame generated by rule execution.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.ITraceFrame.GetAspectValue(System.String)">
            <summary>
            Gets the value of one of the frame's aspects.
            </summary>
            <param name="name">The name of the aspect to search for.</param>
            <returns>The value of the aspect searched for, or null if not found.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.ITraceFrame.HasAspect(System.String)">
            <summary>
            Gets whether this frame has a specific aspect.
            </summary>
            <param name="name">The name of the aspect to search for.</param>
            <returns>True if this frame contains the specified aspect name, otherwise False.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.ITraceFrame.GetParentFrame">
            <summary>
            Gets the parent frame of this frame if it exists, otherwise null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.Timestamp">
            <summary>
            Gets the time the frame was recorded, relative to the start of the trace.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.FrameId">
            <summary>
            Gets the unique identifier of the frame.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ParentFrameId">
            <summary>
            Gets the parent frame identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.SourceDefId">
            <summary>
            Gets the identifier of the source <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ChildFrames">
            <summary>
            Gets a collection of child frames from this frame.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.Aspects">
            <summary>
            Gets a collection of aspects from this frame.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.StateContainerKey">
            <summary>
            Gets the resolved state container name.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.StateContainerId">
            <summary>
            Gets the state container unique identifier
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.StateValueKey">
            <summary>
            Gets the resolved state value key identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.StateValueId">
            <summary>
            Gets the state value unique identifier
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.FrameType">
            <summary>
            Gets the name of the frame type.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ActivityType">
            <summary>
            The <see cref="T:InRule.Runtime.Tracing.Frames.TraceActivityType"/> of the frame. This is a generic value derived from the more specific <see cref="P:InRule.Runtime.Tracing.Frames.ITraceFrame.FrameType"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.Result">
            <summary>
            Gets the "Result" aspect of this frame if it exists, otherwise null.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ResultDataType">
            <summary>
            Gets the <see cref="T:InRule.Runtime.Tracing.TraceDataType"/> of the "Result" aspect if it exists, otherwise <see cref="F:InRule.Runtime.Tracing.TraceDataType.Identifier"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.Value">
            <summary>
            Gets the "Value" aspect of this frame if it exists, otherwise null.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ValueDataType">
            <summary>
            Gets the <see cref="T:InRule.Runtime.Tracing.TraceDataType"/> of the "Value" aspect if it exists, otherwise <see cref="F:InRule.Runtime.Tracing.TraceDataType.Identifier"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.MemberIndex">
            <summary>
            Gets the "MemeberIndex" aspect of this frame if it exists, otherwise -1.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.ArgumentIndex">
            <summary>
            Gets the "ArgumentIndex" aspect of this frame if it exists, otherwise -1.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.ITraceFrame.Name">
            <summary>
            Gets the "Name" aspect of this frame if it exists, otherwise null.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.ITraceFrameCollection">
            <summary>
            Defines a collection of <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> instances.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.EvalFunctionEvalFunctionArgPair">
            <summary>
            Represents the pair of an EvaluateFunctionArgument frame and its EvaluateFunction child frame.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.TraceActivityNames">
            <summary>
            Provides fast Dictionary access to display names of <see cref="T:InRule.Runtime.Tracing.Frames.TraceActivityType"/>s.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.TraceActivityType">
            <summary>
            Represents a general list of trace activities derived from the more specific frame types.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.TraceDataType">
            <summary>
            Represents the data type of frame aspects recorded by the rule execution.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType">
            <summary>
            Indicates the type of rule engine function syntax.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Unknown">
            <summary>
            Unknown function type.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Operator">
            <summary>
            An operator. (E.g. 1 + 2)
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Function">
            <summary>
            A function. (E.g. Concat())
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Literal">
            <summary>
            A literal. (E.g. "Test")
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Attribute">
            <summary>
            An attribute.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceEvalSyntaxType.Reference">
            <summary>
            An element reference.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings">
            <summary>
            Configures the XML rendering features of the <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/>.
            </summary>
        </member>
        <member name="F:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.InRuleTraceFrameXmlVersion">
            <summary>
            The version of the InRule frame tracing XML schema.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings"/> with default settings.
            This will create a default <see cref="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.XmlWriterSettings"/> instance, set its Indent to true, and IncludeStateId to true.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings"/>.
            </summary>
            <param name="indent">Sets the Indent property on the default <see cref="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.XmlWriterSettings"/>.</param>
            <param name="includeTimestamp">Whether to include the frame's timestamp.</param>
            <param name="includeFrameId">Whether to include the frame's identifier.</param>
            <param name="includeSourceDefId">Whether to include the frame's source <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> identifier.</param>
            <param name="includeStateId">Whether to include the state identifier.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.#ctor(System.Xml.XmlWriterSettings,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings"/>.
            </summary>
            <param name="xmlWriterSettings">Fine-grained <see cref="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.XmlWriterSettings"/> to use.</param>
            <param name="includeTimestamp">Whether to include the frame's timestamp.</param>
            <param name="includeFrameId">Whether to include the frame's identifier.</param>
            <param name="includeSourceDefId">Whether to include the frame's source <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> identifier.</param>
            <param name="includeStateId">Whether to include the state identifier.</param>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.XmlWriterSettings">
            <summary>
            Gets the <see cref="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.XmlWriterSettings"/> which controls the fine-grained settings of XML writing.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.IncludeTimestamp">
            <summary>
            Gets whether to include the frame's timestamp.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.IncludeFrameId">
            <summary>
            Gets whether to include the frame's identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.IncludeSourceDefId">
            <summary>
            Gets whether to include the frame's source <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> identifier.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings.IncludeStateId">
            <summary>
            Gets whether to include the state identifier.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.IExecutionTrace">
            <summary>
            Defines a mechanism to read a rule execution trace.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.GetRootFrame">
            <summary>
            Provides access to the root engine request frame at the start of the trace.
            </summary>
            <returns>A <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> representing the frame at the start of the trace.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.GetFrame(System.Int64)">
            <summary>
            Gets a frame from its identifier.
            </summary>
            <param name="frameId">The identifier to search for.</param>
            <returns>The <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> representing the frame with the specified identifier, or null if not found.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.GetXml(InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings)">
            <summary>
            Generates an XML representation of the complete execution trace.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the complete execution trace.</returns>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.GetXml">
            <summary>
            Generates an XML representation of the complete execution trace using default <see cref="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the complete execution trace.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.WriteXml(System.Xml.XmlWriter,InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings)">
            <summary>
            Writes an XML representation of the complete execution trace to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.WriteXml(System.String,InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings)">
            <summary>
            Writes an XML representation of the complete execution trace to a file.
            </summary>
            <param name="path">The path of the file to write to.</param>
            <param name="settings">The settings to configure the <see cref="T:System.Xml.XmlWriter"/>.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.WriteXml(System.String)">
            <summary>
            Writes an XML representation of the complete execution trace to a file using default <see cref="T:InRule.Runtime.Tracing.Frames.TraceFrameXmlWriterSettings"/>.
            </summary>
            <param name="path">The path of the file to write to.</param>
        </member>
        <member name="M:InRule.Runtime.Tracing.IExecutionTrace.WriteExportPackage(System.String)">
            <summary>
            Exports the execution trace data to an archive format. This may be loaded at a later date and queried.
            The output file will be overwritten if it already exists.
            </summary>
            <param name="path">The output path for the export package.</param>
        </member>
        <member name="P:InRule.Runtime.Tracing.IExecutionTrace.Manifest">
            <summary>
            Gets the trace manifest information for persistence.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.IExecutionTrace.FrameCount">
            <summary>
            Gets the total number of frames captured in the execution trace.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.IExecutionTrace.RuleApplicationDef">
            <summary>
            The <see cref="P:InRule.Runtime.Tracing.IExecutionTrace.RuleApplicationDef"/> used to generate the trace.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.IExecutionTrace.EventReader">
            <summary>
            Gets a <see cref="T:InRule.Runtime.Tracing.ITraceEventReader"/> for this trace.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail">
            <summary>
            Represents the source and result syntax expression nodes of a <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>'s <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/>.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.SourceKey">
            <summary>
            Gets the source key which links this source expression node with a result expression node.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.Source">
            <summary>
            Gets this node of the source expression.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.FrameId">
            <summary>
            Gets the frame Id of this node.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.Result">
            <summary>
            Gets this node of the result expression.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.ArgumentIndex">
            <summary>
            Gets the function argument index if this expression node is an argument to a function or operator.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.MemberIndex">
            <summary>
            Gets the member index of this expression node if this is an argument of an aggregate function.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.NodeType">
            <summary>
            Gets the node type of this expression node.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.ChildPairs">
            <summary>
            Gets the child expression nodes of this expression.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.HasChildPairs">
            <summary>
            Whether this expression node has child expression nodes.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.SourceExpression">
            <summary>
            Gets the complete source expression relative to this source expression node.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.Events.TraceEventEvaluationDetail.ResultExpression">
            <summary>
            Gets the complete result expression relative to this result expression node.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.ITraceEventReader">
            <summary>
            Defines a mechanism to read <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances from an <see cref="T:InRule.Runtime.Tracing.IExecutionTrace"/>.
            </summary>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetAllEvents">
            <summary>
            Gets all events captured in the execution trace.
            </summary>
            <returns>The complete list of trace events.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetFilteredEvents(System.String)">
            <summary>
            Gets a filtered list of events captured in the execution trace.
            </summary>
            <param name="filterPattern">A wildcard pattern of events to filter on.</param>
            <returns>A filtered collection of trace events.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetFilteredEvents(System.Guid)">
            <summary>
            Gets a filtered list of events captured in the execution trace for a specific Def.
            </summary>
            <param name="sourceDefId">The <see cref="T:System.Guid"/> identifier of the source Def to search for.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetAttributes(InRule.Runtime.Tracing.Events.TraceEvent)">
            <summary>
            Gets all the trace event attributes contained by the specified <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
            <param name="traceEvent">The <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> containing the attributes.</param>
            <returns>An array of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventAttribute"/> instances contained by the specified event.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetEvaluations(InRule.Runtime.Tracing.Events.TraceEvent)">
            <summary>
            Gets all the trace event evaluations contained by the specified <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/>.
            </summary>
            <param name="traceEvent">The <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> containing the evaluations.</param>
            <returns>An array of <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> instances contained by the specified event.</returns>
        </member>
        <member name="M:InRule.Runtime.Tracing.ITraceEventReader.GetEvaluationDetail(InRule.Runtime.Tracing.Events.TraceEventEvaluation)">
            <summary>
            Gets the source and result evaluation expression nodes for a specific <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/>.
            </summary>
            <param name="evaluation">The <see cref="T:InRule.Runtime.Tracing.Events.TraceEventEvaluation"/> representing the root frame of this evaluation detail.</param>
            <returns>A source/result expression pair.</returns>
        </member>
        <member name="P:InRule.Runtime.Tracing.ITraceEventReader.EventCount">
            <summary>
            Gets the total number of events captured in the execution trace.
            </summary>
        </member>
        <member name="T:InRule.Runtime.Tracing.TraceManifest">
            <summary>
            Represents a manifest for persisted trace files.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.ManifestVersion">
            <summary>
            Gets or sets the version of the manifest schema.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.TraceReaderVersion">
            <summary>
            Gets or sets the version of the trace reader used to generate the trace file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.TraceReaderAssemblyQualifiedName">
            <summary>
            Gets or sets the AssemblyQualifiedName of the trace reader used to generate the trace file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.OriginalFileName">
            <summary>
            Gets or sets the original file name of the uncompressed trace file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.RuleApplicationName">
            <summary>
            Gets or sets the name of the RuleApplication used to generate the trace file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.FrameCount">
            <summary>
            Gets or sets the number of <see cref="T:InRule.Runtime.Tracing.Frames.ITraceFrame"/> instances contained in the trace file.
            </summary>
        </member>
        <member name="P:InRule.Runtime.Tracing.TraceManifest.EventCount">
            <summary>
            Gets or sets the numbver of <see cref="T:InRule.Runtime.Tracing.Events.TraceEvent"/> instances contained in the trace file.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.SoapWsdlProxyLoader.BuildWebServiceContracts(InRule.Repository.WebServiceDef,System.Boolean)">
            <summary>
            [BuildWebServiceContracts] Starts the process of investigating the Services, Ports and Operations for a web service and stores them
            </summary>
            <param name="webServiceDef"></param>
            <param name="useEmeddedWsdl"></param>
            <returns>InRule.Repository.WebServiceDef</returns>
        </member>
        <member name="M:InRule.Repository.Vocabulary.AddCollectionMemberTemplateDef.CheckForModified(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Checks against another AddCollectionMemberTemplateDef to see if it has been modified.
            </summary>
            <param name="editedDef">
            The other definition.
            </param>
            <param name="forSecurity"></param>
            <returns>
            <c>True</c> if the two definitions are different.
            </returns>
            <remarks>
            Since the base class implementation does not consider collections, this method specifically checks the 
            Placeholders and MemberValues properties when deciding if the def has been modified.
            </remarks>
        </member>
        <member name="M:InRule.Repository.Vocabulary.ExecuteRulesetTemplateDef.CheckForModified(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Checks against another ExecuteRulesetTemplateDef to see if it has been modified.
            </summary>
            <param name="editedDef">
            The other definition.
            </param>
            <param name="forSecurity"></param>
            <returns>
            <c>True</c> if the two definitions are different.
            </returns>
            <remarks>
            Since the base class implementation does not consider collections, this method specifically checks the 
            Placeholders and Parameters properties when deciding if the def has been modified.
            </remarks>
        </member>
        <member name="M:InRule.Repository.Vocabulary.ExpressionTemplateDef.CheckForModified(InRule.Repository.RuleRepositoryDefBase,System.Boolean)">
            <summary>
            Checks against another ExpressionTemplateDef to see if it has been modified.
            </summary>
            <param name="editedDef">
            The other definition.
            </param>
            <param name="forSecurity"></param>
            <returns>
            <c>True</c> if the two definitions are different.
            </returns>
            <remarks>
            Since the base class implementation does not consider collections, this method specifically checks the 
            Impersonates and Placeholders properties when deciding if the def has been modified.
            </remarks>
        </member>
        <member name="M:InRule.Repository.Vocabulary.ImpersonationDef.CompareTo(InRule.Repository.Vocabulary.ImpersonationDef)">
            <summary>
            Compares this instance of <see cref="T:InRule.Repository.Vocabulary.ImpersonationDef"/> to another.
            </summary>
            <param name="otherDef">
            The other definition.
            </param>
            <returns>
            <c>True</c> if the ImpersonationDefType and RuleFunctionDataType properties are equal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:InRule.Repository.Vocabulary.ImpersonationDefCollection.CompareRuleFunctionDataTypes(InRule.Repository.Vocabulary.ImpersonationDefCollection)">
            <summary>
            Compares the rule function data types in this collection to another collection.
            </summary>
            <param name="otherDef">
            The other collection.
            </param>
            <returns>
            <c>True</c> if the two collections have the same list; <c>false</c> if not.
            </returns>
        </member>
        <member name="F:InRule.Repository.Utilities.Set`1.PlaceholderObject">
            <summary>
            The placeholder object used as the value for the <c>IDictionary</c> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all <c>Sets</c>.
            </remarks>
        </member>
        <member name="F:InRule.Repository.Utilities.Set`1.InternalDictionary">
            <summary>
            Provides the storage for elements in the <c>Set</c>, stored as the key-set
            of the <c>IDictionary</c> object.  Set this object in the constructor
            if you create your own <c>Set</c> class.  
            </summary>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="item">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="item">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="arrayIndex">The zero-based index where copying will start.</param>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="item">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.ContainsAll(InRule.Repository.Utilities.Set{`0})">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="set">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Union(InRule.Repository.Utilities.Set{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="set">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.UnionWith(InRule.Repository.Utilities.Set{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            This set is modified during the operation but the input set is not.  The return value
            is this set with the extra elements added in.
            </summary>
            <param name="set">A collection of elements.</param>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Intersect(InRule.Repository.Utilities.Set{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="set">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.IntersectWith(InRule.Repository.Utilities.Set{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  This set is modified during the operation but the input set is not.  The return value
            is this set with the appropriate elements removed.
            </summary>
            <param name="set">A set of elements.</param>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.Clone(System.Int32)">
            <summary>
            Returns a clone of the <c>Set</c> instance with the specified capacity.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:InRule.Repository.Utilities.Set`1.InitializeComparer">
            <summary>
            Called after deserialization to bind to a new IEqualityComparer instance
            NOTE: the comparer instance is not persisted as part of serialization
            </summary>
        </member>
        <member name="F:InRule.Repository.Utilities.Set`1.Items">
            <summary>
            DataContractSerializer surrogate which should be null always except during serialization
            NOTE: other serializers will ignore this field
            </summary>
        </member>
        <member name="P:InRule.Repository.Utilities.Set`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Templates.TemplateArgumentDef.AllowsArrayTypeUserCustomization">
            <summary>
            If the TemplateArgumentArrayType is not None,
            this toggles whether the user can change the display style
            for the arguments, such as converting a comma-separated InLine
            array to a BulletList.
            </summary>
        </member>
        <member name="M:InRule.Repository.Vocabulary.TemplateAvailabilityMerge.Merge(InRule.Repository.Vocabulary.TemplateAvailabilitySettingCollection)">
            <returns>true if something was merged, false otherwise</returns>
        </member>
        <member name="T:InRule.Repository.Vocabulary.TemplateType">
            <summary>
            
            </summary>
        </member>
        <member name="P:InRule.Repository.Vocabulary.TemplateValueDef.IsAllowedInParentContext">
            <summary>
            Indicates if this action is valid under the Action folder/Ruleset where it is authored.
            </summary>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetValueListsReferencedByEntity(InRule.Repository.EntityDef)">
            <summary>
            Gets all valuelists which are referenced by fields of the entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetDataElementsReferencedByEntity(InRule.Repository.EntityDef)">
            <summary>
            gets a list of names of all dataelements referenced by entity actions
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetEndPointsReferencedByEntity(InRule.Repository.EntityDef)">
            <summary>
            gets a list of names of all endpoints referenced by entity actions
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetDataElementsReferencedByRuleSets(InRule.Repository.RuleElements.RuleSetDef)">
            <summary>
            Gets a list of names of all dataelements referenced by independent Ruleset actions
            </summary>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetEndPointsReferencedByRuleSets(InRule.Repository.RuleElements.RuleSetDef)">
            <summary>
            gets a list of names of all endpoints referenced by independent Ruleset actions
            </summary>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetDataElementsReferencedByDataElements(InRule.Repository.DataElementDef)">
            <summary>
            gets a list of names of all dataelements referenced by dataelements
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetEndPointsReferencedByDataElements(InRule.Repository.DataElementDef)">
            <summary>
            gets a list of names of all endpoints referenced by dataelements
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.GetReferencedElements(InRule.Repository.RuleElements.RuleElementDefCollection)">
            <summary>
            checks all ruleelements to select elements referenced by action defs
            </summary>
            <param name="ruleelements"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectReferencedElementbyAction(InRule.Repository.RuleElements.RuleActionDef)">
            <summary>
            gets endpoint/data element referenced by action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectReferencedElementsbyData(InRule.Repository.DataElementDef)">
            <summary>
            gets endpts/data elements referenced by dataelement
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectDatabaseEndPointReferencedByDataElement(InRule.Repository.DataElementDef)">
            <summary>
            selects the database endpoint referenced by data element
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectXMLDocPathEndPtReferencedByDataElement(InRule.Repository.DataElementDef)">
            <summary>
            Selects the xml document path endpoint referenced by data element
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectXMLDocumentReferencedByXPathQuery(InRule.Repository.DataElementDef)">
            <summary>
            selects the xml document referenced by xpathquery
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.GetReferencedRuleAppElementsUtility.SelectListSourceReferencedByDataElement(InRule.Repository.DataElementDef)">
            <summary>
            selects the data element(table/sql query) referenced by valuelist def
            </summary>
            <param name="def"></param>
        </member>
        <member name="T:InRule.Repository.Utilities.RuleDisplayUtility">
            <summary>
            Static methods used to retrieve display/authoring values from <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>s
            </summary>
        </member>
        <member name="M:InRule.Repository.Utilities.RuleDisplayUtility.GetEntityNames(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Gets a collection containing the names of all the <see cref="T:InRule.Repository.EntityDef"/>s in the <see cref="T:InRule.Repository.RuleApplicationDef"/> to
            which the specified <see cref="T:InRule.Repository.RuleRepositoryDefBase"/> belongs
            </summary>
            <param name="ruleDef">rule element whose owning <see cref="T:InRule.Repository.RuleApplicationDef"/> contains the desired entities</param>
            <returns><see cref="T:System.String"/>[] containing the names of all the <see cref="T:InRule.Repository.EntityDef"/>s in the <see cref="T:InRule.Repository.RuleApplicationDef"/></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.RuleDisplayUtility.GetFieldNames(InRule.Repository.IContainsFields)">
            <summary>
            gets a collection containing the names of all the <see cref="T:InRule.Repository.FieldDef"/>s in the specified <see cref="T:InRule.Repository.IContainsFields"/>
            </summary>
            <param name="fieldContainer"><see cref="T:InRule.Repository.IContainsFields"/> containing the desired field names</param>
            <returns><see cref="T:System.String"/>[] containing the names of all the <see cref="T:InRule.Repository.FieldDef"/>s in the <see cref="T:InRule.Repository.IContainsFields"/></returns>
        </member>
        <member name="T:InRule.Repository.ValidationDef">
            <summary>
            Validation repository definition
            </summary>
        </member>
        <member name="T:InRule.Repository.ValidationDefCollection">
            <summary>
            Collection of ValidationDef
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.FieldValueDef.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:InRule.Repository.ValueLists.SqlValueListParameterDef">
            <summary>
            Represents a key-value pair that is used to assign a parameter value to a value-list query
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.SqlValueListParameterDef.Passthru">
            <summary>
            Gets or sets whether the value is a passthru value. The default is false.
            </summary>
        </member>
        <member name="T:InRule.Repository.ValueLists.ValueListDefCollection">
            <summary>
            Collection of ValueLists
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListItemDef.Value">
            <summary>
            The value of the list item.
            </summary>
            <remarks>
            Must be unique.
            </remarks>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListItemDef.DisplayText">
            <summary>
            The optional display name of the list item.
            </summary>
            <remarks>
            Must be unique when specified.
            </remarks>
        </member>
        <member name="M:InRule.Repository.ValueLists.ValueListReferenceDef.CreateValueListName(InRule.Repository.FieldDef)">
            <summary>
            Creates the name of a value list for a field.
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListReferenceDef.Parameters">
            <summary>
            Gets the arguments for the value list.
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListReferenceDef.Name">
            <summary>
            Gets/sets the name of the item. Note that the name of the value list may be set/retrieved via the <see cref="P:InRule.Repository.ValueLists.ValueListReferenceDef.SourceValueListName"/> property.
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListReferenceDef.SourceValueListName">
            <summary>
            The name of the value list this reference refers to.
            </summary>
        </member>
        <member name="P:InRule.Repository.ValueLists.ValueListReferenceDef.ContainsContextParameters">
            <summary>
            Indicates whether the <see cref="P:InRule.Repository.ValueLists.ValueListReferenceDef.Parameters"/> collection has any context arguments.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.AddCollectionMemberActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.AddCollectionMemberActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IAddCollectionMemberActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ClearCollectionActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ClearCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IClearCollectionActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.CopyCollectionActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.CopyCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ICopyCollectionActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.CopyEntityActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.CopyEntityActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ICopyEntityActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.DataFolderDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.DataFolderDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IDataFolderDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.DeclareVariableActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.DeclareVariableActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IDeclareVariableActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.EntityDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EntityDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IEntityDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExclusiveRuleDefaultRootDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDefaultRootDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefaultRootDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExclusiveRuleDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExecuteActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExecuteActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExecuteMethodActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExecuteMethodActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExecuteSqlQueryActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExecuteSqlQueryActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExecuteWebServiceOperationActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExecuteWebServiceOperationActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ExecuteXPathQueryActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IExecuteXPathQueryActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.FieldDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.FieldDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IFieldDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.FireEventActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.FireEventActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IFireEventActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.FireNotificationActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.FireNotificationActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IFireNotificationActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IAddCollectionMemberActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.AddCollectionMemberActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.AddCollectionMemberActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IAddCollectionMemberActionDefView.SetErrorMessage(InRule.Repository.RuleElements.AddCollectionMemberActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IClearCollectionActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ClearCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ClearCollectionActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IClearCollectionActionDefView.SetErrorMessage(InRule.Repository.RuleElements.ClearCollectionActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ICopyCollectionActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.CopyCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.CopyCollectionActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ICopyCollectionActionDefView.SetErrorMessage(InRule.Repository.RuleElements.CopyCollectionActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ICopyEntityActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.CopyEntityActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.CopyEntityActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ICopyEntityActionDefView.SetErrorMessage(InRule.Repository.RuleElements.CopyEntityActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IDataFolderDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.DataFolderDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.DataFolderDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IDataFolderDefView.SetErrorMessage(InRule.Repository.DataFolderDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IDecisionTableDefView.SetErrorMessage(InRule.Repository.DecisionTables.DecisionTableDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
            //DataFolderDef
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IDeclareVariableActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.DeclareVariableActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.DeclareVariableActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IDeclareVariableActionDefView.SetErrorMessage(InRule.Repository.RuleElements.DeclareVariableActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IEntityDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EntityDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.EntityDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IEntityDefView.SetErrorMessage(InRule.Repository.EntityDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefaultRootDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDefaultRootDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExclusiveRuleDefaultRootDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefaultRootDefView.SetErrorMessage(InRule.Repository.RuleElements.ExclusiveRuleDefaultRootDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExclusiveRuleDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExclusiveRuleDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExclusiveRuleDefView.SetErrorMessage(InRule.Repository.RuleElements.ExclusiveRuleDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExecuteActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExecuteActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExecuteActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExecuteActionDefView.SetErrorMessage(InRule.Repository.RuleElements.ExecuteActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExecuteMethodActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExecuteMethodActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExecuteMethodActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExecuteMethodActionDefView.SetErrorMessage(InRule.Repository.RuleElements.ExecuteMethodActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExecuteSqlQueryActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExecuteSqlQueryActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExecuteSqlQueryActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExecuteSqlQueryActionDefView.SetErrorMessage(InRule.Repository.RuleElements.ExecuteSqlQueryActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExecuteWebServiceOperationActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExecuteWebServiceOperationActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExecuteWebServiceOperationActionDefController"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IExecuteXPathQueryActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.ExecuteXPathQueryActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ExecuteXPathQueryActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IExecuteXPathQueryActionDefView.SetErrorMessage(InRule.Repository.RuleElements.ExecuteXPathQueryActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IFieldDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.FieldDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.FieldDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IFieldDefView.SetErrorMessage(InRule.Repository.FieldDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="P:InRule.Repository.ViewsAndControllers.IFieldDefView.ValueList">
            <summary>
            Gets or sets the value list reference, if one exists.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IFireEventActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.FireEventActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.FireEventActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IFireEventActionDefView.SetErrorMessage(InRule.Repository.RuleElements.FireEventActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IFireNotificationActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.FireNotificationActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.FireNotificationActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IFireNotificationActionDefView.SetErrorMessage(InRule.Repository.RuleElements.FireNotificationActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ILanguageRuleDefView.SetErrorMessage(InRule.Repository.RuleElements.LanguageRuleDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IRemoveCollectionMemberActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.RemoveCollectionMemberActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IRemoveCollectionMemberActionDefView.SetErrorMessage(InRule.Repository.RuleElements.RemoveCollectionMemberActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IRuleApplicationDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleApplicationDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.RuleApplicationDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IRuleApplicationDefView.SetErrorMessage(InRule.Repository.RuleApplicationDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/> with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IRuleDefViewMethods">
            <summary>
            Common base interface for methods of Model-View-Controller settings Views.
            </summary>
            <remarks>Used only to determine attribute-marked methods to invoke, not implemented by any classes.</remarks>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IRuleSetDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.RuleSetDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IRuleSetDefView.SetErrorMessage(InRule.Repository.RuleElements.RuleSetDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IRuleSetFolderDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.RuleSetFolderDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IRuleSetFolderDefView.SetErrorMessage(InRule.Repository.RuleElements.RuleSetFolderDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISendMailActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.SendMailActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SendMailActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISendMailActionDefView.SetErrorMessage(InRule.Repository.RuleElements.SendMailActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISendMailServerDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EndPoints.SendMailServerDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SendMailServerDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISendMailServerDefView.SetErrorMessage(InRule.Repository.EndPoints.SendMailServerDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISetFieldInvalidActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.SetFieldInvalidActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SetFieldInvalidActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISetFieldInvalidActionDefView.SetErrorMessage(InRule.Repository.RuleElements.SetFieldInvalidActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISetValueActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.SetValueActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SetValueActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISetValueActionDefView.SetErrorMessage(InRule.Repository.RuleElements.SetValueActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISimpleRuleDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> or <see cref="T:InRule.Repository.RuleElements.WhileRuleDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SimpleRuleDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISimpleRuleDefView.SetErrorMessage(InRule.Repository.RuleElements.SimpleRuleDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISortCollectionActionDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.RuleElements.SortCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SortCollectionActionDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISortCollectionActionDefView.SetErrorMessage(InRule.Repository.RuleElements.SortCollectionActionDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ISqlQueryDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.SqlQueryDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.SqlQueryDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ISqlQueryDefView.SetErrorMessage(InRule.Repository.SqlQueryDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.ITableDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.TableDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.TableDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.ITableDefView.SetErrorMessage(InRule.Repository.TableDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IXmlDocumentDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.XmlDocumentDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.XmlDocumentDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IXmlDocumentDefView.SetErrorMessage(InRule.Repository.XmlDocumentDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IXmlDocumentPathDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.EndPoints.XmlDocumentPathDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.XmlDocumentPathDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IXmlDocumentPathDefView.SetErrorMessage(InRule.Repository.EndPoints.XmlDocumentPathDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.IXPathQueryDefView">
            <summary>
            Model-View-Controller View for <see cref="T:InRule.Repository.XPathQueryDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.XPathQueryDefController"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.IXPathQueryDefView.SetErrorMessage(InRule.Repository.XPathQueryDef,System.String[])">
            <summary>
            Set error message display in view. Called by <see cref="M:InRule.Repository.ViewsAndControllers.RuleDefController.Save"/>  with validation errors info if any.
            </summary>
            <remarks>Is called even when no validation errors occur (with 0-length errorMsgsList).</remarks>
            <param name="model"></param>
            <param name="errorMsgsList"></param>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SqlValueListDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.ValueLists.SqlValueListDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISqlValueListDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.RemoveCollectionMemberActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.RemoveCollectionMemberActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IRemoveCollectionMemberActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.RuleApplicationDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleApplicationDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IRuleApplicationDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.RuleSetDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IRuleSetDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.RuleSetFolderDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.RuleSetFolderDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IRuleSetFolderDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SendMailActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.SendMailActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISendMailActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SendMailServerDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EndPoints.SendMailServerDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISendMailServerDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SetFieldInvalidActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.SetFieldInvalidActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISetFieldInvalidActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SetValueActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.SetValueActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISetValueActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SimpleRuleDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.SimpleRuleDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISimpleRuleDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SortCollectionActionDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.RuleElements.SortCollectionActionDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISortCollectionActionDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.SqlQueryDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.SqlQueryDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ISqlQueryDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.TableDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.TableDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.ITableDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.WebServiceDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.WebServiceDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IWebServiceDefView"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.WebServiceDefController.Import(System.Boolean)">
            <summary>
            Updates existing <see cref="T:InRule.Repository.WebServiceDef"/> Model with a collection of services offered by the WSDL.
            </summary>
            <returns>The existing <see cref="T:InRule.Repository.WebServiceDef"/> Model configured with collection of services offered by the WSDL.</returns>
        </member>
        <member name="M:InRule.Repository.ViewsAndControllers.WebServiceDefController.CreateSchemaEndPoint(System.Boolean@)">
            <summary>
            Creates a new <see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> or configures an existing <see cref="T:InRule.Repository.EndPoints.AssemblyDef"/> representing a schema EndPoint based on the types exposed by the WSDL assigned in the referenced Model.
            </summary>
            <returns>A new or existing <see cref="T:InRule.Repository.EndPoints.AssemblyDef"/>.</returns>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.XmlDocumentDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.XmlDocumentDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IXmlDocumentDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.XmlDocumentPathDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.EndPoints.XmlDocumentPathDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IXmlDocumentPathDefView"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.ViewsAndControllers.XPathQueryDefController">
            <summary>
            Model-View-Controller Controller for <see cref="T:InRule.Repository.XPathQueryDef"/> Model. Used with <see cref="T:InRule.Repository.ViewsAndControllers.IXPathQueryDefView"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Configuration.AssemblyEndPointConfigElement.EndPointAssemblyPath">
            <summary>
            Denotes the relative path to the directory that contains assemblies referenced within various rule applications.
            This location is important because it allows the rule engine to load.
            </summary>
            <remarks>
            Default is "EndPointAssemblies", which is relative from the executing assembly directory.
            </remarks>
        </member>
        <member name="P:InRule.Repository.Configuration.CachesConfigElement.DataCacheDepth">
            <summary>
            Determines the number of data list items that will be held in the Catalog in-process data element cache.
            This cache is used for SQL queried and value lists that are defined in the rule applications.
            </summary>
            <remarks>
            Default is 1000.
            </remarks>
        </member>
        <member name="P:InRule.Repository.Configuration.LicensingConfigElement.LicenseFolder">
            <summary>
            Determines the directory where InRule will look to verify the license file.
            If left undefined or if a valid license file is not found at the specified location, InRule will next check for a valid license file in the bin directory of the application that calls the rule engine.
            </summary>
            <remarks>
            Valid license keys can also be recorded to the machine.config file.
            <para>
            Note this is the path to the directory containing the license file, and not the file itself.
            </para>
            <para>
            Default is null.
            </para>
            </remarks>
        </member>
        <member name="T:InRule.Repository.Configuration.RepositoryConfigSectionHandler">
            <summary>
            For Internal Use Only
            </summary>	
        </member>
        <member name="P:InRule.Repository.Configuration.RepositoryConfigSectionHandler.Config">
            <summary>
            Reads the merged application configuration files (Machine.config/App.config/User.config) and returns the &lt;inrule.repository/&gt;
            configuration section. A new configuration section will be generated with correct default values if this section is not found
            in the configuration file or if the configuration section is malformed.
            </summary>		
        </member>
        <member name="P:InRule.Repository.Configuration.RepositoryConfigSectionHandler.EndPoints">
            <summary>
            Supports the &lt;EndPoints/&gt; tag in the &lt;inrule.repository/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Repository.Configuration.RepositoryConfigSectionHandler.Licensing">
            <summary>
            Supports the &lt;RPLicensingW/&gt; tag in the &lt;inrule.repository/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Repository.Configuration.RepositoryConfigSectionHandler.Caches">
            <summary>
            Supports the &lt;Caches/&gt; tag in the &lt;inrule.repository/&gt; configuration section.
            </summary>
        </member>
        <member name="T:InRule.Authoring.Configuration.AuthoringConfigSectionHandler">
            <summary>
            For Internal Use Only
            </summary> 
        </member>
        <member name="P:InRule.Authoring.Configuration.AuthoringConfigSectionHandler.Config">
            <summary>
            Reads the merged application configuration files (Machine.config/App.config/User.config) and returns the &lt;inrule.authoring/&gt;
            configuration section. A new configuration section will be generated with correct default values if this section is not found
            in the configuration file or if the configuration section is malformed.
            </summary>
        </member>
        <member name="P:InRule.Authoring.Configuration.AuthoringConfigSectionHandler.RuleEngineClient">
            <summary>
            Supports the &lt;RuleEngineClient/&gt; tag in the &lt;inrule.authoring/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Authoring.Configuration.AuthoringConfigSectionHandler.CatalogClient">
            <summary>
            Supports the &lt;CatalogClient/&gt; tag in the &lt;inrule.authoring/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Authoring.Configuration.AuthoringConfigSectionHandler.Tracing">
            <summary>
            Supports the &lt;Tracing/&gt; tag in the &lt;inrule.authoring/&gt; configuration section.
            </summary>
        </member>
        <member name="P:InRule.Authoring.Configuration.CatalogClientConfigElement.CatalogServiceUri">
            <summary>
            The URL address to the InRule Catalog service.
            </summary>
            <remarks>
            Default is an empty string.
            </remarks>
        </member>
        <member name="P:InRule.Authoring.Configuration.CatalogClientConfigElement.DefaultLoginName">
            <summary>
            The default username that is used to connect to the InRule Catalog.
            </summary>
            <remarks>
            Default is null.
            </remarks>
        </member>
        <member name="P:InRule.Authoring.Configuration.RuleEngineClientConfigElement.RuleEngineServiceUri">
            <summary>
            The URL address to access the InRule Rule Engine Service
            </summary>
            <remarks>
            Default is null.
            </remarks>
        </member>
        <member name="P:InRule.Authoring.Configuration.RuleEngineClientConfigElement.ReturnDetailStatisticsInfo">
            <summary>
            Determines if irVerify will run rules with full detailed statistics reporting.
            </summary>
            <remarks>
            Default is True.
            </remarks>
        </member>
        <member name="P:InRule.Authoring.Configuration.TracingConfigElement.LogFileCleanUpInterval">
            <summary>
            The maximum age of a log file. Expired files are deleted during irAuthor start-up.
            </summary>
            <remarks>
            Default is 30 days.
            </remarks>
        </member>
        <member name="T:InRule.Repository.DataElementType">
            <summary>
            Possible values for DataElementType
            </summary>
        </member>
        <member name="T:InRule.Repository.Service.RuleAppDeserializationException">
            <summary>
            Thrown by repository service when XML Deserialization does not work with its Repository schema version.
            Includes original XML, so client can process appropriately for its version.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleAppUpgraderException">
            <summary>
            Thrown from "RuleApplicationDef.Load" / "RuleApplicationDef.LoadXml"
            when there are one or more lost-information upgrader warnings.
            </summary>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Contains(System.String)">
            <summary>
            Indicates whether a value with the given key exists.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the value exists, false if not.</returns>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Copy">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Remove(System.String)">
            <summary>
            Removes a <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> from the collection.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Add(InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem)">
            <summary>
            Adds a <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> to the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> to add.</param>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Add(System.String,System.String)">
            <summary>
            Adds a <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> to the collection.
            </summary>
            <param name="key">The key of the item to add.</param>
            <param name="value">The value of the item to add.</param>
            <returns>A new <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> with the key and value values provided.</returns>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.Add(System.Object)">
            <summary>
            Adds a <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> to the collection.
            </summary>
            <param name="item">The <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> to add.</param>
            <remarks>This method is only for serialization.  Objects of any type other than 
            <see cref="T:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem"/> will throw an exception.</remarks>
        </member>
        <member name="M:InRule.Repository.XmlSerializableStringDictionary.ToSortedArray">
            <summary>
            Get list of attributes sorted by key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.XmlSerializableStringDictionary.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
        </member>
        <member name="P:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem.Key">
            <summary>
            The key of the item.
            </summary>
        </member>
        <member name="P:InRule.Repository.XmlSerializableStringDictionary.XmlSerializableStringDictionaryItem.Value">
            <summary>
            The value of the item.
            </summary>
        </member>
        <member name="T:InRule.Repository.AttributeGroupKey">
            <summary>
            Uniquely identifies a set of key-value pairs for a given <see cref="T:InRule.Repository.RuleRepositoryDefBase"/>.
            </summary>
            <remarks>
            See also <see cref="P:InRule.Repository.RuleRepositoryDefBase.DefMetadataCollectionCollection.Default"/> , which retrieves the Default set of key-value pairs (which are exposed in the InRule authoring tools).
            For retrieving key-value pair sets other than the Default set, a custom <see cref="T:InRule.Repository.AttributeGroupKey"/> must be provided and maintained (having its own unique Guid).
            </remarks>
        </member>
        <member name="T:InRule.Repository.CascadedReferenceDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.CascadedReferenceDef"/>.Contains all cascade references for a entity.
            </summary>
        </member>
        <member name="M:InRule.Repository.CascadedReferenceDefCollection.GetImplicitCascade">
            <summary>
            Returns an Implicit <see cref="T:InRule.Repository.CascadedReferenceDef"/> from collection if any, else null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.CascadedReferenceDefCollection.RemoveImplicitCascade">
            <summary>
            Removes an Implicit <see cref="T:InRule.Repository.CascadedReferenceDef"/> from collection if any.
            </summary>
        </member>
        <member name="P:InRule.Repository.CascadedReferenceDefCollection.ContainsImplicitCascade">
            <summary>
            Gets true if there is atleast one <see cref="P:InRule.Repository.CascadedReferenceDef.IsImplicit"/> cascade in the collection.
            </summary>
        </member>
        <member name="T:InRule.Repository.DataElementDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.DataElementDef"></see>s.
            </summary>
        </member>
        <member name="M:InRule.Repository.DataElementDefCollection.FindElement(System.String)">
            <summary>
            Searches for an element with the given name in the collection, as well as its child collections.
            </summary>
            <param name="elementName">The name of the element to search for.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.DataElementDefCollection.GetElement(System.String)">
            <summary>
            Gets the element from the collection whose name matches <paramref name="elementName" />.
            </summary>
            <param name="elementName">The name of the element to find.</param>
            <returns>The element that matches the given name, or null if none is found.</returns>
        </member>
        <member name="T:InRule.Repository.TableSourceType">
            <summary>
            Possible values for TableSourceType
            </summary>
            
        </member>
        <member name="T:InRule.Repository.Designer.AnchorSymbol">
            <summary>
            Specifies the kind of symbol displayed at one end of a designer connection
            </summary>
        </member>
        <member name="T:InRule.Repository.Designer.ConnectionLayout">
            <summary>
            Stores metadata required to re-create a designer connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.ID">
            <summary>
            Unique identifier for the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.SourceID">
            <summary>
            Unique identifier for the shape at the source end of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.SinkID">
            <summary>
            Unique identifier for the shape at the sink end of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.SourcePort">
            <summary>
            Index of the port on the shape at the source end of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.SinkPort">
            <summary>
            Index of the port on the shape at the sink end of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.Route">
            <summary>
            Path geometry markup defining the route of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.ConnectionType">
            <summary>
            Specifies the kind of the connection
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.ZIndex">
            <summary>
            Coordinate of the connection along the Z-axis of the designer
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.ConnectionLayout.IsSelected">
            <summary>
            The selection state of the designer item
            </summary>
        </member>
        <member name="T:InRule.Repository.Designer.ConnectionType">
            <summary>
            Specifies the kind of a designer connection
            </summary>
        </member>
        <member name="T:InRule.Repository.Designer.DesignerItemLayout">
            <summary>
            Stores metadata required to re-create a designer item
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.ID">
            <summary>
            Unique identifier for the designer item
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.ParentID">
            <summary>
            Unique identifier for the parent of the designer item if it belongs to a group
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.Left">
            <summary>
            Coordinate of the designer item along the X-axis of the designer
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.Top">
            <summary>
            Coordinate of the designer item along the Y-axis of the designer
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.Width">
            <summary>
            Width of the designer item in units of 1/96 of an inch
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.Height">
            <summary>
            Height of the designer item in units of 1/96 of an inch
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.ZIndex">
            <summary>
            Coordinate of the designer item along the Z-axis of the designer
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.IsSelected">
            <summary>
            The selection state of the designer item
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerItemLayout.IsGroup">
            <summary>
            The grouping state of the designer item
            </summary>
        </member>
        <member name="T:InRule.Repository.Designer.DesignerLayout">
            <summary>
            Stores metadata for re-creating a designer
            </summary>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.StartLayout">
            <summary>
            Signals the start of a series of designer item layout operations
            </summary>
            <remarks>
            Layout operations are only valid when invoked between a call to 
            StartLayout and a matching call to EndLayout
            </remarks>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.EndLayout">
            <summary>
            Signals the end of a series of designer item layout operations
            </summary>
            <remarks>
            Layout operations are only valid when invoked between a call to 
            StartLayout and a matching call to EndLayout
            </remarks>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.CreateLayoutCursor">
            <summary>
            Initialize the layout cursor at the start of a series of layout operations
            </summary>
            <returns>Instance of a layout cursor</returns>
            <remarks>
            This is commonly overriden to return a derived cursor type
            </remarks>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.Add(InRule.Repository.Designer.DesignerItemLayout)">
            <summary>
            Add the metadata of a designer item to the metadata for the designer
            </summary>
            <param name="itemLayout">Metadata for the designer item to add</param>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.AddRange(System.Collections.Generic.IEnumerable{InRule.Repository.Designer.DesignerItemLayout})">
            <summary>
            Add the metadata of a collection of designer items to the metadata for the designer
            </summary>
            <param name="itemLayouts">Metadata for the designer items to add</param>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.Add(InRule.Repository.Designer.ConnectionLayout)">
            <summary>
            Add the metadata of a connection to the metadata for the designer
            </summary>
            <param name="connectionLayout">Metadata for the connection to add</param>
        </member>
        <member name="M:InRule.Repository.Designer.DesignerLayout.AddRange(System.Collections.Generic.IEnumerable{InRule.Repository.Designer.ConnectionLayout})">
            <summary>
            Add the metadata of a connection to the metadata for the designer
            </summary>
            <param name="connectionLayouts">Metadata for the connections to add</param>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerLayout.ItemLayouts">
            <summary>
            Stores the metadata for the designer items on the designer
            </summary>
        </member>
        <member name="P:InRule.Repository.Designer.DesignerLayout.ConnectionLayouts">
            <summary>
            Stores the metadata for the connections on the designer
            </summary>
        </member>
        <member name="T:InRule.Repository.Designer.ZoomFactor">
            <summary>
            Exposes constants and methods related to designer zoom factors
            </summary>
        </member>
        <member name="M:InRule.Repository.Designer.ZoomFactor.Clamp(System.Double)">
            <summary>
            Coerces the supplied zoom factor value to be within the bounds of supported zoom factors
            </summary>
            <param name="zoomFactor">The zoom factor to coerce</param>
            <returns>The coerced, valid zoom factor</returns>
        </member>
        <member name="T:InRule.Repository.EndPoints.EndPointDefCollection">
            <summary>
            Collection of EndPointDef
            </summary>
        </member>
        <member name="M:InRule.Repository.EndPoints.EndPointDefCollection.GetAllConnectionStrings">
            <summary>
            Returns all connections strings currently specified.
            </summary>
            <returns>an array of all connection strings.</returns>
        </member>
        <member name="P:InRule.Repository.EndPoints.EndPointDefCollection.Item(InRule.Repository.EndPoints.EndPointDef)">
            <summary>
            Get endpoint object having matching name
            </summary>
            <exception cref="T:System.ApplicationException">If name of specified endpoint does not exist in endpoints list.</exception>
        </member>
        <member name="P:InRule.Repository.EndPoints.EndPointDefCollection.Item(System.String)">
            <summary>
            Get endpoint object having matching name
            </summary>
            <exception cref="T:System.ApplicationException">If specified endpoint name does not exist in endpoints list.</exception>
        </member>
        <member name="T:InRule.Repository.EndPoints.EndPointType">
            <summary>
            Possible values for EndPointType
            </summary>
        </member>
        <member name="T:InRule.Repository.WorkflowDef">
            <summary>
            Represents a Windows Workflow instance
            </summary>
        </member>
        <member name="M:InRule.Repository.WorkflowDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WorkflowDef"/> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:InRule.Repository.WorkflowDef"/> class.</overloads>
        </member>
        <member name="M:InRule.Repository.WorkflowDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.WorkflowDef"/> class with the specified name.
            </summary>
            <param name="name">Specifies the name of the definition</param>
        </member>
        <member name="M:InRule.Repository.WorkflowDef.CheckForValidationErrors(System.Collections.Generic.List{InRule.Repository.CompileError})">
            <summary>
            Gets a list of validation errors for this definition
            </summary>
            <returns>A list of validation errors for this definition</returns>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.IsWf4">
            <summary>
            Indicates whether the workflow is a WF 4 activity.
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.ReferencedAssemblyPaths">
            <summary>
            A list of assemblies referenced by the WorkflowSource
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.WorkflowSource">
            <summary>
            Defines which workflow is wrapped by this <see cref="T:InRule.Repository.WorkflowDef"/> instance
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.LastWorkflowConfigAssemblyPath">
            <summary>
            Assembly containing the optional WorkflowRuntime initialization code
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.WorkflowConfigTypeFullName">
            <summary>
            Namespace-qualified name of .NET type that implements type IWorkflowServicesInitHook,
             for optional WorkflowRuntime initialization
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.ContextEntityPropertyName">
            <summary>
            Property name on root workflow to which the InRule execution context will be databound
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.AuthoringElementTypeName">
            <summary>
            Gets the friendly name for this definition used by authoring tools
            </summary>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.EndPointType">
            <summary>
            Gets the type of this endpoint
            </summary>
            <remarks>This always returns 'Workflow'</remarks>
        </member>
        <member name="P:InRule.Repository.WorkflowDef.EndPointDescription">
            <summary>
            Gets a description for this endpoint
            </summary>
        </member>
        <member name="T:InRule.Repository.EntityDefCollection">
            <summary>
            Collection of EntityDef.
            </summary>
        </member>
        <member name="P:InRule.Repository.EntityDefCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.EntityDef"/> with the specified name.
            </summary>
        </member>
        <member name="T:InRule.Repository.Expressions.CultureState">
            <summary>
            Represents a snapshot in time of culture settings required for parsing
            </summary>
        </member>
        <member name="T:InRule.Repository.Expressions.SeparatorState">
            <summary>
            Represents a snapshot in time of separator settings required for parsing
            </summary>
        </member>
        <member name="T:InRule.Repository.FieldDefCollection">
            <summary>
            Collection of FieldDef
            </summary>
        </member>
        <member name="T:InRule.Repository.FieldDefType">
            <summary>
            Specifies the type of a schema <see cref="T:InRule.Repository.FieldDef"/>
            </summary>
        </member>
        <member name="F:InRule.Repository.FieldDefType.Field">
            <summary>
            Simple <see cref="T:InRule.Repository.FieldDef"/> for containing a typed value
            </summary>
        </member>
        <member name="F:InRule.Repository.FieldDefType.Calculation">
            <summary>
            A <see cref="T:InRule.Repository.FieldDef"/> whose typed value is calculated
            </summary>
        </member>
        <member name="F:InRule.Repository.FieldDefType.Collection">
            <summary>
            A <see cref="T:InRule.Repository.FieldDef"/> representing a collection of typed values
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleApplicationAuthoringSettings">
            <summary>
            Settings specific to authoring (not used by runtime). Used by <see cref="T:InRule.Repository.RuleApplicationDef"/>.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleApplicationAuthoringSettings.TreeRuleNameVisibilityHidePrefix">
            <summary>
            Prefix used by authoring tools, in conjunction with <see cref="P:InRule.Repository.RuleApplicationAuthoringSettings.TreeRuleNameVisibility"/>, to hide reserved names in tree.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleApplicationAuthoringSettings.TreeRuleNameVisibility">
            <summary>
            Tree "visibility" for rule and set-value names (used by authoring tools). <see cref="F:InRule.Repository.RuleApplicationAuthoringSettings.TreeRuleNameVisibilityHidePrefix"/> determines what prefix used for "hide".
            </summary>
        </member>
        <member name="F:InRule.Repository.Data.AnyDbType.Other">
            <summary>
            Other providers like DataDirect
            </summary>
        </member>
        <member name="T:InRule.Repository.TreeRuleNameVisibility">
            <summary>
            Possible values for <see cref="P:InRule.Repository.RuleApplicationAuthoringSettings.TreeRuleNameVisibility"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.Upgrader.GetFeatureVer(InRule.Repository.IUpgraderState)">
            <summary>
            Get /RuleapplicationDef/ir:FeatureVersion in low-overhead manner
            </summary>
            <returns></returns>
            <exception cref="T:InRule.Common.Exceptions.XmlValidationException">Invalid top element, missing required FeatureVersion element, or missing required top Guid.</exception>
            <exception cref="T:InRule.Common.Exceptions.RuleException">Non-numeric value on FeatureVersion element.</exception>
        </member>
        <member name="M:InRule.Repository.Upgrader.UpgradeXmlBeforeDeserIfNec(InRule.Repository.IUpgraderState)">
            <summary>
            Checks if special xmldocument-style upgrader actions needed prior to any attempt to deserialize
            </summary>
            <remarks>
            Caller must delete the tempfile created, if any.
            
            Postconditions: If upgrader acts needed, the file or xmlStr is directly updated with this xml for use by the caller.
            </remarks>
        </member>
        <member name="M:InRule.Repository.Upgrader.UpgradeXmlBeforeDeserIfNecPreVer70(InRule.Repository.IUpgraderState)">
            <summary>
            redesigned web services to use WCF, hence changes to the ruleapp structure
            </summary>
            <param name="upgraderState"></param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:InRule.Repository.Upgrader.UpgradePreAsimovApps_NoDeserializationErrors(InRule.Repository.RuleApplicationDef,System.String)">
            <summary>
            Is called after first deserialization and ruleapp is deserilaized again incase 
            of any attribute changes made.
            </summary>
            <param name="ret"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:InRule.Repository.Regression.AssertionInfoWithNoExpectedValueBase">
            <summary>
            An abstract base class that represents all assertions that do not have an expected value (such as IsValid, IsNull, etc.)
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.AssertionTypeInfo">
            <summary>
            An abstract base class that represents the assertion logic that is executed in the <see cref="T:InRule.Repository.Regression.AssertionDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionTypeInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionTypeInfo.AssertionType">
            <summary>
            Gets the type of assertion to be executed.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionTypeInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionTypeInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionTypeInfo.HasTargetValue">
            <summary>
            Gets whether the assertion has a target value
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionInfoWithNoExpectedValueBase.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.AssertionType">
            <summary>
            Represents the type of assertion to execute.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.None">
            <summary>
            No assertion should be executed.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.NotificationFired">
            <summary>
            Tests whether a notification fired.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.NotificationFiredXTimes">
            <summary>
            Tests that a notification fired X times.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.NotificationIsActive">
            <summary>
            Tests that a notification is active.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.NotificationIsNotActive">
            <summary>
            Tests that a notification is not active.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.RuleSetIsActive">
            <summary>
            Tests that a RuleSet is active.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.RuleSetIsNotActive">
            <summary>
            Tests that a RuleSet is not active.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.RuleFired">
            <summary>
            Tests that a rule fired.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.CollectionCountIsX">
            <summary>
            Tests that a collection count equals X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsValid">
            <summary>
            Tests that a field is valid.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsNotValid">
            <summary>
            Tests that a field is not valid.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsEqualToX">
            <summary>
            Tests that a field is equal to X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsNotEqualToX">
            <summary>
            Tests that a field is not equal to X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsGreaterThanX">
            <summary>
            Tests that a field is greater than X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsGreaterThanOrEqualToX">
            <summary>
            Tests that a field is greater than or equal to X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsLessThanX">
            <summary>
            Tests that a field is less than X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsLessThanOrEqualToX">
            <summary>
            Tests that a field is less than or equal to X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsAfterX">
            <summary>
            Tests that a Date or DateTime field is after X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldOnOrAfterX">
            <summary>
            Tests that a Date or DateTime field is on or after X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsBeforeX">
            <summary>
            Tests that a Date or DateTime field is before X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldOnOrBeforeX">
            <summary>
            Tests that a Date or DateTime field is on or before X.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsNull">
            <summary>
            Tests that a field is null.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsNullOrEmpty">
            <summary>
            Tests that a field is null or empty string.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsZeroOrEmpty">
            <summary>
            Tests that a field is zero or empty string.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsNotNull">
            <summary>
            Tests that a field is not null.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.RuleExecutionHalted">
            <summary>
            Tests that rule execution halted.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.RuleSetHalted">
            <summary>
            Tests that a RuleSet halted.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsTrue">
            <summary>
            Tests that a field value is true
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.AssertionType.FieldIsFalse">
            <summary>
            Tests that a field value is false
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.CollectionCountIsXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify the collection member count of a collection.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.CollectionCountIsXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.CollectionCountIsXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.CollectionCountIsXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.CollectionCountIsXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.CollectionCountIsXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsAfterXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify a Date or DateTime field occurs after a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsAfterXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsAfterXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsAfterXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsAfterXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsAfterXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify a Date or DateTime occurs before a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see crehf="AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsBeforeXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify that a field is equal to a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsEqualToXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsFalseAssertionInfo">
            <summary>
            Represents the logic to verify if a field is false.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsFalseAssertionInfo.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:InRule.Repository.Regression.FieldIsFalseAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsFalseAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsFalseAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a numeric field is greater than or equal to a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo.#ctor">
            <summary>
            Represents a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsGreaterThanOrEqualToXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a numeric field is greater than a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsGreaterThanXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is less than or equal to a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsLessThanOrEqualToXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is less than a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsLessThanXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is not equal to a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNotEqualToXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsNotNullAssertionInfo">
            <summary>
            Represents the Assertion logic to verify that a field is not null.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotNullAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsNotNullAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotNullAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNotNullAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsNotValidAssertionInfo">
            <summary>
            Represents the Assertion logic to verify that a field is invalid.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotValidAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsNotValidAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNotValidAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNotValidAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsNullAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is null.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNullAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsNullAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNullAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNullAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsNullOrEmptyAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a text field is null or empty string.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNullOrEmptyAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsNullOrEmptyAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsNullOrEmptyAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsNullOrEmptyAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsTrueAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is true.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsTrueAssertionInfo.#ctor">
            <summary>
            Initialized a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsTrueAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsTrueAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsTrueAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsValidAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is valid.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsValidAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsValidAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsValidAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsValidAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldIsZeroOrEmptyAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a field is zero or empty string.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsZeroOrEmptyAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldIsZeroOrEmptyAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldIsZeroOrEmptyAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldIsZeroOrEmptyAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a Date or DateTime field is on or after a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldOnOrAfterXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a Date or DateTime field is on or before a specified value.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FieldOnOrBeforeXAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.NotificationFiredAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a notification fired.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationFiredAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.NotificationFiredAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationFiredAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.NotificationFiredAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo">
            <summary>
            Represents the Assertion logic to verify the number of times a notification fired.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the culture-specific display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo.HasExpectedValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.NotificationFiredXTimesAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.NotificationIsActiveAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a notification is active.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationIsActiveAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.NotificationIsActiveAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationIsActiveAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.NotificationIsActiveAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.NotificationIsNotActiveAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a notification is not active.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationIsNotActiveAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.NotificationIsNotActiveAssertionInfo"/> class
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.NotificationIsNotActiveAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.NotificationIsNotActiveAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether rule execution halted.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo.HasTargetValue">
            <summary>
            Gets whether the assertion has an expected value, which is always true for this Assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.RuleExecutionHaltedAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.RuleFiredAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a rule fired.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleFiredAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.RuleFiredAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleFiredAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.RuleFiredAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.RuleSetHaltedAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a RuleSet halted.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetHaltedAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.RuleSetHaltedAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetHaltedAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.RuleSetHaltedAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.RuleSetIsActiveAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a RuleSet is active.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetIsActiveAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.RuleSetIsActiveAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetIsActiveAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.RuleSetIsActiveAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.RuleSetIsNotActiveAssertionInfo">
            <summary>
            Represents the Assertion logic to verify whether a RuleSet is not active.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetIsNotActiveAssertionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.RuleSetIsNotActiveAssertionInfo"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.RuleSetIsNotActiveAssertionInfo.GetDisplayText(InRule.Repository.Regression.AssertionDef)">
            <summary>
            Returns the display text of an authored assertion.
            </summary>
            <param name="assertionDef">The authored <see cref="T:InRule.Repository.Regression.AssertionDef"/>.</param>
            <returns>A <see cref="T:System.String"/> of the display text.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.RuleSetIsNotActiveAssertionInfo.DisplayName">
            <summary>
            Gets the display name of the Assertion type info.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DefBase">
            <summary>
            An abstract implementation of <see cref="T:InRule.Repository.Regression.IDef"/> providing XML persistence, property/collection changed event logic
            and ancestor searching functionality.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.IDef">
            <summary>
            Represents a RegressionTesting Def as part of a hierarchy and UI representation.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.IDef.GetAncestor``1">
            <summary>
            Search the parent hierarchy for the first Def ancestor based on type specified in generic signature.
            </summary>
            <typeparam name="T">The type of Def to search for.</typeparam>
            <returns>The first ancestor Def belonging to the specified type.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.IDef.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.IDef.Parent">
            <summary>
            The Def's parent.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.IDef.BubbledPropertyChanged">
            <summary>
            Event to fire when properties are changed.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.IDef.BubbledCollectionChanged">
            <summary>
            Event to fire when collections are changed
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DefBase.GetAncestor``1">
            <summary>
            Search the parent hierarchy for the first Def ancestor based on type specified in generic signature.
            </summary>
            <typeparam name="T">The type of Def to search for.</typeparam>
            <returns>The first ancestor Def belonging to the specified type.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.DefBase.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DefBase.Parent">
            <summary>
            The Def's parent.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.DefBase.BubbledPropertyChanged">
            <summary>
            Event to fire when properties are changed.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.DefBase.BubbledCollectionChanged">
            <summary>
            Event to fire when collections are changed
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DefCollectionBase`1">
            <summary>
            An abstract base class that extends a generic ObservableCollection of element type <see cref="T:InRule.Repository.Regression.IdentifiedDefBase"/> and implements <see cref="T:InRule.Repository.Regression.IDef"/>.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:InRule.Repository.Regression.IdentifiedDefBase"/> representing the collection's elements.</typeparam>
        </member>
        <member name="M:InRule.Repository.Regression.DefCollectionBase`1.GetAncestor``1">
            <summary>
            Search the parent hierarchy for the first Def ancestor based on type specified in generic signature.
            </summary>
            <typeparam name="TV">The type of Def to search for.</typeparam>
            <returns>The first ancestor Def belonging to the specified type.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.DefCollectionBase`1.AddIfNotMember(`0)">
            <summary>
            Adds an item to the collection if it does not already exist.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was added.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.DefCollectionBase`1.GetById(System.Guid)">
            <summary>
            Returns an item from the collection based on its identifier
            </summary>
            <param name="guid">The identifier to search for.</param>
            <returns>The matching item found in the collection.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.DefCollectionBase`1.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DefCollectionBase`1.Parent">
            <summary>
            The Def's parent.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.DefCollectionBase`1.BubbledPropertyChanged">
            <summary>
            Event to fire when properties are changed.
            </summary>
        </member>
        <member name="E:InRule.Repository.Regression.DefCollectionBase`1.BubbledCollectionChanged">
            <summary>
            Event to fire when collections are changed
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DynamicDefBase">
            <summary>
            An abstract implementation of <see cref="T:InRule.Repository.Regression.DefBase"/> providing backing storage for properties of its derived types
            along with <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event firing when the properties update.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DynamicDefBase.GetValue``1(System.String)">
            <summary>
            Retrieve an object from backing storage.
            </summary>
            <typeparam name="T">The type of object to retrieve.</typeparam>
            <param name="propName">The unique name of the object to retrieve.</param>
            <returns>The object in backing storage.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.DynamicDefBase.SetValue``1(System.String,``0)">
            <summary>
            Saves an object in backing storage and raises a new <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of object to save.</typeparam>
            <param name="propName">The unique name of the object to save.</param>
            <param name="newValue">The object to save.</param>
            <returns>True if the save was successful.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.DynamicDefBase.SetValue``1(System.String,``0,System.Action{System.Object})">
            <summary>
            Saves an object in backing storage, executes any pre-event actions, and raises a
            new <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of object to save.</typeparam>
            <param name="propName">The unique name of the object to save.</param>
            <param name="newValue">The object to save.</param>
            <param name="beforeEventActions">A delegate representing a set of actions to perform before raising the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</param>
            <returns>True if the save was successful.</returns>
        </member>
        <member name="T:InRule.Repository.Regression.IdentifiedDefBase">
            <summary>
            An abstract implementation of <see cref="T:InRule.Repository.Regression.DynamicDefBase"/> adding GUID identification for persistence.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.IdentifiedDefBase.Guid">
            <summary>
            Gets the identifier of this Def.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateOverrideDef">
            <summary>
            Represents state override data used at runtime when a Test is executed.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateOverrideDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.DataStateOverrideDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateOverrideDef.ToString">
            <summary>
            Returns a string of the target path and override value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateOverrideDef.DataOverrideType">
            <summary>
            Gets or sets the type of override.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateOverrideDef.TargetPath">
            <summary>
            Gets or sets the target path using O.R. notation.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateOverrideDef.Value">
            <summary>
            Gets or sets the value to use as the override data.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateOverrideDef.DataOverrideDefType">
            <summary>
            Represents the type of override.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateOverrideDef.DataOverrideDefType.SetValue">
            <summary>
            Override a state value.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateOverrideDef.DataOverrideDefType.AddCollectionMember">
            <summary>
            Override a collection member addition.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataOverrideDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.DataStateOverrideDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataOverrideDefCollection.AddSetValue(System.String,System.Int32)">
            <summary>
            Adds a SetValue data override to the collection.
            </summary>
            <param name="path">The element path to override.</param>
            <param name="value">The integer to override with.</param>
        </member>
        <member name="M:InRule.Repository.Regression.DataOverrideDefCollection.AddSetValue(System.String,System.String)">
            <summary>
            Adds a SetValue data override to the collection.
            </summary>
            <param name="path">The element path to override.</param>
            <param name="value">The string to override with.</param>
        </member>
        <member name="M:InRule.Repository.Regression.DataOverrideDefCollection.AddCollectionMember(System.String)">
            <summary>
            Adds an AddCollectionMember override to the collection.
            </summary>
            <param name="path">The collection path to override.</param>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateDef">
            <summary>
            Represents state for regression tests to execute against.
            These can represent either a TestScenario or Entity state.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:InRule.Repository.Regression.DataStateDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.#ctor(InRule.Repository.Regression.DataStateDef)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.DataStateDef"/> class, copying from an existing DataStateDef.
            </summary>
            <param name="oldDataStateDef">
            The old DataStateDef.
            </param>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.LoadTestScenario(System.String)">
            <summary>
            Loads a TestScenario from a file.
            </summary>
            <param name="path">The path to a .testscenario file.</param>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.LoadTestScenario(System.IO.Stream)">
            <summary>
            Loads a TestScenario from a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.SaveTestScenario(System.String)">
            <summary>
            Saves the TestScenario to a file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateDef.SaveTestScenario(System.IO.Stream)">
            <summary>
            Saves the TestSceanrio to a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.DisplayName">
            <summary>
            Gets or sets the display name of this DataState.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.RootEntityName">
            <summary>
            Gets or sets the root Entity name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.RootEntityStateId">
            <summary>
            Gets or sets the EntityState identifier.
            This will always be 1 if the <see cref="P:InRule.Repository.Regression.DataStateDef.DataStateType"/> is EntityState.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.DataStateType">
            <summary>
            Gets or sets the type of DataState.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.Notes">
            <summary>
            Gets or sets the notes on this DataState.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.StateXml">
            <summary>
            Gets or sets the TestScenario XML or EntityState XML.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.TestScenarioEncoded">
            <summary>
            Gets or sets the Base64 representation of the TestScenario. This is only exposed for TestSuite serialization.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.RootTestElementId">
            <summary>
            Gets or sets the root test Element identifier.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateDef.HasTestScenario">
            <summary>
            Gets whether a TestScenario has been loaded into this <see cref="T:InRule.Repository.Regression.DataStateDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.DataStateDef"/> instances.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateMappingDef">
            <summary>
            Represents a mapping of a <see cref="T:InRule.Repository.Regression.DataStateDef"/> to either: 1) the root TestScenario or EntityState,
            2) a cross-schema linked Entity field, or 3) an IndependentRuleSet's Entity argument.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateMappingDef.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateMappingDef.#ctor(InRule.Repository.Regression.DataStateDef)">
            <summary>
            Initializes an instance of the <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> class.
            </summary>
            <param name="dataState">The root <see cref="T:InRule.Repository.Regression.DataStateDef"/>.</param>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateMappingDef.#ctor(System.String,InRule.Repository.Regression.DataStateDef)">
            <summary>
            Initializes an instance of the <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> class.
            </summary>
            <param name="argumentName">The name of a linked Entity field, or IndependentRuleSet Entity argument.</param>
            <param name="dataState">The <see cref="T:InRule.Repository.Regression.DataStateDef"/> to map to the argument name.</param>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDef.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDef.DataState">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.Regression.DataStateDef"/> to map to the argument name.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDef.ArgumentName">
            <summary>
            Gets or sets the name of a linked Entity field, or IndependentRuleSet Entity argument to map.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDef.DataStateId">
            <summary>
            Gets or sets the identifier of this <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateMappingDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.DataStateMappingDefCollection.Find(System.String)">
            <summary>
            Returns the <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> from the collection with the specified argumentName.
            </summary>
            <param name="argumentName">The argument name to search for.</param>
            <returns>The <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> from the collection with the specified argumentName.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDefCollection.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.DataStateMappingDefCollection.RootMapping">
            <summary>
            Gets the root <see cref="T:InRule.Repository.Regression.DataStateMappingDef"/> from the collection, which has the <see cref="P:InRule.Repository.Regression.DataStateMappingDef.ArgumentName"/> of "-Root-".
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateSchemaType">
            <summary>
            Represents the schema type of the root context of a <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateSchemaType.Single">
            <summary>
            Entity only references a single bound or unbound schema.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateSchemaType.Heterogeneous">
            <summary>
            Entity references one or more different schemas via cross-schema linked Entities.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateSchemaType.IndependentRuleSet">
            <summary>
            The root context is an IndependentRuleSet.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.DataStateType">
            <summary>
            Represents the type of <see cref="T:InRule.Repository.Regression.DataStateDef"/>.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateType.TestScenario">
            <summary>
            DataState is a TestScenario.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.DataStateType.EntityState">
            <summary>
            DataState is an EntityState.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.Exceptions.InvalidRuleAppForTestSuiteException">
            <summary>
            Represents an exception describing invalid Tests or DataStates that no longer match the Rule Application associated with the TestSuite.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.Exceptions.InvalidRuleAppForTestSuiteException.#ctor(System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.Exceptions.InvalidRuleAppForTestSuiteException"/> class.
            </summary>
            <param name="invalidDataStateIds"></param>
            <param name="invalidTestIds"></param>
        </member>
        <member name="T:InRule.Repository.Regression.Exceptions.MismatchedTestSuiteRuleAppGuidException">
            <summary>
            Represents an exception that occurs when assigning a <see cref="T:InRule.Repository.RuleApplicationDef"/> to an existing <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>
            when their identifiers do not match.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.Exceptions.MismatchedTestSuiteRuleAppGuidException.#ctor(System.String,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.Exceptions.MismatchedTestSuiteRuleAppGuidException"/> class.
            </summary>
            <param name="message">A message associated with this exception.</param>
            <param name="ruleAppGuid">The identifier of the <see cref="T:InRule.Repository.RuleApplicationDef"/> being assigned to a <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.</param>
            <param name="testSuiteRuleAppGuid">The identifier of the <see cref="T:InRule.Repository.RuleApplicationDef"/> from the existing <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.</param>
        </member>
        <member name="P:InRule.Repository.Regression.Exceptions.MismatchedTestSuiteRuleAppGuidException.RuleAppGuid">
            <summary>
            Gets the identifier of the <see cref="T:InRule.Repository.RuleApplicationDef"/> being assigned to a <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.Exceptions.MismatchedTestSuiteRuleAppGuidException.TestSuiteRuleAppGuid">
            <summary>
            Gets the identifier of the <see cref="T:InRule.Repository.RuleApplicationDef"/> from the existing <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestContextDef">
            <summary>
            Represents the root context information of a <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.TestContextDef"/> class.
            This is for XmlSerialization purposes only.  Please use one of the Create() factory methods instead.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDef.Create(InRule.Repository.EntityDef)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.Regression.TestContextDef"/> populated with the details from an <see cref="T:InRule.Repository.EntityDef"/>.
            </summary>
            <param name="entityDef">The Entity to use as the root context.</param>
            <returns>A new instance of <see cref="T:InRule.Repository.Regression.TestContextDef"/></returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDef.Create(InRule.Repository.RuleElements.RuleSetDef)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.Regression.TestContextDef"/> populated with the details from an <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
            <param name="ruleSetDef">The RuleSet to use as the root context.</param>
            <returns>A new instance of <see cref="T:InRule.Repository.Regression.TestContextDef"/></returns>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDef.RootContextName">
            <summary>
            Gets or sets the name of the root context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDef.RootContextSchemaType">
            <summary>
            Gets or sets the schema type of the root context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDef.ExecutionType">
            <summary>
            Gets or sets the execution type of the root context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDef.ExecuteRuleSetName">
            <summary>
            Gets or sets the RuleSet name to execute if the <see cref="P:InRule.Repository.Regression.TestContextDef.ExecutionType"/> is set to 'EntityRuleSet' or 'IndependentRuleSet'.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDef.AvailableExecutionTypes">
            <summary>
            Gets an array of available <see cref="T:InRule.Repository.Regression.TestExecutionType"/> types for this root context.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestContextDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.TestContextDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDefCollection.AddRecurse(InRule.Repository.RuleApplicationDef)">
            <summary>
            Recurses through the <see cref="T:InRule.Repository.RuleApplicationDef"/> and adds all the testable RuleSets and Entities found to the collection.
            </summary>
            <param name="ruleApp">The <see cref="T:InRule.Repository.RuleApplicationDef"/> to search.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDefCollection.AddRecurse(InRule.Repository.EntityDef)">
            <summary>
            Adds the Entity and any explicit Entity RuleSets as testable contexts to the collection.
            </summary>
            <param name="entityDef">The <see cref="T:InRule.Repository.EntityDef"/> to search.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDefCollection.Add(InRule.Repository.EntityDef)">
            <summary>
            Adds a new root context to the collection for the specified <see cref="T:InRule.Repository.EntityDef"/>.
            </summary>
            <param name="entityDef">The <see cref="T:InRule.Repository.EntityDef"/> to add a new root context for.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDefCollection.Add(InRule.Repository.RuleElements.RuleSetDef)">
            <summary>
            Adds a new root context to the collection for the specified <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
            <param name="ruleSetDef">The <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> to add a new root context for.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestContextDefCollection.GetAvailableRuleSets">
            <summary>
            Returns a list of Entity RuleSet root contexts contained in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Regression.TestContextDefCollection.ContainsOneOrMoreEntityRuleSets">
            <summary>
            Gets whether the collection contains root contexts for one or more Entity RuleSets.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FolderDef">
            <summary>
            Represents a user interface container for either <see cref="T:InRule.Repository.Regression.TestDef"/> or <see cref="T:InRule.Repository.Regression.DataStateDef"/> instances.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.DisplayName">
            <summary>
            Gets or sets the display name of this folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.FolderType">
            <summary>
            Gets or sets the type of folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsExpanded">
            <summary>
            Gets or sets the UI expanded state of this folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsDeleted">
            <summary>
            Gets or sets whether this folder is deleted.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsRootFolder">
            <summary>
            Gets or sets whether this folder is a root folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsRootDataFolder">
            <summary>
            Gets whether this folder is a root DataState folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsRootTestFolder">
            <summary>
            Gets whether this folder is a root Test folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsDataFolder">
            <summary>
            Gets whether this folder is a DataState folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.IsTestFolder">
            <summary>
            Gets whether this folder is a Test folder.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.FolderDef.Members">
            <summary>
            Gets or sets the collection of Def references contained by this folder.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FolderDef.FolderDefType">
            <summary>
            Represents the type of folder.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.FolderDef.FolderDefType.TestFolder">
            <summary>
            A folder containing Tests.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.FolderDef.FolderDefType.DataFolder">
            <summary>
            A folder containing DataStates.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.FolderDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.FolderDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FolderDefCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FolderDefCollection"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.FolderDefCollection.#ctor(InRule.Repository.Regression.FolderDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.FolderDefCollection"/> class with an initial list of members.
            </summary>
            <param name="members">Initial list of members to store in this collection.</param>
        </member>
        <member name="T:InRule.Repository.Regression.ReferenceToDef">
            <summary>
            Used in conjunction with <see cref="T:InRule.Repository.Regression.FolderDef"/> to provide a relational link between Defs by their GUID identifiers.
            This is most useful when Defs are persisted as discrete XML documents and one-to-many relationships exist.
            For example, one <see cref="T:InRule.Repository.Regression.DataStateDef"/> may be referenced by many <see cref="T:InRule.Repository.Regression.TestDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDef.#ctor(InRule.Repository.Regression.IDef)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> class.
            </summary>
            <param name="referencedDef">A Def to reference.</param>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDef.EnsureReferencedDef">
            <summary>
            Ensures the <see cref="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDef"/> property is populated by searching the <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>
            in the <see cref="P:InRule.Repository.Regression.DefBase.Parent"/> hierarchy.
            </summary>
            <returns>The referenced Def.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDef.EnsureReferencedDef(InRule.Repository.Regression.TestSuiteDef)">
            <summary>
            Ensures the <see cref="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDef"/> property is populated by searching specified <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
            <param name="testSuiteDef">The TestSuite to search.</param>
            <returns>The referenced Def.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDef">
            <summary>
            Gets or sets the Def referenced by this <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.IsFolderDef">
            <summary>
            Gets whether the referenced Def is a <see cref="T:InRule.Repository.Regression.FolderDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.IsTestDef">
            <summary>
            Gets whether the referenced Def is a <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.IsDataStateDef">
            <summary>
            Gets whether the referenced Def is a <see cref="T:InRule.Repository.Regression.DataStateDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.DisplayName">
            <summary>
            Gets or sets the display name of this instance.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.HasInstance">
            <summary>
            Gets whether the <see cref="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDef"/> property currently holds a reference to the Def.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDefId">
            <summary>
            Gets or sets the identifier of the referenced Def.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDef.ReferencedDefType">
            <summary>
            Gets or sets the type name of the referenced Def.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.ReferenceToDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.Add(InRule.Repository.Regression.IDef)">
            <summary>
            Adds a Def to be represented by a <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance in this collection
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.GetByReferencedId(System.Guid)">
            <summary>
            Returns a <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance from the collection, given an identifier.
            </summary>
            <param name="referencedId">The identifier to search for in the collection.</param>
            <returns>A <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance from the collection.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.RemoveByReferencedId(System.Guid)">
            <summary>
            Removes a <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance from the collection by its identifier.
            </summary>
            <param name="referencedId">The identifier of the element to remove.</param>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.IndexOfReferencedId(System.Guid)">
            <summary>
            Returns the ordinal value of the <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance in the collection from its identifier.
            </summary>
            <param name="guid">The identifier of the element to search for.</param>
            <returns>The ordinal value of the <see cref="T:InRule.Repository.Regression.ReferenceToDef"/> instance in the collection.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.Remove(InRule.Repository.Regression.IDef)">
            <summary>
            Removes a Def from the collection based on its identifier.
            </summary>
            <param name="child">The Def to remove from the collection.</param>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.ContainsDisplayName(System.String)">
            <summary>
            Checks whether any of the Defs in the collection cointain the specified display name.
            </summary>
            <param name="name">The display name to check for.</param>
            <returns>True if the display name is found.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.GetNextDisplayName(InRule.Repository.Regression.TestSuiteDef,System.String)">
            <summary>
            Gets the next unique display name for a Def in this TestSuite based on the root name.
            </summary>
            <param name="testSuiteDef">The containing <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.</param>
            <param name="root">The root display name to check.</param>
            <returns>A unique display name for this TestSuite.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.ReferenceToDefCollection.GetNextDisplayName(System.String)">
            <summary>
            Gets the next unique display name for a Def in this collection based on the root name.
            </summary>
            <param name="root">The root display name to check.</param>
            <returns>A unique display name for this collection.</returns>
        </member>
        <member name="P:InRule.Repository.Regression.ReferenceToDefCollection.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestSuiteDef">
            <summary>
            Represents a Regression Testing Test Suite.
            Note: This class is not XmlSerializable.  Use the SaveAs() method with a persistence provider to achieve serialization.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.Create">
            <summary>
            Creates a new <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> instance.
            </summary>
            <returns>A new TestSuite</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.LoadFrom(InRule.Repository.Regression.TestSuitePersistenceProvider)">
            <summary>
            Retrieves an existing <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> from a TestSuite persistence provider.
            </summary>
            <param name="provider">The persistence provider to retireve the <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> from.</param>
            <returns>The TestSuite retrieved from the provider.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.Validate">
            <summary>
            Validates the test suite against the active rule application.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.SetPersistenceProvider(InRule.Repository.Regression.TestSuitePersistenceProvider)">
            <summary>
            Associates a persistence provider with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            Allows the same persistence provider to be reused with the Save() method.
            </summary>
            <param name="provider">The persistence provider to associate.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.Save">
            <summary>
            Saves this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> with the currently associated persistence provider.
            Use SetPersistenceProvider() to associate the provider beforehand.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.SaveAs(InRule.Repository.Regression.TestSuitePersistenceProvider)">
            <summary>
            Saves this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> with the specified persistence provider.
            </summary>
            <param name="provider">The persistence provider to save with.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetAvailableTestContexts">
            <summary>
            Retrieves all available test contexts from the currently associated <see cref="P:InRule.Repository.Regression.TestSuiteDef.ActiveRuleApplicationDef"/>.
            </summary>
            <returns>All available test contexts.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetAvailableTestContexts(System.String)">
            <summary>
            Retrieves all available test contexts for the specified root context name from the currently associated <see cref="P:InRule.Repository.Regression.TestSuiteDef.ActiveRuleApplicationDef"/>.
            </summary>
            <param name="rootContextName">The root context name to retrieve test contexts for.</param>
            <returns>The available test contexts for the specified root context name.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetDef(System.String,System.Guid)">
            <summary>
            Retrieves a Def associated with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> based on Def type name and identifier.
            </summary>
            <param name="defTypeName">The type name of Def to retrieve.</param>
            <param name="defId">The identifier of the Def to retrieve.</param>
            <returns>The Def that matches the conditions defined in the parameters.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetFolder(System.Guid)">
            <summary>
            Retrieves a <see cref="T:InRule.Repository.Regression.FolderDef"/> associated with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> based on the Def identifier.
            </summary>
            <param name="folderId">The identifier of the <see cref="T:InRule.Repository.Regression.FolderDef"/> to retrieve.</param>
            <returns>The <see cref="T:InRule.Repository.Regression.FolderDef"/> that matches the identifier.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetDataState(System.Guid)">
            <summary>
            Retrieves a <see cref="T:InRule.Repository.Regression.DataStateDef"/> associated with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> based on the Def identifier.
            </summary>
            <param name="dataStateId">The identifier of the <see cref="T:InRule.Repository.Regression.DataStateDef"/> to retrieve.</param>
            <returns>The <see cref="T:InRule.Repository.Regression.DataStateDef"/> that matches the identifier.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.GetTest(System.Guid)">
            <summary>
            Retrieves a <see cref="T:InRule.Repository.Regression.TestDef"/> associated with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> based on the Def identifier.
            </summary>
            <param name="testId">The identifier of the <see cref="T:InRule.Repository.Regression.TestDef"/> to retrieve.</param>
            <returns>The <see cref="T:InRule.Repository.Regression.TestDef"/> that matches the identifier.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.DeleteFolder(InRule.Repository.Regression.FolderDef)">
            <summary>
            Removes a <see cref="T:InRule.Repository.Regression.FolderDef"/> from this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
            <param name="folderDef">The <see cref="T:InRule.Repository.Regression.FolderDef"/> to remove.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.DeleteDataState(InRule.Repository.Regression.DataStateDef)">
            <summary>
            Removes a <see cref="T:InRule.Repository.Regression.DataStateDef"/> from this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
            <param name="dataStateDef">The <see cref="T:InRule.Repository.Regression.DataStateDef"/> to remove.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.DeleteTest(InRule.Repository.Regression.TestDef)">
            <summary>
            Removes a <see cref="T:InRule.Repository.Regression.TestDef"/> from this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
            <param name="testDef">The <see cref="T:InRule.Repository.Regression.TestDef"/> to remove.</param>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.ResolveRootName(System.String)">
            <summary>
            Resolves a root name to either a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> or an <see cref="T:InRule.Repository.EntityDef"/>
            from the currently associated <see cref="P:InRule.Repository.Regression.TestSuiteDef.ActiveRuleApplicationDef"/>.
            </summary>
            <param name="rootEntityorRulesetName">The name of an Entity or RuleSet to resolve.</param>
            <returns>A <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/> or <see cref="T:InRule.Repository.EntityDef"/> resolved from the specified name.</returns>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteDef.ResolveElementPathToDef(System.String,System.String)">
            <summary>
            Resolves a root Entity name and path to an element.
            </summary>
            <param name="rootEntityName">The root Entity name to resolve.</param>
            <param name="path">The O.R. notation of the element path relative to the root Entity name.</param>
            <returns>The element resolved from the specified root Entity name and path.</returns>
        </member>
        <member name="E:InRule.Repository.Regression.TestSuiteDef.StatusUpdate">
            <summary>
            An event representing status updates to this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.ActiveRuleApplicationDef">
            <summary>
            Associates an active RuleApplicationDef instance with this Test Suite.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.HasPersistenceProvider">
            <summary>
            Returns true if a persistence provider has been set.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.PersistenceProvider">
            <summary>
            Gets the persistence provider currently assigned to this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.DisplayName">
            <summary>
            Gets the current TestSuite name, or the persistence provider storage location if the name is not set.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.Settings">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> associated with this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.RootDataFolder">
            <summary>
            Gets the root DataState folder for this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteDef.RootTestsFolder">
            <summary>
            Gets the root Test folder for this <see cref="T:InRule.Repository.Regression.TestSuiteDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestSuiteSettingsDef">
            <summary>
            Represents the settings of a <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> instance.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteSettingsDef.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:InRule.Repository.Regression.TestSuiteSettingsDef"/> class.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.Name">
            <summary>
            Gets or sets the name of the TestSuite.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.Version">
            <summary>
            Gets or sets the version of the TestSuite.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.RuleAppName">
            <summary>
            Gets or sets the name of the associated RuleApplication.  This is used only for informational purposes.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.RuleAppGuid">
            <summary>
            Gets or set the identifier of the associated RuleApplication.  This is used to verify an existing TestSuite pairs correctly with an associated RuleApplication.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.RuleAppOrigin">
            <summary>
            Gets or sets the origin URI of the RuleApplication when authored from a catalog or file system based RuleApplication.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.RuleAppOriginUri">
            <summary>
            Gets or sets the string representation of the <see cref="P:InRule.Repository.Regression.TestSuiteSettingsDef.RuleAppOrigin"/>.  This is for XmlSerializer use only.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.IncludeRuleExecutionLog">
            <summary>
            Gets or sets whether to include the RuleExecutionLog in executed tests.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.IncludeXmlRuleTrace">
            <summary>
            Gets or sets whether to include the Rule Trace in executed tests.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.StopTestOnAssertionFailure">
            <summary>
            Gets or sets whether to stop a Test execution when an assertion fails.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteSettingsDef.SuppressValidation">
            <summary>
            Gets or sets whether to allow for the suppression of test suite validation exceptions.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestSuiteStatusUpdateEventHandler">
            <summary>
            Represents the method that will handle a status update event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InRule.Repository.Regression.TestSuiteStatusUpdateEventArgs"/> that contains a status update message.</param>
        </member>
        <member name="T:InRule.Repository.Regression.TestSuiteStatusUpdateEventArgs">
            <summary>
            Represents the message in a status update event.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestSuiteStatusUpdateEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.TestSuiteStatusUpdateEventArgs"/> class.
            </summary>
            <param name="message">The status update method to set.</param>
        </member>
        <member name="P:InRule.Repository.Regression.TestSuiteStatusUpdateEventArgs.Message">
            <summary>
            Gets or sets the status update message.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.ExpectedValueDataType">
            <summary>
            Enum to keep track of expected value DataType used in the Business Language control.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.AssertionDef">
            <summary>
            Represents an assertion of the state post rule execution.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.AssertionDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.#ctor(InRule.Repository.Regression.AssertionType,System.String,System.String,InRule.Repository.Regression.ExpectedValueDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.AssertionDef"/> class with the minimum parameters required for execution.
            </summary>
            <param name="type">The type of assertion to execute.</param>
            <param name="targetElementPath">The target element path this assertion uses.</param>
            <param name="expectedValue">The expected value of this assertion.</param>
            <param name="expectedValueDataType">The expected value's DataType.</param>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.FromExpression(InRule.Repository.Expressions.FunctionNode)">
            <summary>
            Converts the BL expression and stores in the this Def.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.GetTargetElementDef">
            <summary>
            Returns the Def represented by the <see cref="P:InRule.Repository.Regression.AssertionDef.TargetElementPath"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.GetContainingTestDef">
            <summary>
            Gets the <see cref="T:InRule.Repository.Regression.TestDef"/> containing this assertion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDef.GetContainingTestSuiteDef">
            <summary>
            Gets the <see cref="T:InRule.Repository.Regression.TestSuiteDef"/> containing the <see cref="T:InRule.Repository.Regression.TestDef"/> that contains this assertion.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.ToExpression">
            <summary>
            Gets the BL expression to show based on the current assertion.
            </summary>
            <value>To expression.</value>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.DisplayName">
            <summary>
            Gets the display name of the assertion.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.AvailableAssertionTypes">
            <summary>
            Gets a list of the assertion types.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.AssertionInfo">
            <summary>
            Gets the assertion info for this assertion.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.TargetElementPath">
            <summary>
            Gets or sets the target element path this assertion uses.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.TargetElementDisplayName">
            <summary>
            Gets the display name of this assertion's target element path.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.AssertionType">
            <summary>
            Gets or sets the assertion type.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.ExpectedValue">
            <summary>
            Gets or sets the expected value of this assertion.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.ExpectedValueType">
            <summary>
            Gets or sets the expected value's DataType.
            </summary>
            <value>The expected value's DataType.</value>
            <remarks>Used by the Business Language control for formatting.</remarks>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.Notes">
            <summary>
            Gets or sets any notes for this assertion.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.AssertionDef.FormattedExpectedValue">
            <summary>
            Gets the culture-specific expected value.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.AssertionDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.AssertionDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDefCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.AssertionDefCollection"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.AssertionDefCollection.#ctor(InRule.Repository.Regression.AssertionDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.AssertionDefCollection"/> class with initial members set.
            </summary>
            <param name="members">Initial members to add to the collection.</param>
        </member>
        <member name="T:InRule.Repository.Regression.TestDef">
            <summary>
            
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.TestDef"/> class.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.TestDef.#ctor(InRule.Repository.Regression.TestContextDef)">
            <summary>
            Initializes a new instance of the <see cref="T:InRule.Repository.Regression.TestDef"/> class.
            </summary>
            <param name="rootContext">A root context instance to associate with this test.</param>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.RootContextName">
            <summary>
            Gets the <see cref="P:InRule.Repository.Regression.TestContextDef.RootContextName"/> of the associated root context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.DisplayName">
            <summary>
            Gets or sets the display name of this <see cref="T:InRule.Repository.Regression.TestDef"/> to present in the user interface.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.RootContext">
            <summary>
            Gets or sets the test's root context.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IsEnabled">
            <summary>
            Gets or sets whether this <see cref="T:InRule.Repository.Regression.TestDef"/> is enabled.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.Notes">
            <summary>
            Gets or sets notes associated with this <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.DataStates">
            <summary>
            Gets or sets input DataState mappings associated with this <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.Overrides">
            <summary>
            Gets or sets the data override collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.ExpectedOverrides">
            <summary>
            Gets or sets the exptected data override collection.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.Assertions">
            <summary>
            Gets or sets assertions to be executed within this <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.TestType">
            <summary>
            Indicates the type of test: assertion comparison, or performance.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.Title">
            <summary>
            Title of the TestDef.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.ValidationsMustMatch">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Compare, validations must match
            those in the <see cref="P:InRule.Repository.Regression.TestDef.ExpectedDataStates"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.NotificationsMustMatch">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Compare, notifications must match
            those in the <see cref="P:InRule.Repository.Regression.TestDef.ExpectedDataStates"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.Iterations">
            <summary>
            When <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, how many iterations to execute.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.PerformWarmup">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, whether to perform a warmup before beginn.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IncludeExecutionMessages">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, enables feedback messages and rule changes in the execution log. 
            This includes RuleSet, Rule and Action execution messages.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IncludeRuleValues">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, enables rule values to be captured so that they can be accessed using the SDK.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IncludeStateChanges">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, enables state change messages in the execution log, 
            including calculations and collection member add/delete.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IncludeSummaryStatistics">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, enables summary statistics in the execution log, info-level event log and RuleSession. 
            Required for summary level information for the Performance Statistics report.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.IncludeDetailStatistics">
            <summary>
            Indicates that, when <see cref="P:InRule.Repository.Regression.TestDef.TestType"/> is Performance, enables detailed statistics in the execution log. This enables RuleSet, Rule and Action timings. 
            Required for detail level information for the  Performance Statistics report.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDef.ExpectedDataStates">
            <summary>
            Gets or sets expected DataState mappings associated with this <see cref="T:InRule.Repository.Regression.TestDef"/>.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestDefCollection">
            <summary>
            Represents a collection of <see cref="T:InRule.Repository.Regression.TestDef"/> instances.
            </summary>
        </member>
        <member name="P:InRule.Repository.Regression.TestDefCollection.Container">
            <summary>
            The Def representing the UI container.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestExecutionType">
            <summary>
            Represents the type of test execution.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestExecutionType.ApplyRules">
            <summary>
            The test will apply Entity rules on the state before executing assertions.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestExecutionType.EntityRuleSet">
            <summary>
            The test will execute an Entity RuleSet on the state before executing asserions.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestExecutionType.IndependentRuleSet">
            <summary>
            The test will execute an IndependentRuleSet before executing assertions.
            </summary>
        </member>
        <member name="T:InRule.Repository.Regression.TestType">
            <summary>
            Indicates a type of regression test.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestType.Assertion">
            <summary>
            In assertion testing, the user defines input test data and criteria that must be true in order for a test to pass.  
            When run, the criteria are evaluated to determine if the test passed.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestType.Compare">
            <summary>
            In comparison testing, the user defines input and expected output test scenarios.  
            The regression test compares the actual and expected outputs.
            </summary>
        </member>
        <member name="F:InRule.Repository.Regression.TestType.Performance">
            <summary>
            In performance testing, the user defines how many times to run a test, along with an input test scenario and execution parameters.
            The test reports performance results.
            </summary>
        </member>
        <member name="M:InRule.Repository.Regression.Utility.RepositoryDefExtensions.GetAncestor``1(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Gets the value for the specified key. If the key doesn't exist, a new
            instance of type V is created and added to the dictionary.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> specifying its parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.#ctor(InRule.Repository.RuleElements.ExecuteActionParamDef[])">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDefCollection"/> specifying the initial items in the collection.
            </summary>
            <param name="initialItems">The initial <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> items in the collection.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.Add(InRule.Repository.RuleElements.ExecuteActionParamDef)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> to the collection.
            </summary>
            <param name="parameter">The new <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/>.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.TryGetValue(System.String,InRule.Repository.RuleElements.ExecuteActionParamDef@)">
            <summary>
            Gets the <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> associated with the specified parameter name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> to find.</param>
            <param name="parameter">The <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> corresponding to the specified name, if it exists, otherwise null.</param>
            <returns>True if the specified <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> was found.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteActionParamDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of a <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.ExecuteActionParamDef"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.ExecuteWorkflowActionDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'Execute Workflow'.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleFlowDef">
            <summary>
            Rule Flow repository definition.
            Specifies an explicit/single-pass entity or independent Ruleset, 
            the list of all rule elements(Rules/Actions) it contains,
            and the metadata required to render it as a rule flow diagram
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleFlowDef.Promote(InRule.Repository.RuleElements.RuleSetDef,System.Boolean)">
            <summary>
            Creates a <see cref="T:InRule.Repository.RuleElements.RuleFlowDef"/> from a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>
            </summary>
            <param name="ruleSetDef">The ruleset to promote</param>
            <param name="replaceRuleSet">true to update the ruleset in-place, false to leave the original ruleset unmodified</param>
            <returns></returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleFlowDef.DesignerLayout">
            <summary>
            Stores the metadata for the rule flow designer
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleFlowDef.AuthoringState">
            <summary>
            Contains metadata related to a partially-authored rule flow
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetParameterDef">
            <summary>
            RuleSet Parameter Repository Definition.
            Specifies the name and <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> of an input parameter or ReturnValue for a <see cref="T:InRule.Repository.RuleElements.RuleSetDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.OnDataTypeChanged(InRule.Repository.RuleRepositoryDataTypeChangedEventArgs)">
            <summary>
            Raises an event if the <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> or <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataTypeEntityName"/> values change.
            </summary>
            <param name="e">The event argument containing the original <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"> and <see cref="T:InRule.Repository.EntityDef"/> name.</see></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.#ctor(System.String,InRule.Repository.DataType)">
            <summary>
            Creates a new instance of an input <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>, specifying name and <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/>.
            </summary>
            <param name="name">The name of the input parameter.</param>
            <param name="dataType">The <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> of the input parameter.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.#ctor(System.String,InRule.Repository.DataType,System.String)">
            <summary>
            Creates a new instance of an Entity input <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>, specifying name, <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> (should be Entity), and the name of the Entity.
            </summary>
            <param name="name">The name of the input parameter.</param>
            <param name="dataType">The <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> of the input parameter.</param>
            <param name="dataTypeEntityName">The name of an <see cref="T:InRule.Repository.EntityDef"/> for reference parameter.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.#ctor(System.String,System.Boolean,InRule.Repository.DataType)">
            <summary>
            Creates a new instance of an input <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>, specifying name and <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/>.
            </summary>
            <param name="name">The name of the input parameter.</param>
            <param name="autoCreate">Indicates whether this parameter should be auto-create an Entity if omitted when executed, and the DataType is Entity.</param>
            <param name="dataType">The <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> of the input parameter.</param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDef.#ctor(System.String,System.Boolean,InRule.Repository.DataType,System.String)">
            <summary>
            Creates a new instance of an Entity input <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>, specifying name, <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> (should be Entity), and the name of the Entity.
            </summary>
            <param name="name">The name of the input parameter.</param>
            <param name="autoCreate">Indicates whether this parameter should be auto-create an Entity if omitted when executed, and the DataType is Entity.</param>
            <param name="dataType">The <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> of the input parameter.</param>
            <param name="dataTypeEntityName">The name of an <see cref="T:InRule.Repository.EntityDef"/> for reference parameter.</param>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.AuthoringElementTypeName">
            <summary>
            Gets type name as 'RuleSet Parameter'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.AuthoringContextName">
            <summary>
            Gets default context name as &lt;RuleSet Parameter&gt; or 
            'RuleSet Parameter &lt;Name&gt;(Entity:&lt;EntityName&gt;)' if <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.IsAnEntityDataType"/> or else
            'RuleSet Parameter &lt;Name&gt;(&lt;DataType&gt;)'.
            </summary>
            <remarks>Added the code of check DataType of string. if the type is string then we return the name.</remarks>
        </member>
        <member name="E:InRule.Repository.RuleElements.RuleSetParameterDef.DataTypeChanged">
            <summary>
            Occurs after <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> or <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataTypeEntityName"/> values change.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.RuleActionType">
            <summary>
            Returns Action type as 'RuleSetParameter'.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType">
            <summary>
            Gets/Sets the datatype of the variable.
            On Set raises event <see cref="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler"/> event.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataTypeEntityName">
            <summary>
            Gets/Sets the Entity name for an Entity type variable.
            On Set raises the <see cref="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler"/> event.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.AutoCreate">
            <summary>
            Sets or gets whether an Entity is auto-created at Runtime for this <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> when the <see cref="P:InRule.Repository.RuleElements.RuleSetParameterDef.DataType"/> is <see cref="F:InRule.Repository.DataType.Entity"/>.
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDef.IsAnEntityDataType">
            <summary>
            Gets a Boolean value indicating parameter has an Entity reference DataType.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetParameterDefCollection">
            <summary>
            Collection of <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> instances.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDefCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDefCollection"/>.
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDefCollection.#ctor(InRule.Repository.IParent)">
            <summary>
            Creates a new instance of <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDefCollection"/> specifying its parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDefCollection.Add(InRule.Repository.RuleElements.RuleSetParameterDef)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> to the collection.
            </summary>
            <param name="value">The <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> to add.</param>
            <returns>The <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> added to the collection.</returns>
        </member>
        <member name="M:InRule.Repository.RuleElements.RuleSetParameterDefCollection.Add(InRule.Repository.RuleRepositoryDefBase)">
            <summary>
            Adds a new <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> to the collection.
            </summary>
            <param name="newItem">The new <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> to add.</param>
            <returns>The new <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> at the specified index.
            </summary>
            <param name="index">The ordinal value of the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>.</returns>
        </member>
        <member name="P:InRule.Repository.RuleElements.RuleSetParameterDefCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> by the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/> in the collection.</param>
            <returns>The specified <see cref="T:InRule.Repository.RuleElements.RuleSetParameterDef"/>.</returns>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetFireMode">
            <summary>
            Possible values for Ruleset FireMode which determine how Ruleset is evaluated.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetFireMode.Auto">
            <summary>
            Specifies that the Ruleset executes implicitly on any Submit.
            The Engine automatically re-calculates conditions within the Ruleset when any dependent value changes.
            The Ruleset RunMode determines when these value changes are to be checked.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetFireMode.Explicit">
            <summary>
            Specifies that the Ruleset executes only on an explicit Submit.
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleElements.RuleSetRunMode">
            <summary>
            Possible values for Ruleset RunMode which specifies how often the Ruleset is re-evaluated.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetRunMode.Optimized">
            <summary>
            Available only with "Auto" Fire Mode.Optimized RuleSets continue to fire until all of its conditions are satisfied
            and in a sequence based on an proprietary optimization algorithm.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetRunMode.Sequential">
            <summary>
            Available only with "Auto" Fire Mode.Sequential RuleSets continue to fire until all of its conditions are satisfied.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleElements.RuleSetRunMode.SequentialRunOnce">
            <summary>
            Available with either "Auto" or "Explicit" Fire Mode.SequentialRunOnce RuleSets execute only once.
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleFlow.OutcastStatus.Outcast">
            <summary>
            Shape or connected sub-graph is not part of flow
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleFlow.OutcastStatus.Mercenary">
            <summary>
            Shape or connected sub-graph is disconnected at the root incoming port
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleFlow.OutcastStatus.Recluse">
            <summary>
            Shape or connected sub-graph is disconnected at the terminal outgoing port
            </summary>
        </member>
        <member name="F:InRule.Repository.RuleFlow.OutcastStatus.Citizen">
            <summary>
            Shape is part of the primary flow
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowConnectionState">
            <summary>
            Represents a point-in-time snapshot of the state of a rule flow connection
            This is used by clipboard operations and persistence of incomplete flows
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowDesignerItemState">
            <summary>
            Represents a point-in-time snapshot of the state of a rule flow designer item
            This is used by clipboard operations and persistence of incomplete flows
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowDesignerState">
            <summary>
            Represents a point-in-time snapshot of the state of the rule flow designer
            This is used by clipboard operations and persistence of incomplete flows
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout">
            <summary>
            Stores metadata for re-creating a rule flow designer item
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.Validate(System.String[]@)">
            <summary>
            Validates the designer item metadata
            </summary>
            <param name="messages">validation errors or an empty array if there are none</param>
            <returns>true if the metadata is valid, false otherwise</returns>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.FontSize">
            <summary>
            Size of the font used for text on the designer item in points
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.ContentKey">
            <summary>
            Unique identifier of either the def associated with the shape, a convergence,
            or a constant identifier for other shapes not associated with a def e.g. the Start shape
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.ConvergenceKey">
            <summary>
            Unique identifier of the condition to which the convergence belongs
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.ShapeType">
            <summary>
            Represents the last-known <see cref="T:InRule.Repository.RuleFlow.RuleFlowShapeType"/> for a
            designer item's content def.
            'get' of this value from the SDK is not supported and will throw a <see cref="T:InRule.Common.Exceptions.RuleException"/>.
            'set' of this value only has an effect when called as part of the initialization of a new
            instance of <see cref="T:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout"/>
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.TextSource">
            <summary>
            Specifies the source of the textual content of the shape
            </summary>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout.Alias">
            <summary>
            Specifies an alias which can act as custom textual content for the shape
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowDesignerLayout">
            <summary>
            Stores metadata for re-creating a rule flow designer
            </summary>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.StartLayout(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Signals the start of a series of designer item layout operations
            </summary>
            <remarks>
            Layout operations are only valid when invoked between a call to 
            StartLayout and a matching call to EndLayout
            </remarks>
            <param name="startLeft">coordinate at which to begin layout on the X-axis</param>
            <param name="startTop">coordinate at which to begin layout on the Y-axis</param>
            <param name="startWidth">width of the start shape in units of 1/96 of an inch</param>
            <param name="startHeight">height of the start shape in units of 1/96 of an inch</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.EndLayout(System.Double,System.Double)">
            <summary>
            Signals the end of a series of designer item layout operations
            </summary>
            <remarks>
            Layout operations are only valid when invoked between a call to 
            StartLayout and a matching call to EndLayout
            </remarks>
            <param name="width">width of the end shape in units of 1/96 of an inch</param>
            <param name="height">height of the end shape in units of 1/96 of an inch</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.Add(InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout)">
            <summary>
            Add the metadata of a designer item to the metadata for the designer
            </summary>
            <param name="itemLayout">Metadata for the designer item to add</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.AddRange(System.Collections.Generic.IEnumerable{InRule.Repository.RuleFlow.RuleFlowDesignerItemLayout})">
            <summary>
            Add the metadata of a collection of designer items to the metadata for the designer
            </summary>
            <param name="itemLayouts">Metadata for the designer items to add</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutAction(InRule.Repository.RuleFlow.RuleFlowShapeType,System.Guid)">
            <summary>
            Layout operation for an action shape
            </summary>
            <param name="shapeType">the type of action shape</param>
            <param name="contentKey">the unique identifier of the content of the shape</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutAction(InRule.Repository.RuleFlow.RuleFlowShapeType,System.Guid,System.Double,System.Double)">
            <summary>
            Layout operation for an action shape
            </summary>
            <param name="shapeType">the type of action shape</param>
            <param name="contentKey">the unique identifier of the content of the shape</param>
            <param name="width">the width of the shape in units of 1/96 of an inch</param>
            <param name="height">the height of the shape in units of 1/96 of an inch</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConditionBranchTrue(System.Guid)">
            <summary>
            Signals the start of a series of descendent layout operations for the condition
            shape starting with the true branch
            </summary>
            <param name="contentKey">the unique identifier of the content of the shape</param>
            <remarks>
            Descendent layout operations are only valid when invoked between a call to 
            'LayoutConditionBranchTrue' and a matching call to 'EndLayoutCondition' with an
            optional call to 'LayoutConditionBranchFalse' separating the respective branch
            layout operations between the two for exclusive conditions
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConditionBranchTrue(System.Guid,System.Double,System.Double)">
            <summary>
            Signals the start of a series of descendent layout operations for the condition
            shape starting with the true branch
            </summary>
            <param name="contentKey">the unique identifier of the content of the shape</param>
            <param name="width">the width of the shape in units of 1/96 of an inch</param>
            <param name="height">the height of the shape in units of 1/96 of an inch</param>
            <remarks>
            Descendent layout operations are only valid when invoked between a call to 
            'LayoutConditionBranchTrue' and a matching call to 'EndLayoutCondition' with an
            optional call to 'LayoutConditionBranchFalse' separating the respective branch
            layout operations between the two for exclusive conditions
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConditionBranchFalse">
            <summary>
            Signals the start of a series of descendent layout operations for the false
            branch of the condition shape
            </summary>
            <remarks>
            Descendent layout operations are only valid when invoked between a call to 
            'LayoutConditionBranchTrue' and a matching call to 'EndLayoutCondition' with an
            optional call to 'LayoutConditionBranchFalse' separating the respective branch
            layout operations between the two for exclusive conditions
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConditionBranchFalse(System.Double,System.Double)">
            <summary>
            Signals the start of a series of descendent layout operations for the false
            branch of the condition shape
            </summary>
            <param name="width">the width of the shape in units of 1/96 of an inch</param>
            <param name="height">the height of the shape in units of 1/96 of an inch</param>
            <remarks>
            Descendent layout operations are only valid when invoked between a call to 
            'LayoutConditionBranchTrue' and a matching call to 'EndLayoutCondition' with an
            optional call to 'LayoutConditionBranchFalse' separating the respective branch
            layout operations between the two for exclusive conditions
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.EndLayoutCondition">
            <summary>
            Signals the end of a series of descendent layout operations for the condition shape
            </summary>
            <remarks>
            Descendent layout operations are only valid when invoked between a call to 
            'LayoutConditionBranchTrue' and a matching call to 'EndLayoutCondition' with an
            optional call to 'LayoutConditionBranchFalse' separating the respective branch
            layout operations between the two for exclusive conditions
            </remarks>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConvergence(System.Guid,System.Guid)">
            <summary>
            Layout operation for a convergence shape
            </summary>
            <param name="contentKey">the unique identifier of the content of the shape</param>
            <param name="convergenceKey">the unique identifier of the content of the associated condition shape</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.LayoutConvergence(System.Guid,System.Guid,System.Double,System.Double)">
            <summary>
            Layout operation for a convergence shape
            </summary>
            <param name="contentKey">the unique identifier of the content of the shape</param>
            <param name="convergenceKey">the unique identifier of the content of the associated condition shape</param>
            <param name="width">the width of the shape in units of 1/96 of an inch</param>
            <param name="height">the height of the shape in units of 1/96 of an inch</param>
        </member>
        <member name="M:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.Validate(System.String[]@)">
            <summary>
            Validates the designer metadata
            </summary>
            <param name="messages">validation errors or an empty array if there are none</param>
            <returns>true if the metadata is valid, false otherwise</returns>
        </member>
        <member name="P:InRule.Repository.RuleFlow.RuleFlowDesignerLayout.ZoomLevel">
            <summary>
            Specifies the zoom factor of the designer
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowShapeTextSource">
            <summary>
            Specifies the source for the textual content of a shape
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleFlow.RuleFlowShapeType">
            <summary>
            Specifies the type of a shape on a rule flow
            </summary>
        </member>
        <member name="T:InRule.Repository.RuleRepositoryDefDataTypeChangedHandler">
            <summary>
            Delegate for implementing various events related to Rule Repository Def data type changes.
            </summary>
            <param name="sender">
            The object raising the event.
            </param>
            <param name="e">
            The <see cref="T:InRule.Repository.RuleRepositoryDataTypeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:InRule.Security.RuleGroup.GetHashCode">
            <summary>
            Returns the hashcode of lowercase Username.
            </summary>
            <returns>The hashcode of lowercase Username.</returns>
        </member>
        <member name="T:InRule.Repository.Expressions.DeprecatedAttributeNode">
            <summary>
            used internally to support '@' attribute upgrader in asimov.
            </summary>
        </member>
        <member name="M:InRule.Repository.Expressions.DeprecatedAttributeNode.#ctor(System.String)">
            <summary>
            "get" prepended to attributename as all asimov attribute function start with get[attributename]
            except for "count" and "invalid" attribute
            </summary>
            <param name="attributeName"></param>
        </member>
        <member name="T:InRule.Repository.RuleApplicationSchemaDef">
            <summary>
            RuleApplicationSchemaDef is a placeholder def that represents a ruleapp schema. It is never directly added to a rule application.
            </summary>
        </member>
        <member name="T:InRule.Repository.StateLocation">
            <summary>
            Specifies the state location of runtime values.
            </summary>
        </member>
        <member name="T:InRule.Repository.UDFs.UdfRootDef">
            <summary>
            Authoring root folder for UDFs. Does not include or contain any model data, used solely for authoring purposes.
            </summary>
        </member>
        <member name="T:InRule.Repository.UDFs.UdfArgumentDef">
            <summary>
            UDF argument repository definition
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfArgumentDef.IsOutOrRef">
            <summary>
            Gets/Sets if parameter is an out parameter(can passback a value from the method).
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfArgumentDef.Description">
            <summary>
            Gets/Sets parameter description.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfArgumentDef.ArgumentTypeInfo">
            <summary>
            Gets/Sets the parameter data type
            </summary>
        </member>
        <member name="T:InRule.Repository.UDFs.UdfArgumentDefCollection">
            <summary>
            Collection of UDF Arguments
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.ReturnTypeInfo">
            <summary>
            Gets/Sets the UDF return type.
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfDef.ReturnTypeInfoChanged">
            <summary>
            Occurs when the return type info is modified
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.FunctionArguments">
            <summary>
            Gets/Sets the input arguments for an UDF
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfDef.FunctionArgumentsChanged">
            <summary>
            Occurs when the function arguments collection is modified
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.FunctionBody">
            <summary>
            Gets/Sets the UDF definition
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfDef.FunctionBodyChanged">
            <summary>
            Occurs when the function body is modified
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.RuleWriteAll">
            <summary>
            Gets/Sets dependency tracking for all bound objects
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.RuleWriteAllSpecified">
            <summary>
            Determines if RuleWriteAll is true
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.RuleWriteInfos">
            <summary>
            Gets/Sets dependency tracking for specific bound objects
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.RuleWriteInfosSpecified">
            <summary>
            Determines if RuleWriteInfos specified
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfDef.ParentCollection">
            <summary>
            Gets the parent collection. 
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfDefCollection.UdfAdded">
            <summary>
            Occurs when an udf is added
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfDefCollection.UdfRemoved">
            <summary>
            Occurs when an udf is removed.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfLibraryDef.UserDefinedFunctions">
            <summary>
            Gets/Sets a collection of UDFs authored under this library
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfLibraryDef.ParentCollection">
            <summary>
            Gets the parent collection. 
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfLibraryDefCollection.LibraryAdded">
            <summary>
            Occurs when a library is added
            </summary>
        </member>
        <member name="E:InRule.Repository.UDFs.UdfLibraryDefCollection.LibraryRemoved">
            <summary>
            Occurs when a library is removed.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfTypeInfo.DataTypeEntityName">
            <summary>
            Gets/Sets the entityname incase UDF returns an entity type
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfTypeInfo.DataTypeEntityNameSpecified">
            <summary>
            determines if UDF returns an entity type.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfTypeInfo.FullTypeName">
            <summary>
            Gets/Sets the Fulltypename for the UDF return/argument type.
            Incase of argument being entity type, the fullname of the object bound entity is returned.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfTypeInfo.FullTypeNameSpecified">
            <summary>
            Determines if FullTypeName is specified.
            </summary>
        </member>
        <member name="P:InRule.Repository.UDFs.UdfTypeInfo.AssemblyName">
            <summary>
            Incase of argument being an Entity type, returns the name of the Assembly entity is bound to. 
            </summary>
        </member>
        <member name="M:InRule.Repository.Upgraders.CleanIrInteractDefsinRuleAppXmlAfterDeSerialization(System.String,System.IO.Stream)">
            <summary>
            Deletes all irInteract defs under entities after a successful deserialzation of ruleapp.
            </summary>
        </member>
        <member name="M:InRule.Repository.Upgraders.CleanIrInteractDefsinRuleAppXml(System.Xml.Linq.XDocument)">
            <summary>
            Deletes all Action defs related to irInteract
            This is called if an exception is thrown during deserialization.
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Upgraders.GetAttributewithFunctionContext(System.String,System.Xml.Linq.XElement)">
            <summary>
            Get the context for attributes functions
            </summary>
            <param name="attribute"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Upgraders.GetAttributeContext(System.Xml.Linq.XElement,InRule.Repository.Upgraders.AttributeContext)">
            <summary>
            Get the operand for the attribute function using the xml
            </summary>
            <param name="node"></param>
            <param name="attrcontext"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Upgraders.UpgradeAttributesFunctionRename(InRule.Repository.RuleApplicationDef,System.Collections.Generic.List{System.String})">
            <summary>
            For Asimov, all attributes replaced with functions were now using function name as "Get" + attributename.
            As per FB 10365, this behavior needs to be changed for Count,IsValid and IsInvalid attributes.
            </summary>
            <param name="ruleApp"></param>
            <param name="upgraderMessageList"></param>
        </member>
        <member name="M:InRule.Repository.Upgraders.UpgradeLegacyXmlSchemaDefMappedNames(InRule.Repository.RuleApplicationDef,System.Collections.Generic.List{System.String})">
            <summary>
            Replace existing MappedSource*Names with valid proxy/CLR names, to ensure proper operation at runtime
            </summary>
            <remarks>
            Note that the valid CLR name can differ from the auto-aliased name (former doesn't check for name collision with inrule reserved words).
            </remarks>
            <param name="ruleApp"></param>
            <param name="upgraderMessageList"></param>
        </member>
        <member name="M:InRule.Repository.Utilities.AssemblyLoaderUtility.LoadAssembly(System.String,System.String)">
            <summary>
            Loads assembly if needed (not already loaded), from alternate search path, current domain basedirectory or GAC
            </summary>
            <remarks>
            As of 08/30/12, this is not called by all assembly load code paths from runtime - this indicates there may be some scenarios
            where the search path sequence here may not be enforced properly.
            </remarks>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="alternativeSearchPath">If not null search in specified alternate path.</param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.CircularReferenceHandler.GetFieldsCausingCircularRef(InRule.Repository.EntityDef,System.Collections.Generic.List{InRule.Repository.EntityDef},InRule.Repository.Utilities.EntityReferenceMap)">
            <summary>
            Gets all fields which cause a circular reference for this entity
            </summary>
            <param name="entity"></param>
            <param name="recursedEntList"></param>
            <param name="entRefMap"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.CircularReferenceHandler.RecurseEntityFields(InRule.Repository.EntityDef,System.Collections.Generic.List{InRule.Repository.FieldDef},System.Collections.Generic.List{InRule.Repository.EntityDef},InRule.Repository.Utilities.EntityReferenceMap)">
            <summary>
            Recurse through all child entity fields for a given parent entity field, returning any field which is contained in the list of fields referencing
            the ntity
            </summary>
            <param name="entity"></param>
            <param name="fieldsRefEnt"></param>
            <param name="recursedEntListforField"></param>
            <param name="entRefMap"></param>
            <returns></returns>
        </member>
        <member name="M:InRule.Repository.Utilities.FieldCollectorBase.GetDelimitedPathsFromDefsRecurse(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Utilities.FieldCollectorBase.Options,InRule.Repository.Utilities.FieldCollectorBase.CollectFieldHandler,InRule.Repository.RuleRepositoryDefBase[],System.Collections.Generic.HashSet{InRule.Repository.RuleRepositoryDefBase})">
            <returns>
            true: keep processing
            false: stop processing
            </returns>
        </member>
        <member name="M:InRule.Repository.Utilities.RuleCollectorBase.GetDelimitedPathsFromDefsRecurse(InRule.Repository.RuleRepositoryDefBase,InRule.Repository.Utilities.RuleCollectorBase.Options,InRule.Repository.Utilities.RuleCollectorBase.CollectRuleSetHandler,InRule.Repository.RuleRepositoryDefBase[],System.Collections.Generic.Stack{InRule.Repository.RuleRepositoryDefBase})">
            <returns>
            true: keep processing
            false: stop processing
            </returns>
        </member>
        <member name="F:InRule.Repository.Utilities.RuleSetListItem.IsContextRuleSet">
            <summary>
            !IsIndependent
            </summary>
        </member>
        <member name="M:InRule.Repository.Lexicon.ReservedWordProvider.IsValidNamePattern(System.String)">
            <summary>
            Determines if the supplied string matches the pattern for valid 'identifier' names.
            </summary>
            <param name="s">A string that is a candidate 'identifier' name.</param>
            <returns>True if the string matches the pattern for valid 'identifier' names, false otherwise</returns>
            <remarks>
            This does not ensure that the name is unique amongst other names in scope.
            
            Schema and other items which are addressable within rule syntax must 
            be named according to 'valid' 'identifier' naming restrictions:
            
            Identifier names must start with a letter or '_' and must contain only
            letters, digits, and '_'
            </remarks>
        </member>
        <member name="M:InRule.Repository.Lexicon.ReservedWordProvider.ConvertToValidName(System.String)">
            <summary>
            Convert to a valid engine entity name.
            </summary>
            <param name="candidateName"></param>
            <returns>Valid engine entity name.</returns>
            <exception cref="T:System.ApplicationException">If valid name cannot be constructed.</exception>
        </member>
    </members>
</doc>
